<!--
	See /server/admin/searchindexing.php header for a description of this application.
-->
<link rel="stylesheet" href="<!--INETROOT-->/config/jquery-ui/jquery-ui-1.8.24.custom.css" type="text/css" media="all" />

<style>
    .ui-progressbar-value { background-image: url("<!--INETROOT-->/config/images/progressBarFull.png"); }
</style>

<script language="javascript" type="text/javascript" src="<!--INETROOT-->/server/utils/javascript/XPath.js" ></script>
<script language="javascript" type="text/javascript" src="<!--INETROOT-->/server/utils/javascript/WWAjax.js" ></script>


<script language="javascript" type="text/javascript">
<!--
	// init globals
	var gAutoTimer = null;
	var gProcessMode = ''; // current running process: '', 'InitPage' or 'ExtractionStep'
	var gIter = 0; // zero based iteration step increased during indexing/unindexing
	var gLastObjId = 0; // the last object id of the last iteration step
	
	// init progress bar
    $(function() {
        $("#xtr_ProgressBar").progressbar({ value: 0 });
    });


	/**
	 * Requests server to run the next step of the indexing procedure.
	 */
	function extractionStep()
	{
		if( gAutoTimer != null ) {
			spinningBall( true, "xtr_spinningBall" ); // show spinning ball
			var serverUrl = "contentextraction.php";
			//serverUrl += "?start_debug=1"; // Zend Debugger (do not combine with server side debugging!)
			WWAjax.doHttpRequest( serverUrl, "callbackOnServerResponse", "text/xml", true, "command="+gProcessMode+"&iter="+gIter+"&lastObjId="+gLastObjId, true );
			gIter++;
		}
	}

	/**
	 * Requests server to return initial progress state.
	 */
	function initPage()
	{
		document.getElementById('xtr_errorReport').innerHTML = '';
		gProcessMode = 'InitPage';
		var serverUrl = "contentextraction.php";
		//serverUrl += "?start_debug=1"; // Zend Debugger (do not combine with server side debugging!)
		WWAjax.doHttpRequest( serverUrl, "callbackOnServerResponse", "text/xml", true, "command="+gProcessMode, true );
	}

	/**
	 * Called back by WWAjax when server responds on startExtraction / extractionStep function call.
	 * This updates the progress bar with results returned from server.
	 */
	function callbackOnServerResponse( xmlResult, httpStatus )
	{
		// stop indexing on when user did abort/reload page
		if( httpStatus == 0 ) {
			processingStopped();
			return;
		}

		// show HTML page when redirected, such as the logon page!
		if( httpStatus == 200 && !xmlResult.documentElement ) {
			document.write( xmlResult );
			return;
		}
		
		// stop indexing on error and show message
		if( !xmlResult.documentElement ) {
			alert( 'Fatal Error!\nHTTP Status: ' + httpStatus + '\nInvalid XML response:\n' + xmlResult );
			processingStopped(); // break out when communication fails (avoid many errors)
			return;
		}
		if( httpStatus != 200 ) {
			alert( 'Fatal Error!\nHTTP Status: ' + httpStatus + '\nXML response:\n' + xmlResult );
			processingStopped(); // break out when communication fails (avoid many errors)
			return;
		}
		
		// parse error/warning/info messages from server response and display at screen
		switch( gProcessMode ) {
			case 'InitPage':        errRepId = 'xtr_errorReport'; break;
			case 'ExtractionStep':  errRepId = 'xtr_errorReport'; break;
		}
		testResultNodes = XPath.selectNodes( "//ProgressResponse/Messages/Message", xmlResult );
		for( i=0; i < testResultNodes.length; i++ ) {
			var msgText = XPath.selectNodeExtended( "text()", testResultNodes[i] );
			var msgSeverity = XPath.selectNodeExtended( "@severity", testResultNodes[i] );
			switch( msgSeverity ) {
				case 'ERROR':
					msgColor = 'red';
					msgPrefix = 'ERROR';
				break;
				case 'WARN':
					msgColor = 'orange';
					msgPrefix = 'WARNING';
				break;
				case 'INFO':
				default:
					msgColor = 'blue';
					msgPrefix = 'INFO';
				break;
			}
			document.getElementById(errRepId).innerHTML += '<font color="' + msgColor + '">' + msgPrefix + ': <'+'/font>' + msgText + '<br/>';
			// continue!
		}

		// parse progress response from server
		idxResultNodes = XPath.selectNodes( "//ProgressResponse/ExtractionProgressBar", xmlResult );
		if( idxResultNodes.length == 0 ) { // no results implies test crashed or something
			alert( 'Fatal Error!' );
			processingStopped();
			return;
		}
		gLastObjId = XPath.selectNodeExtended( "LastObjId/text()", idxResultNodes[0] );
		
		// update index process bar
		var max = XPath.selectNodeExtended( "Maximum/text()", idxResultNodes[0] );
		var pro = XPath.selectNodeExtended( "Progress/text()", idxResultNodes[0] );
		var runCompleted = XPath.selectNodeExtended( "RunCompleted/text()", idxResultNodes[0] );
		var errObjs = XPath.selectNodeExtended( "ErrorObjs/text()", idxResultNodes[0] );
        // jQuery progressBar
        var xtrProgressPercentage = (pro / max) * 100;
        $("#xtr_ProgressBar").progressbar( "option", "value", xtrProgressPercentage );
        $("#xtr_ProgressLabel").text( xtrProgressPercentage.toFixed(0) + '%' );


        document.getElementById('xtr_extractedObjCount').innerHTML = pro;
		document.getElementById('xtr_candidateObjCount').innerHTML = max;
		if( errObjs && errObjs.length > 0 ) {
			document.getElementById('err_objects').innerHTML = '<font color="red">ERROR: <'+'/font>' + errObjs + '<br/>';
			document.getElementById('err_widget').style.visibility = 'visible';
		} else {
			document.getElementById('err_objects').innerHTML = '';
			document.getElementById('err_widget').style.visibility = 'hidden';
		}

		// When end of indexing process reached, we stop, else continue
		if( runCompleted == 'true' ) {
			processingStopped();
		} else {
			// only start new timer when not stopped by user in the meantime
			if( gAutoTimer != null ) {
				gAutoTimer = setTimeout( "extractionStep()", 1 );
			} else {
				processingStopped();
			}
		}
		// When nothing to do, disabled all buttons
		document.getElementById('xtr_widget').style.visibility = (max == 0) ? 'hidden' : 'visible';
	}
	
	/**
	 * Shows/hides the spinning ball icon
	 */
	function spinningBall( show, spinningBallId )
	{
		var spinningBall = document.getElementById( spinningBallId ); 
		if( show ) {
			spinningBall.innerHTML = '<img src="../../../config/images/wwloader.gif">';
		} else {
			spinningBall.innerHTML = '';
		}
	}

	/**
	 * Start content extraction process of Enterpise objects using Tika Server
	 */
	function startExtraction()
	{
		gIter = 0;
		gLastObjId = 0;
		document.getElementById('xtr_errorReport').innerHTML = '';
		gProcessMode = 'ExtractionStep';
		if( gAutoTimer == null ) {
		
			// toggle visual state of all buttons
			grayButtons();
			document.getElementById('xtr_stopBtn').disabled = false;
			
			// init global timer to start processing
			gAutoTimer = setTimeout( "extractionStep()", 1 );
		}
	}
	
	/**
	 * Clear markers set to Enterpise objects for which content extraction has failed before (using Tika Server).
	 * Then starts content extraction for those objects.
	 */
	function retryErrorObjs()
	{
		document.getElementById('err_objects').innerHTML = '';
		document.getElementById('err_widget').style.visibility = 'hidden';
		
		gProcessMode = 'RetryErrorObjs';
		var serverUrl = "contentextraction.php";
		//serverUrl += "?start_debug=1"; // Zend Debugger (do not combine with server side debugging!)
		WWAjax.doHttpRequest( serverUrl, "callbackOnServerResponse", "text/xml", true, "command="+gProcessMode, false ); // sync!
		
		startExtraction();
	}

	/**
	 * Called back from server when indexing process has actually stopped
	 */
	function processingStopped()
	{
		initButtons(); // toggle visual state of all buttons
		
		// hide spinning ball
		spinningBall( false, "xtr_spinningBall" );

		// klll global timer to stop processing
		if( gAutoTimer != null ) {
			clearTimeout( gAutoTimer ); // stop auto-save interval
			gAutoTimer = null;
		}
	}
	
	/**
	 * Aborts indexing process that was started with startExtraction function
	 */
	function stopProcessing()
	{
		document.getElementById('xtr_stopBtn').disabled = true;
		
		// klll global timer to stop processing
		if( gAutoTimer != null ) {
			clearTimeout( gAutoTimer ); // stop auto-save interval
			gAutoTimer = null;
		}
	}

	/**
	 * Sets initial enabled/disabled state for all buttons. Typically when ready.
	 */
	function initButtons()
	{
		document.getElementById('xtr_startBtn').disabled = false;
		document.getElementById('xtr_stopBtn').disabled = true;
	}

	/**
	 * Disables all buttons. Typically when busy / processing.
	 */
	function grayButtons()
	{
		document.getElementById('xtr_startBtn').disabled = true;
		document.getElementById('xtr_stopBtn').disabled = true;
	}
-->
</script>

<table class="appframe"><tr class="text"><td>

	<!-- app header -->
	<table class="apptitlebar">
		<tr>
			<td><img class="apptitleicon" src="../../../config/images/searchsvr_32.gif"/></td>
			<td>&nbsp;<span class="apptitletext">Tika content extraction</span></td>
		</tr>
	</table>

	<!-- extraction progress widget -->
	<div id="xtr_widget" style="visibility:hidden"><table class="listframe"><tr><td>
		<table class="listpane">
			<tr>
				<td align="left">Extracted objects <span id="xtr_extractedObjCount"></span></td>
				<td align="right">Candidate objects <span id="xtr_candidateObjCount"></span></td>
				<td/>
			</tr>
			<tr>
				<td height="30px"><div style="width:400px" id="xtr_ProgressBar"></div></td>
                <td height="30px" width="30px" align="right"><span id="xtr_ProgressLabel"></span></td>
				<td><span id="xtr_spinningBall"></span></td>
			</tr>
			<tr>
				<td colspan="3">
					<input type="button" name="xtr_startBtn" id="xtr_startBtn" value="Start" onclick="startExtraction();" />&nbsp;
					<input type="button" name="xtr_stopBtn" id="xtr_stopBtn" value="Stop" onclick="stopProcessing();" />&nbsp; 
				</td>
			</tr>
		</table>
	</td></tr></table></div>
	
	<!-- error report -->
	<table class="listpane" style="width:400px"><tr><td>
		<span id="xtr_errorReport"></span>
	</td></tr></table>

	<!-- objects in error status -->
	<table class="listpane"><tr><td>
		<div id="err_widget" style="visibility:hidden; border-style:dotted; border-width:thin; width:400px;">
			<span id="err_objects"></span><br/>
			<input type="button" name="err_retryBtn" id="err_retryBtn" value="Retry" onclick="retryErrorObjs();" />
		</div>
	</td></tr></table>
	
</td></tr></table>

<script language="javascript" type="text/javascript">
<!--
	// late initializers
	spinningBall( true, "xtr_spinningBall" ); // show spinning ball
	setTimeout( "initPage()", 50 );
-->
</script>
