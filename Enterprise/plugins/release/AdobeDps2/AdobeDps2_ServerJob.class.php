<?php
/**
 * @since 		v9.6
 * @copyright	WoodWing Software bv. All Rights Reserved.
 *
 * Server Job connector that does the actual publishing for the Adobe DPS integration.
 */
 
require_once BASEDIR . '/server/interfaces/plugins/connectors/ServerJob_EnterpriseConnector.class.php';

class AdobeDps2_ServerJob extends ServerJob_EnterpriseConnector
{
	public function getPrio() { return self::PRIO_DEFAULT; }

	/**
	 * The job handler (server plug-in connector) tells the core server how to the job must be handled.
	 * The Id, JobType and ServerType are overruled by the core and not be changed.
	 * Other properties can be set and are configurable by system admin users.
	 * Called by BizServerJob when the Health Check or Server Job admin pages are run.
	 *
	 * @param ServerJobConfig $jobConfig Configuration to update by the handler.
	 */
	public function getJobConfig( ServerJobConfig $jobConfig )
	{
		$jobConfig->NumberOfAttempts = 5;
		$jobConfig->SysAdmin = null; // use acting user
		$jobConfig->Recurring = false;
		$jobConfig->Active = true;
		$jobConfig->UserId = 0; // use acting user
		$jobConfig->UserConfigNeeded = false; // use acting user
		$jobConfig->WorkingDays = false; // no meaning since non-recurring
		$jobConfig->JobType = 'AdobeDps2';
	}

	/**
	 * Called by BizServerJob when a server job is picked up from the queue
	 * and needs to be run by the job handler implementing this interface.
	 * The handler should update the status through $job->JobStatus->setStatus().
	 * Scan the export directory for the folders containing Adobe Dps folios
	 * generated by the "Preview' within CS. These folders will be deleted
	 * if they are older than expiration time of a ticket.
	 *
	 * @param ServerJob $job
	 */
	public function runJob( ServerJob $job )
	{
		require_once BASEDIR.'/server/dataclasses/ServerJobStatus.class.php';
		require_once dirname(__FILE__).'/utils/ServerJob.class.php';
		AdobeDps2_Utils_ServerJob::unserializeJobFieldsValue( $job );

		try {
			// Resolve layout ID from job data.
			if( !$job->JobData ) {
				$details = 'No job data found for job (id="'.$job->JobId .'").';
				throw new BizException( 'ERR_ARGUMENT', 'Server', $details ); // should never happen
			}
			$layoutId = $job->JobData['ID'];

			// Resolve layout StoreName and Version from job data.
			require_once BASEDIR.'/server/dbclasses/DBObject.class.php';
			$objectsProps = DBObject::getObjectsPropsForRelations( array( $layoutId ) );
			if( !$objectsProps[$layoutId] ) {
				$details = 'The layout (id="'.$layoutId.'") could have been removed just before the job got processed.';
				throw new BizException( 'ERR_NOTFOUND', 'Server', $details );
			}
			$layoutProps = $objectsProps[$layoutId];
			$storeName = $layoutProps['StoreName'];
			
			// Start publish process when the layout version at the time the job was created
			// it still the actual version (stored in DB / FileStore).
			if( $layoutProps['Version'] == $job->JobData['Version'] ) {
				$version = $job->JobData['Version'];
				$pubChannelId = $job->JobData['PubChannelId'];
				require_once dirname(__FILE__). '/bizclasses/Publishing.class.php';
				AdobeDps2_BizClasses_Publishing::publishLayoutFolios( $pubChannelId, $layoutId, $version, $storeName );
			} else {
				LogHandler::Log( 'AdobeDps2', 'INFO', 'The latest layout version is "' . $layoutProps['Version'] . '"' .
					' while the planned job is for layout version "'.$job->JobData['Version'].'", therefore skipping ' .
					'this job. Job (id="'.$job->JobId.'") will not be executed.' );
				// We skip this job on purpose, therefore setting this task to be COMPLETED (see below).
			}
			
			// When no exception thrown, the job is completed.
			$job->JobStatus->setStatus( ServerJobStatus::COMPLETED );
			
		} catch( BizException $e ) {
			if( $e->getErrorCode() == 'S1034' ) { // ERR_NO_ACTION_TAKEN, happens when semaphore could not be created
				$job->JobStatus->setStatus( ServerJobStatus::REPLANNED ); // try again later
			} else {
				$job->JobStatus->setStatus( ServerJobStatus::FATAL ); // give up
				$job->ErrorMessage = $e->getMessage();
				
				// Send an email with error report to the acting user.
				require_once dirname(__FILE__).'/bizclasses/Email.class.php';
				AdobeDps2_BizClasses_Email::sendEmail( $job->JobData['ID'], $e->getMessage() );
				// L> Note that the details are left out; Those are for the system admin
				//    who can have a look at the server logging when needed.
			}
		}

		AdobeDps2_Utils_ServerJob::serializeJobFieldsValue( $job );
	}
}
