<?php
/**
 * @package     Enterprise
 * @subpackage  Analytics
 * @since       v9.4
 * @copyright   WoodWing Software bv. All Rights Reserved.
 *
 * Admin web application to configure this plugin. Called by core once opened by admin user
 * through app icon shown at the the Integrations admin page.
 */

class Analytics_Utils
{
	const ANALYTICS_REVEAL_USERNAMES = 'analytics_reveal_usernames';
	const ANALYTICS_SERVER_URL = 'analytics_server_url';
	const ANALYTICS_SERVER_SECRET = 'analytics_server_secret';
	const ANALYTICS_SERVER_REGISTERED = 'analytics_server_registered';

	/**
	 * Retrieves the Analytics Server URL setting from the database
	 *
	 * Removes the / at the end of the URL when found. So the Analytics plugin may assume no slash.
	 *
	 * @return string The retrieved URL, or empty if not set.
	 */
	public static function getServerUrl()
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		$value = DBConfig::getValue( self::ANALYTICS_SERVER_URL );
		// Auto remove any slash from the end so the Analytics plugin may assume no slash.
		$value = rtrim( $value, '/' );

		return is_null($value) ? '' : $value;
	}

	/**
	 * URL to the entry point of the Analytics Server.
	 * For example: 'http://localhost:8080/analyticsserver/' (including trailing /).
	 * Default value is ''.
	 *
	 * Stores the Analytics Server URL setting in the database.
	 *
	 * @param string $url The URL to be stored / updated.
	 * @return bool Whether or not the URL was successfully stored.
	 */
	public static function storeServerUrl( $url = '' )
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		return DBConfig::storeValue( self::ANALYTICS_SERVER_URL , $url );
	}

	/**
	 * Retrieves the Analytics Reveal Usernames setting from the database.
	 *
	 * @return boolean The retrieved setting, or false if not set.
	 */
	public static function getRevealUsernames()
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		$value = DBConfig::getValue( self::ANALYTICS_REVEAL_USERNAMES );
		return (bool)($value == 'on');
	}

	/**
	 * Tells if Enterprise Server should communicate usernames to the Analytics server.
	 * Warning: Before enabling this option, make sure it is not violating the local privacy policies.
	 * When enabled, usernames are revealed in the reports generated by the Analytics server.
	 * Default value is false.
	 *
	 * Stores the Analytics Reveal Usernames setting in the database.
	 *
	 * @param boolean $setting The setting to be stored / updated.
	 * @return bool Whether or not the setting was successfully stored.
	 */
	public static function storeRevealUsernames( $setting = false )
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		$value = ($setting === true) ? 'on' : '';
		return DBConfig::storeValue( self::ANALYTICS_REVEAL_USERNAMES, $value );
	}

	/**
	 * Retrieves the Analytics Consumer Key. For that the Enterprise System Id is returned.
	 *
	 * @return null|string The retrieved key, or NULL if it is not set.
	 */
	public static function getConsumerKey()
	{
		require_once BASEDIR.'/server/bizclasses/BizSession.class.php';
		return BizSession::getEnterpriseSystemId();
	}

	/**
	 * Retrieves the Analytics Consumer Secret setting from the database.
	 *
	 * @return null|string The retrieved secret, or NULL if it is not set.
	 */
	public static function getConsumerSecret()
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		return DBConfig::getValue( self::ANALYTICS_SERVER_SECRET );
	}

	/**
	 * Is a string that is used in order to scramble the Analytics Server Key.
	 * Default value is ''.
	 *
	 * Stores the Analytics Consumer Secret setting in the database.
	 *
	 * @param string $secret The key to be stored / updated.
	 * @return bool Whether or not the setting was successfully stored.
	 */
	public static function storeConsumerSecret( $secret = '' )
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		return DBConfig::storeValue( self::ANALYTICS_SERVER_SECRET, $secret);
	}

	/**
	 * Retrieves the Analytics Server Registered setting from the database.
	 *
	 * @return null|string The retrieved setting, or NULL if it is not set.
	 */
	public static function getIsRegistered()
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		return DBConfig::getValue( self::ANALYTICS_SERVER_REGISTERED );
	}

	/**
	 * Determines whether or not the Analytics Server connection settings are
	 * registered. Exporting can only be done when the properties have been registered.
	 * Default value is false.
	 *
	 * Stores the Analytics Server Registered setting in the database.
	 *
	 * @param bool $registered The setting to be stored / updated.
	 * @return bool Whether or not the setting was successfully stored.
	 */
	public static function storeIsRegistered( $registered = false )
	{
		require_once BASEDIR.'/server/dbclasses/DBConfig.class.php';
		return DBConfig::storeValue( self::ANALYTICS_SERVER_REGISTERED, $registered);
	}

	/**
	 * Called by the core in order to collect any plugin event information that may be necessary for the event.
	 * This happens during the creation of the event, in order to save any session-related information for when the
	 * event will be processed (since processing happens asynchronously).
	 *
	 * @return array An associated array containing the plugin information for the event.
	 */
	public static function collectPluginEventInfo()
	{
		require_once BASEDIR.'/server/bizclasses/BizSession.class.php';
		$pluginEventInfo = array();
		$pluginEventInfo['clientName'] = BizSession::getClientName();
		$pluginEventInfo['clientVersion'] = BizSession::getClientVersion();
		// Add the username of the person who performed the action. Relying on server jobs isn't enough in some cases. 
		$pluginEventInfo['actorUserName'] = BizSession::getShortUserName();
		return $pluginEventInfo;
	}
} 