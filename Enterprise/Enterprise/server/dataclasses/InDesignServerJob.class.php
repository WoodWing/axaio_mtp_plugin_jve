<?php
/**
 * @since v9.7
 * @copyright WoodWing Software bv. All Rights Reserved.
 *
 * InDesign Server Job instance.
 */
require_once BASEDIR.'/server/dataclasses/InDesignServerJobStatus.class.php';

class InDesignServerJob
{
	// Job definition:
	public $JobId;            // [9.7] Unique identifier (GUID) of the job record.
	public $Foreground;       // [6.0] Whether or not end-users are waiting for the job to complete. Background jobs are offloaded from the workflow.
	public $ObjectId;         // [8.0] The object id of the Layout or Layout Module that to be processed by the job.
	public $ObjectVersion;    // [9.7] Object version of Layout or Layout Module being processed. Populated once the job is picked up from the queue.
	public $JobType;          // [6.0] Unique name of this kind of job. Used to configure priorities (JobPrio).
	public $JobScript;        // [6.0] JavaScript module to be executed in SC for IDS.
	public $JobParams;        // [6.0] Parameters to be passed on to the JavaScript module (JobScript) to execute the script.
	//public $JobData;        // [Future] Custom data, depending on the job type.
	//public $DataEntity;     // [Future] Tells the type of $JobData.
	
	// Job execution:	
	public $LockToken;        // [9.7] GUID generated by a PHP process to assure it took the lock to execute the job (blocking other processes accidentally running the same job at the same time).
	public $QueueTime;        // [6.0] Time when the job was pushed into the queue. Format: yyyy-mm-ddThh:mm:ss
	public $PickupTime;       // [10.1.3] Time when the job is available to be picked up by the background runner. Format: yyyy-mm-ddThh:mm:ss
	public $StartTime;        // [6.0] Time when the job was picked from the queue. Format: yyyy-mm-ddThh:mm:ss
	public $ReadyTime;        // [6.0] Time when the job execution was completed. Format: yyyy-mm-ddThh:mm:ss
	public $ErrorCode;        // [6.0] The error returned by the JavaScript module. Zero when no error. Could represent internal SC error code.
	public $ErrorMessage;     // [6.0] Error message raised by the JavaScript module (or by Enterprise Server in context of job execution).
	public $ScriptResult;     // [6.0] Output of the JavaScript module execution. Used for debugging. Typically contains logging and profiling information.
	public $JobStatus;        // [9.7] Current status of the job. See InDesignServerJobStatus.class.php for details.
	public $Attempts;         // [9.7] The number of attempts job has been picked up before for processing. When the job is created, it is set to 0, it increases each time after calling runJob.
	
	// ID Server selection:
	public $AssignedServerId; // [6.0] The InDesign Server instance that is picked to handle the job. When job is retried, it represents the last picked one.
	public $MinServerVersion; // [9.5] Minimum required internal version of IDS that is suitable to execute the job. 8=CS6, 10=CC2014, etc
	public $MaxServerVersion; // [9.6] Maximum required internal version of IDS that is suitable to execute the job. 8=CS6, 10=CC2014, etc
	public $JobPrio;          // [9.6] Priority used to select which InDesign Server instance should pick it up.
	
	// Job session context:
	public $TicketSeal;       // [9.7] Ticket that can be used by the job script to logon without user name and password.
	public $Ticket;           // [9.7] Ticket of the job itself. Set once the job script has logged in to Enterprise.
	public $ActingUser;       // [9.7] The user short name (used to run async/background job) for who access rights are gained
	public $Initiator;        // [9.7] Short name of user who has pushed the IDS job in the queue.
	public $ServiceName;      // [9.7] Name of web service in which context the IDS job was pushed into the queue.
	public $Context;          // [9.7] Additional information in which context the IDS job was pushed into the queue. Free format, depends per job type.
}
