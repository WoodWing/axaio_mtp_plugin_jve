<?php
/**
 * @since v8.0
 * @copyright WoodWing Software bv. All Rights Reserved.
 *
 * Server Job instance.
 */
require_once BASEDIR.'/server/dataclasses/ServerJobStatus.class.php';

class ServerJob
{
	// >>> DB fields taken from IDS jobs => TODO: reconsider which ones to embrace
	public $JobId;        // [9.4] Unique identifier (GUID) of the job record. (This supersedes the former $Id.)
	//public $Foreground; // ids only => there is no real background; co-workers run in foreground, which is the background from end-users point of view working at workflow servers.
	public $QueueTime;
	public $ServiceName;  // NEW* The service created this job. (Tracked by the core server.)
	public $Context;      // NEW* Free format contextual data. (Meaning depends per job type.)
	//public $ExclusiveLock;
	public $ServerType;   // NEW* The kind of server that can handle the job.
	public $JobType;      // Unique name of the job for the given ServerType. (ServerType and JobType together is system wide unique.)
	//public $JobScript; // ids only?
	//public $JobParams; // ids only?
	public $AssignedServerId; // The Server that is currently handing the job, or has handled the job (for the last time)
	public $StartTime;
	public $ReadyTime;
	//public $ErrorCode; // use GlobalStatus/DetailStatus instead
	public $ErrorMessage; // [v9.6] Specific error information, to be provided by job implementation.
	//public $ScriptResult; // ids only?
	//public $ServerVersion; // ids only?
	// (*) Those fields are NOT taken from IDS!
	// <<<
	
	// TODO: Consider more fields: 
	// - Dependency (with other jobs to make chains representing one big job)
	// - Priority (in case of long queues, e.g. low/normal/high)

	// Job authorization:
	public $LockToken;  // GUID generated by a PHP process to assure it took the lock to execute the job (blocking other processes accidentally running the same job at the same time).
	public $TicketSeal; // Seal for the valid ticket of user (acting sync) for async usage later
	public $ActingUser; // The user short name (used to run async/background job) for who access rights are gained
	
	// Job status:
	/** @var ServerJobStatus $jobStatus */
	public $JobStatus;
	public $Attempts; // The number of attempts job has been picked up before for processing. When the job is created, it is set to 0, it increases each time after calling runJob.

	// Job data:
	public $JobData;    // [v9.4] Any data, depending on the job type. For e.g.: EnterpriseEvent jobs, this field holds a serialized EnterpriseEventData.
	public $DataEntity; // [v9.4] Tells the type of $JobData.

}
