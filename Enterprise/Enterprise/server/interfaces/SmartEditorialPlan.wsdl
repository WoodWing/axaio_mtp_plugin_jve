<?xml version="1.0"?>
<!-- 
	Generic SOAP interface. 
	Implemented by Editorial system and called by Planning System.
-->

<!--
	Used terms:
	- PageOrder: Numeric (arabic notation) page number.
	- PageNumber: Human readable page number for future purposes (-> currently unsupported).
	- PageSequence: Relative page position within the layout.
	- Status: Object state determined by the editorial system. Can not be specified by planning system.
	- Publication/Issue/Name: Alternative identification path of an object, especially used for object creations.
	- Id: Object's identifier which is unique for the entire system.
	- Name: Object's display name which is unique for publication+issue and object type.
-->

<definitions 
		name="SmartEditorialPlan" 
		targetNamespace="urn:SmartEditorialPlan" 
		xmlns:tns="urn:SmartEditorialPlan" 
		xmlns="http://schemas.xmlsoap.org/wsdl/" 
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
		xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
		xmlns:content="http://schemas.xmlsoap.org/ws/2002/04/content-type/"
		xmlns:dime="http://schemas.xmlsoap.org/ws/2002/04/dime/wsdl/" 
		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
		xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/">
		
	<types xmlns="http://schemas.xmlsoap.org/wsdl/">
		<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:SmartEditorialPlan">

			<simpleType name="RenditionType">
				<restriction base="string">
					<enumeration value="none"/>    <!-- Request for object info only; without attachment -->
					<enumeration value="preview"/> <!-- low res preview image (jpeg) sent as DIME attachment -->
					<enumeration value="output"/>  <!-- high res output file (PDF, EPS, etc) sent as DIME attachment (used for production) -->
				</restriction>
			</simpleType>

			<simpleType name="PublishPrioType">
				<restriction base="string">
					<enumeration value="MustHave"/>    <!-- Advert MUST be placed -->
					<enumeration value="ShouldHave"/>  <!-- Advert should be placed (when there is enough space) -->
					<enumeration value="NiceToHave"/>  <!-- Advert can be placed (when there is splenty space) -->
				</restriction>
			</simpleType>
			
			<!-- NOTE: Smart Plan System WSDL and Smart Editorial Plan WSDL both define the same
				types at the moment, these will later move to separate schema used by both -->
			<complexType name="AttachmentContent">
				<simpleContent>
					<restriction base="soap-enc:base64Binary">
						<annotation>
							<appinfo>
								<content:mediaType value="application/octet-stream"/>
							</appinfo>
						</annotation>
					</restriction>
				</simpleContent>
			</complexType>
			
			<complexType name="Attachment">
				<all>
					<element name="Rendition" type="tns:RenditionType"/>
					<element name="Type"      type="xsd:string"/>
					<element name="Content"   type="tns:AttachmentContent" nillable="true"/>
					<element name="FilePath"  type="xsd:string" nillable="true"/> <!-- v8.0, file path at File Transfer server (internal) -->
					<element name="FileUrl"   type="xsd:string" nillable="true"/> <!-- v8.0, file URL at File Transfer server (external) -->					
				</all>
			</complexType>
			<complexType name="ArrayOfAttachment">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Attachment[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Edition">
				<all>
					<!-- Adverts are identified by Id -OR- by Name+Pub+Issue. Both ways are supported. 
					     The Pub and Issue are provided by the parent element, so they are not part of
					     this element. -->
					<element name="Id" nillable="true" type="xsd:string"/>
					<element name="Name" nillable="true" type="xsd:string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfEdition">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Edition[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Page">
				<all>
					<!-- The plan system is free to specify pages and so they can differ from the specified layout template.
					     The editorial system takes care about this by removing or adding pages and renumbering them where needed.
					     On open+save layout in InDesign, the pages previews/thumbs will get updated. 
					     Until that moment previews/thumbs will be used of the layout template. -->
					<!-- When specifying pages for a layout it matters whether or not these are edition specific. For a page
						 that is not edition specific, a single Page element can be created with a nil Edition. For pages with 
						 differences between edtions (like page numbering), exactly the same number of Page elements must be added 
						 as the layout has editions. These Page elements must have the same PageSequence value -->
					<element name="PageOrder"     type="xsd:unsignedInt"/>                        <!-- Page number (arabic notation) -->
					<element name="Width"         type="xsd:double"            nillable="true"/>  <!-- Page's measurements in points (pt). Read-only for plan system; determined by layout template. -->
					<element name="Height"        type="xsd:double"            nillable="true"/>
					<element name="Files"         type="tns:ArrayOfAttachment" nillable="true"/>  <!-- Preview/Production files returned by editorial system -->
					<element name="Edition"       type="tns:Edition"           nillable="true"/>  <!-- v5.0 Edition to produce page. Nil when same for all editions, or no editions available at pub/iss. -->
					<element name="Master"        type="xsd:string"            nillable="true"/>  <!-- v5.0 Name of master page in template used to create page. When empty, first master page is taken. -->
					<element name="PageSequence"  type="xsd:unsignedInt"       nillable="true"/>  <!-- Relative location within the layout, starts at 1 -->
				</all>
			</complexType>
			<complexType name="ArrayOfPage">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Page[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Layout">
				<all>
					<!-- Layouts are identified by Id -OR- by Name+Pub+Issue. Both ways are supported for ModifyLayouts and DeleteLayouts. 
					     For CreateLayouts, the Id is unknown by planning system and so it should give Name+Pub+Issue.
					     After creation, the Id returned so that can be used for updates and deletions, which is more efficient and flexible. -->
					<element name="Id"          type="xsd:string"         nillable="true"/>
					<element name="Name"        type="xsd:string"         nillable="true"/>
					<element name="Publication" type="xsd:string"         nillable="true"/>
					<element name="Issue"       type="xsd:string"         nillable="true"/>
					<element name="Section"     type="xsd:string"         nillable="true"/>
					<element name="Status"      type="xsd:string"         nillable="true"/>
					<element name="Pages"       type="tns:ArrayOfPage"    nillable="true"/> <!-- List of planned pages which needs to be complete since it overwrites all previous pages!! -->
					<element name="Editions"    type="tns:ArrayOfEdition" nillable="true"/> <!-- List of editions this ad is part of. -->
					<element name="Deadline"    type="xsd:dateTime"       nillable="true"/> <!-- Custom deadline value that overrules the status based deadline. -->
					<element name="Version"     type="xsd:string"         nillable="true"/> <!-- [v6.0] object version (major.minor), read only -->
				</all>
			</complexType>
			<complexType name="ArrayOfLayout">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Layout[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="LayoutFromTemplate">
				<all>
					<element name="NewLayout" type="tns:Layout"/>
					<element name="Template" type="xsd:string"/>  
				</all>
			</complexType>
			<complexType name="ArrayOfLayoutFromTemplate">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:LayoutFromTemplate[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Placement">	
				<all>
					<element name="Left"         type="xsd:double"/>                    <!-- Position in points (pt) on page -->
					<element name="Top"          type="xsd:double"/>
					<element name="Columns"      type="xsd:int"      nillable="true"/>  <!-- Future. Column count. Nil means use Width instead. -->
					<element name="Width"        type="xsd:double"   nillable="true"/>  <!-- Width in points (pt). Nil means actual advert size. -->	
					<element name="Height"       type="xsd:double"   nillable="true"/>  <!-- Height in points (pt). Nil means actual advert size. -->
					<element name="Fixed"        type="xsd:boolean"  nillable="true"/>  <!-- Future. True if not movable by layouter. -->
					<element name="Layer"        type="xsd:string"   nillable="true"/>  <!-- [v5.0] InDesign layer name for placement. Empty takes default layer. -->
					<element name="ContentDx"    type="xsd:double"   nillable="true"/>  <!-- [v5.0] Move content relatively to frame (not to page) from left to right in points (pt). Negative for bleed. Zero for no move. -->
					<element name="ContentDy"    type="xsd:double"   nillable="true"/>  <!-- [v5.0] Move content relatively to frame (not to page) from top to bottom in points (pt). Negative for bleed. Zero for no move. -->
					<element name="ScaleX"       type="xsd:double"   nillable="true"/>  <!-- [v5.0] Factor to scale content horizontally in its frame. Value 0.15 means 15.2%. Default 100%. Avoid zero. -->
					<element name="ScaleY"       type="xsd:double"   nillable="true"/>  <!-- [v5.0] Same but then vertically. -->
				</all>
			</complexType>

			<complexType name="Advert">
				<all>
					<!-- Adverts are identified by Id -OR- by Name+Pub+Issue. Both ways are supported for ModifyAdverts and DeleteAdverts. 
					     For CreateAdverts, the Id is unknown by planning system and so it should give Name+Pub+Issue.
					     After creation, the Id returned so that can be used for updates and deletions, which is more efficient and flexible. -->
					<element name="Id" nillable="true" type="xsd:string"/>      <!-- Advert id of editorial system -->
					<element name="AlienId" nillable="true" type="xsd:string"/> <!-- Advert id of advert system -->
					<element name="Publication" nillable="true" type="xsd:string"/>  
					<element name="Issue" nillable="true" type="xsd:string"/>  
					<element name="Section" nillable="true" type="xsd:string"/>  
					<element name="Status" nillable="true" type="xsd:string"/>  
					<element name="Name" nillable="true" type="xsd:string"/>           <!-- Name, doesn't have to be unique -->
					<element name="AdType" nillable="true" type="xsd:string"/>         <!-- Advert type: for future usage -->
					<element name="Comment" nillable="true" type="xsd:string"/>        <!-- Comment/instructions -->
					<element name="Source" nillable="true" type="xsd:string"/>         <!-- Customer -->	
					<element name="ColorSpace" nillable="true" type="xsd:string"/>     <!-- BW, RGB, CMYK, LAB, etc (Only for Image, Advert and Layout objects) -->
					<element name="Description" nillable="true" type="xsd:string"/>    <!-- Indication of advert when there is no preview or PlainContent -->
					<element name="PlainContent" nillable="true" type="xsd:string"/>   <!-- Text of advert -->
					<element name="File" nillable="true" type="tns:Attachment"/>       <!-- Preview or high-res attachment -->
					<element name="HighResFile" nillable="true" type="xsd:string"/>    <!-- Relative file location (to HighResStore feature) of highres advert/image output. Use foreward slashes. -->
					<element name="PageOrder" nillable="true" type="xsd:unsignedInt"/> <!-- [DEPRECATED] Optional: Page on which advert is placed. Use PageSequence instead -->
					<element name="Page" nillable="true" type="tns:Page"/>             <!-- Optional: Page overrules PageOrder -->
					<element name="Placement" nillable="true" type="tns:Placement"/>   <!-- Optional: Position at page the ad is placed on -->
					<element name="PreferredPlacement" nillable="true" type="xsd:string"/> <!-- Description where to place advert: for future usage -->
					<element name="PublishPrio" nillable="true" type="tns:PublishPrioType"/> <!-- Tells if advert must be placed for the issue: for future usage -->
					<element name="Rate" nillable="true" type="xsd:double"/>	          <!-- Amount of money the advert brings: for future usage -->
					<element name="Editions" nillable="true" type="tns:ArrayOfEdition"/> <!-- Optional: list of editions this ad is part of -->
					<element name="Deadline" nillable="true" type="xsd:dateTime"/>		 <!-- Optional: custom deadline value that overrules the status based deadline -->
					<element name="PageSequence" nillable="true" type="xsd:unsignedInt"/> <!-- Relative location within the layout, starts at 1. Obsoletes PageOrder -->
					<element name="Version" nillable="true" type="xsd:string"/>         <!-- [v6.0] object version (major.minor), read only -->  
        </all>
			</complexType>
			<complexType name="ArrayOfAdvert">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Advert[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- LogOn is the first operation that needs to be done. The user must be configured in the editorial system and
			     is used to determine access rights for all other operations. A session is normally ended with LogOff. -->
			<element name="LogOn">
				<complexType>
					<sequence>
						<element name="User" type="xsd:string"/>
						<element name="Password" type="xsd:string"/>	
						<element name="Ticket" nillable="true" type="xsd:string"/>   <!-- To allow silent logon, based on ticket of previous sections. Usage depends on client config. -->
						<element name="Server" nillable="true" type="xsd:string"/>   <!-- Server to logon to as returned from GetServers or empty if not supported -->
						<element name="ClientName" type="xsd:string"/>               <!-- Client machine name -->
						<element name="Domain" nillable="true" type="xsd:string"/>   <!-- OS domain -->
						<element name="ClientAppName" type="xsd:string"/>            <!-- Client Application: InDesign, InCopy, PhotoShop, Web -->
						<element name="ClientAppVersion" nillable="true" type="xsd:string"/>
						<element name="ClientAppSerial" nillable="true" type="xsd:string"/>
					</sequence>
				</complexType>
			</element>
			<element name="LogOnResponse">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
					</sequence>
				</complexType>
			</element>
			
			<element name="LogOff">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
					</sequence>
				</complexType>
			</element>

			<!-- Page level planning, not we use the term layout which contain 1 or more pages -->
			<element name="CreateLayouts">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
						<!--  To create a layout, its object id should not(!) be given. 
						      The object id is generated during creation and returned in reponse. -->
						<element name="Layouts" type="tns:ArrayOfLayoutFromTemplate"/>
					</sequence>
				</complexType>
			</element>
			<element name="CreateLayoutsResponse">
				<complexType>
					<sequence>
						<element name="Layouts" type="tns:ArrayOfLayout"/>
					</sequence>
				</complexType>
			</element>
			<element name="DeleteLayouts">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
						<!--  To delete a layout, its object id can be specified which is most efficient.
						      Alternatively, the publication + isssue + name must be given -->
						<element name="Layouts" type="tns:ArrayOfLayout"/>
					</sequence>
				</complexType>
			</element>
			<element name="ModifyLayouts">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
						<element name="Layouts" type="tns:ArrayOfLayout"/>
					</sequence>
				</complexType>
			</element>
			<element name="ModifyLayoutsResponse">
				<complexType>
					<sequence>
						<element name="Layouts" type="tns:ArrayOfLayout"/>
					</sequence>
				</complexType>
			</element>
			
			<!-- Element level planning, not we use the term layout which contain 1 or more pages -->
			<element name="CreateAdverts">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
						<element name="LayoutId" nillable="true" type="xsd:string"/>   <!-- The best is to identify layout (the ad is placed on) through id, -->
						<element name="LayoutName" nillable="true" type="xsd:string"/> <!-- -OR- alternatively (if you don't keep track of ids), use name to identify layout -->
						<!--  To create an advert, its object id should not(!) be given. 
						      The object id is generated during creation and returned in reponse. -->
						<element name="Adverts" type="tns:ArrayOfAdvert"/>
					</sequence>
				</complexType>
			</element>
			<element name="CreateAdvertsResponse">
				<complexType>
					<sequence>
						<element name="Adverts" type="tns:ArrayOfAdvert"/>
					</sequence>
				</complexType>
			</element>			
			<element name="DeleteAdverts">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
						<element name="LayoutId" nillable="true" type="xsd:string"/>   <!-- The best is to identify layout (the ad is placed on) through id, -->
						<element name="LayoutName" nillable="true" type="xsd:string"/> <!-- -OR- alternatively (if you don't keep track of ids), use name to identify layout -->
						<!--  To delete an advert, its object id can be specified which is most efficient.
						      Alternatively, the publication + isssue + name must be given -->
						<element name="Adverts" type="tns:ArrayOfAdvert"/>
					</sequence>
				</complexType>
			</element>
			<element name="ModifyAdverts">
				<complexType>
					<sequence>
						<element name="Ticket" type="xsd:string"/>
						<element name="LayoutId" nillable="true" type="xsd:string"/>   <!-- The best is to identify layout (the ad is placed on) through id, -->
						<element name="LayoutName" nillable="true" type="xsd:string"/> <!-- -OR- alternatively (if you don't keep track of ids), use name to identify layout -->
						<element name="Adverts" type="tns:ArrayOfAdvert"/>
					</sequence>
				</complexType>
			</element>
			<element name="ModifyAdvertsResponse">
				<complexType>
					<sequence>
						<element name="Adverts" type="tns:ArrayOfAdvert"/>
					</sequence>
				</complexType>
			</element>			
			
		</schema>
	</types>
		
	<!--
		- Logon/LogOff -
		Check user/pass combination and return a ticket for subsequent calls 
	-->
	<message name="LogOn">
		<part name="parameters" element="tns:LogOn"/>
	</message>
	<message name="LogOnResponse">
		<part name="parameters" element="tns:LogOnResponse"/>
	</message>
	<message name="LogOff">
		<part name="parameters" element="tns:LogOff"/>
	</message>
	<message name="LogOffResponse"/>

	<!--
		- CreateLayouts Request - 
		
		Creates new layouts (InDesign file) based on a templates
	-->
	<message name="CreateLayouts">
	    <part name="parameters" element="tns:CreateLayouts"/>
	</message>
	<message name="CreateLayoutsResponse">
		<part name="parameters" element="tns:CreateLayoutsResponse"/>
	</message>
		
	<!--
		- ModifyLayouts Request - 
		
		Modify existing layouts to change Pub/Issue/Section or start page num
	-->
	<message name="ModifyLayouts">
	    <part name="parameters" element="tns:ModifyLayouts"/>
	</message>
	<message name="ModifyLayoutsResponse">
		<part name="parameters" element="tns:ModifyLayoutsResponse"/>
	</message>
		
	<!--
		- DeleteLayouts Request - 
		
		Delete specified layouts
	-->
	<message name="DeleteLayouts">
	    <part name="parameters" element="tns:DeleteLayouts"/>
	</message>
	<message name="DeleteLayoutsResponse"/>

	<!--
		- CreateAdverts Request - 
		
		Creates new adverts
	-->
	<message name="CreateAdverts">
	    <part name="parameters" element="tns:CreateAdverts"/>
	</message>
	<message name="CreateAdvertsResponse">
		<part name="parameters" element="tns:CreateAdvertsResponse"/>
	</message>
		
	<!--
		- ModifyAdverts Request - 
		
		Modify existing adverts
	-->
	<message name="ModifyAdverts">
	    <part name="parameters" element="tns:ModifyAdverts"/>
	</message>
	<message name="ModifyAdvertsResponse">
		<part name="parameters" element="tns:ModifyAdvertsResponse"/>
	</message>
		
	<!--
		- DeleteAdverts Request - 
		
		Delete specified adverts
	-->
	<message name="DeleteAdverts">
	    <part name="parameters" element="tns:DeleteAdverts"/>
	</message>
	<message name="DeleteAdvertsResponse"/>

	
	<portType name="SmartEditorialPlanPort">
		<operation name="LogOn">
			<input message="tns:LogOn"/>
			<output message="tns:LogOnResponse"/>
		</operation>
		<operation name="LogOff">
			<input message="tns:LogOff"/>
			<output message="tns:LogOffResponse"/>
		</operation>
		<operation name="CreateLayouts">
			<input message="tns:CreateLayouts" />
			<output message="tns:CreateLayoutsResponse" />
		</operation>
		<operation name="ModifyLayouts">
			<input message="tns:ModifyLayouts" />
			<output message="tns:ModifyLayoutsResponse" />
		</operation>
		<operation name="DeleteLayouts">
			<input message="tns:DeleteLayouts" />
			<output message="tns:DeleteLayoutsResponse" />
		</operation>
		<operation name="CreateAdverts">
			<input message="tns:CreateAdverts" />
			<output message="tns:CreateAdvertsResponse" />
		</operation>
		<operation name="ModifyAdverts">
			<input message="tns:ModifyAdverts" />
			<output message="tns:ModifyAdvertsResponse" />
		</operation>
		<operation name="DeleteAdverts">
			<input message="tns:DeleteAdverts" />
			<output message="tns:DeleteAdvertsResponse" />
		</operation>
	</portType>


	<binding name="SmartEditorialPlanBinding" type="tns:SmartEditorialPlanPort">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="LogOn">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#LogOn"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="LogOff">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#LogOff"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateLayouts">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#CreateLayouts" />
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="ModifyLayouts">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#ModifyLayouts" />
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="DeleteLayouts">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#DeleteLayouts" />
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateAdverts">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#CreateAdverts" />
			<input>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="ModifyAdverts">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#ModifyAdverts" />
			<input>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="DeleteAdverts">
			<soap:operation soapAction="urn:SmartEditorialPlan#editorialplan#DeleteAdverts" />
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
	</binding>


	<service name="SmartEditorialPlanService">
		<documentation/>
		<port name="SmartEditorialPlanPort" binding="tns:SmartEditorialPlanBinding">
			<soap:address location="http://127.0.0.1/SCEnterprise/editorialplan.php" />
		</port>
	</service>
	
</definitions>
