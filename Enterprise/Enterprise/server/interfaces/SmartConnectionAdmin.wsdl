<?xml version="1.0"?>
<!--
	Enterprise Admin WSDL

	Administrative SOAP interface implemented by Enterprise Server
	and called by administrator applications.

	Important changes made for v7.0:
	- Support for Publication Channels.
	- All ArrayOf... definitions are now based on "soap-enc:Array" type.
	- Id elements are changed from "xsd:string" into "xsd:integer". Negative values indicate special meaning.
	- Dates are changed from "xsd:datetime" into "tns:dateTimeOrEmpty". Nil means 'unknown' and empty means 'not set'.
	- All Section related requests/responses: IssueId can not be empty or nil; use zero when OverrulePublication is disabled.
	- All Status related requests/responses: IssueId and SectionId can not be empty or nil; use zero when OverrulePublication is disabled.

-->

<wsdl:definitions
		targetNamespace="urn:SmartConnectionAdmin"
		xmlns:tns="urn:SmartConnectionAdmin"
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
		xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/">


	<!-- >>>>>>>>>>>>>>>>>>>>>>>>>>>> TYPES  <<<<<<<<<<<<<<<<<<<<<<<<<<< -->

	<wsdl:types xmlns="http://schemas.xmlsoap.org/wsdl/">
		<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:SmartConnectionAdmin">

			<!--************* SHARED WITH WORKFLOW WSDL - COMPLEX TYPES *****************-->

			<!-- Any sequence of Unicode (UTF-8) characters. -->
			<xsd:simpleType name="String">
				<xsd:restriction base="string">
				</xsd:restriction>
			</xsd:simpleType>

			<!-- The type of workflow object. -->
			<xsd:simpleType name="ObjectType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Article"/>
					<xsd:enumeration value="ArticleTemplate"/>
					<xsd:enumeration value="Layout"/>
					<xsd:enumeration value="LayoutTemplate"/>
					<xsd:enumeration value="Image"/>
					<xsd:enumeration value="Advert"/>
					<xsd:enumeration value="AdvertTemplate"/>
					<xsd:enumeration value="Plan"/>
					<xsd:enumeration value="Audio"/>   <!-- v5.0 feature -->
					<xsd:enumeration value="Video"/>   <!-- v5.0 feature -->
					<xsd:enumeration value="Library"/> <!-- v5.0 feature -->
					<xsd:enumeration value="Dossier"/> <!-- v5.0 feature -->
					<xsd:enumeration value="DossierTemplate"/> <!-- v6.1 feature -->
					<xsd:enumeration value="LayoutModule"/> <!-- v6.0 feature -->
					<xsd:enumeration value="LayoutModuleTemplate"/> <!-- v6.0 feature -->
					<xsd:enumeration value="Task"/> <!-- v6.0 feature -->
					<xsd:enumeration value="Hyperlink"/> <!-- v6.0 feature -->
					<xsd:enumeration value="Presentation"/> <!-- v8.0 feature -->
					<xsd:enumeration value="Archive"/>      <!-- v8.0 feature -->
					<xsd:enumeration value="Spreadsheet"/> <!-- v8.2 feature -->
					<xsd:enumeration value="Other"/>   <!-- For future usage -->
					<xsd:enumeration value="PublishForm"/> <!-- v9.0 feature -->
					<xsd:enumeration value="PublishFormTemplate"/> <!-- v9.0 feature -->
				</xsd:restriction>
			</xsd:simpleType>

			<!-- RGB color definition in hexadecimal format (6 digits). For example: A3BF65 -->
			<xsd:simpleType name="Color">
				<xsd:restriction base="xsd:string">
					<xsd:pattern value="unsignedByte-unsignedByte-unsignedByte" />
				</xsd:restriction>
			</xsd:simpleType>

			<!-- Publication Channel Type. -->
			<xsd:simpleType name="PubChannelType">
				<xsd:restriction base="string">
					<xsd:enumeration value="print"/>
					<xsd:enumeration value="web"/>
					<xsd:enumeration value="sms"/>
					<xsd:enumeration value="dps"/>      <!-- v7.5 Digital Publishing System -->
					<xsd:enumeration value="dps2"/>   <!-- v9.6 Adobe DPS (2015) integration -->
					<xsd:enumeration value="other"/>
				</xsd:restriction>
			</xsd:simpleType>

			<!-- Empty-string definition, used for empty/undefined Deadlines. -->
			<xsd:simpleType name="emptyString">
				<xsd:restriction base="xsd:string">
					<xsd:length value="0"/>
				</xsd:restriction>
			</xsd:simpleType>

			<!-- Date-time definition, used for Deadlines. When no date-time is defined, an empty string is allowed. -->
			<xsd:simpleType name="dateTimeOrEmpty">
				<xsd:union memberTypes="xsd:dateTime tns:emptyString"/>
			</xsd:simpleType>

			<!--************* COMMON - TYPES *****************-->

			<!--
				Used for services that can return all kind of data collections. This can be implicitly requested.
				The more data requested, the more expensive the service becomes (that needs to resolve the data).
			-->
			<xsd:simpleType name="Mode">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="GetPublications"/> <!-- request for related publications (if any) -->
					<xsd:enumeration value="GetPubChannels"/>  <!-- request for related pubchannels (if any) -->
					<xsd:enumeration value="GetIssues"/>       <!-- request for related issues (if any) -->
					<xsd:enumeration value="GetEditions"/>     <!-- request for related editions (if any) -->
					<xsd:enumeration value="GetSections"/>     <!-- request for related sections (if any) -->
					<xsd:enumeration value="GetStatuses"/>     <!-- request for related statuses (if any) -->
					<xsd:enumeration value="GetUsers"/>        <!-- request for related users (if any) -->
					<xsd:enumeration value="GetUserGroups"/>   <!-- request for related user groups (if any) -->
					<xsd:enumeration value="GetProfileFeatures"/> <!-- request for related profile features (if any) -->
					<xsd:enumeration value="GetObjectInfos"/>  <!-- request for related objects (if any) -->
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="ArrayOfMode">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Mode[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- The id of a specific entity stored at server. -->
			<xsd:simpleType name="Id">
				<xsd:restriction base="xsd:integer"/>
			</xsd:simpleType>
			<xsd:complexType name="ArrayOfId">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Id[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Id-name pair to identify an entity stored at server. -->
			<xsd:complexType name="IdName">
				<xsd:all>
					<xsd:element name="Id"   type="xsd:integer"/>
					<xsd:element name="Name" type="xsd:string" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfIdName">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:IdName[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Each Workflow Status belongs to a Workflow Phase -->
			<xsd:simpleType name="StatusPhase">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Selection"/>
					<xsd:enumeration value="Production"/>
					<xsd:enumeration value="Completed"/>
					<xsd:enumeration value="Archived"/>
				</xsd:restriction>
			</xsd:simpleType>

			<!-- v10.2: Describes simple object properties. -->
			<complexType name="ObjectInfo">
				<all>
					<element name="ID" type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
					<element name="Type" type="tns:ObjectType"/>
					<element name="Format" type="xsd:string" nillable="true"/> <!-- Object's native file format. -->
				</all>
			</complexType>

			<complexType name="ArrayOfObjectInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>


			<!--************* LOGON/LOGOFF - COMPLEX TYPES *****************-->

			<!--
				The LogOn is one of the first services to call by clients. The user must be registered
				and active to be able to logon. The user account is used to determine access rights
				for all other operations. Through the admin WSDL, the user typically has admin rights
				but other users are allowed too, since tickets are interchangable between all service
				interfaces. A session is normally ended with LogOff.
			-->
			<xsd:element name="LogOnRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="AdminUser"        type="xsd:string"/>
						<xsd:element name="Password"         type="xsd:string"/>
						<xsd:element name="Ticket"           type="xsd:string" nillable="true"/>  <!-- To allow silent logon, based on ticket of previous sections. Usage depends on client config. -->
						<xsd:element name="Server"           type="xsd:string" nillable="true"/>  <!-- Server to logon to as returned from GetServers ??? or empty if not supported -->
						<xsd:element name="ClientName"       type="xsd:string"/>                  <!-- Client machine name -->
						<xsd:element name="Domain"           type="xsd:string" nillable="true"/>  <!-- OS domain -->
						<xsd:element name="ClientAppName"    type="xsd:string"/>                  <!-- Client Application: InDesign, InCopy, PhotoShop, Web -->
						<xsd:element name="ClientAppVersion" type="xsd:string" nillable="true"/>
						<xsd:element name="ClientAppSerial"  type="xsd:string" nillable="true"/>
						<xsd:element name="ClientAppCode"    type="xsd:string" nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="LogOnResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"           type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="LogOffRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"			 type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--************* USER - COMPLEX TYPES *****************-->

			<!-- User definition with the complete set of properties. -->
			<!--
				Valid TrackChangesColor list:
				'FFE533',	// 56 Amber
				'00B5D4',	// 19 Aqua
				'000000',	// 01 Black
				'0000FF',	// 27 Blue
				'DAD8FB',	// 30 Blueberry
				'990000',	// 43 Brick Red
				'993300',	// 45 Brown
				'990033',	// 44 Burgundy
				'FDFFC7',	// 03 Canary
				'F7E7E7',	// 41 Carnation
				'ABA3B5',	// 61 Charcoal
				'C0F1FF',	// 20 Cirrus
				'F7F4C7',	// 57 Cornstarch
				'82CFC2',	// 17 Cute Teal
				'00FFFF',	// 18 Cyan
				'000087',	// 28 Dark Blue
				'005400',	// 14 Dark Green
				'8F0091',	// 32 Eggplant
				'A9FF00',	// 05 Electrolyte
				'E1F8FF',	// 21 Ether
				'F7596B',	// 40 Fiesta
				'00B305',	// 09 Forest
				'FF00DD',	// 36 Fuchsia
				'FF9900',	// 53 Gold
				'CC00FF',	// 34 Grape
				'595959',	// 63 Graphite
				'99CC00',	// 10 Grass Green
				'808080',	// 62 Gray
				'4FFF4F',	// 07 Green
				'7ABAD9',	// 23 Grid Blue
				'9CFF9C',	// 8 Grid Green
				'FFB56B',	// 54 Grid Orange
				'353535',	// 64 Gunmetal
				'EFDBF7',	// 38 Iris
				'00FFC3',	// 16 Jade
				'9999FF',	// 24 Lavender
				'D2FF00',	// 04 Lemon
				'E7F7DE',	// 11 Lichen
				'4F99FF',	// 22 Light Blue
				'BABABA',	// 59 Light Gray
				'8CA66B',	// 12 Light Olive
				'89FF00',	// 06 Lime
				'CF82B5',	// 37 Lipstick
				'FF4FFF',	// 35 Magenta
				'131367',	// 29 Midnight
				'661616',	// 46 Mocha
				'D7C101',	// 55 Mustard
				'996600',	// 47 Ochre
				'666600',	// 13 Olive
				'FF6600',	// 52 Orange
				'FF9999',	// 51 Peach
				'FF99CC',	// 39 Pink
				'E9E9E9',	// 58 Powder
				'660066',	// 33 Purple
				'FF0000',	// 42 Red
				'5952A2',	// 25 Slate
				'D7D0CA',	// 60 Smoke
				'CFCF82',	// 49 Sulphur
				'CC9966',	// 48 Tan
				'009999',	// 15 Teal
				'026484',	// 26 Ultramarine
				'9933FF',	// 31 Violet
				'EBD9AD',	// 50 Wheat
				'FFFFFF',	// 00 White
				'FFFF4F' 	// 02 Yellow
			-->
			<xsd:complexType name="User">
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"                type="xsd:integer"  nillable="true"/>  <!-- unique db id -->
					<xsd:element name="Name"              type="xsd:string"   nillable="true"/>  <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="FullName"          type="xsd:string"   nillable="true"/>  <!-- first name and family name -->
					<xsd:element name="Deactivated"       type="xsd:boolean"  nillable="true"/>  <!-- user account is not active -->
					<xsd:element name="Password"          type="xsd:string"   nillable="true"/>  <!-- plain user password. -->
					<xsd:element name="FixedPassword"     type="xsd:boolean"  nillable="true"/>  <!-- user can not change password -->
					<xsd:element name="EmailAddress"      type="xsd:string"   nillable="true"/>  <!-- email address (e.g. user@company.com) -->
					<xsd:element name="EmailUser"         type="xsd:boolean"  nillable="true"/>  <!-- notify user -->
					<xsd:element name="EmailGroup"        type="xsd:boolean"  nillable="true"/>  <!-- notify user's group -->
					<xsd:element name="PasswordExpired"   type="xsd:int"      nillable="true"/>  <!-- password expired days -->
					<xsd:element name="ValidFrom"         type="tns:dateTimeOrEmpty" nillable="true"/>  <!-- valid from date -->
					<xsd:element name="ValidTill"         type="tns:dateTimeOrEmpty" nillable="true"/>  <!-- valid till date -->
					<xsd:element name="Language"          type="xsd:string"   nillable="true"/>  <!-- GUI language, e.g: enUS, deDE, frFR, itIT, jaJP, ptBR, esES, nlNL -->
					<xsd:element name="TrackChangesColor" type="tns:Color"  nillable="true"/>    <!-- User's track changes color in RGB format (without # prefix) -->
					<xsd:element name="Organization"      type="xsd:string"   nillable="true"/>  <!-- Organization user works for -->
					<xsd:element name="Location"          type="xsd:string"   nillable="true"/>  <!-- Place user lives -->
					<xsd:element name="EncryptedPassword" type="xsd:string"   nillable="true"/>  <!-- v8.0: Encrypted password used when importing a user -->
					<!-- properties (read only) -->
					<xsd:element name="UserGroups"        type="tns:ArrayOfUserGroup" nillable="true"/>  <!-- groups user is member of -->
                    <xsd:element name="ImportOnLogon"     type="xsd:boolean"  nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.4: Import information from LDAP for users who log on and are only partially known in Enterprise Server. After logon this flag is unset. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfUser">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:User[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Register new users at the server. -->
			<xsd:element name="CreateUsersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="Users"         type="tns:ArrayOfUser"/>                   <!-- list of users to create -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateUsersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Users"         type="tns:ArrayOfUser"/>                   <!-- list of created users -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve registered users from the server. -->
			<xsd:element name="GetUsersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="GroupId"       type="xsd:integer" nillable="true"/>       <!-- unique group identification (empty to receive system wide) -->
						<xsd:element name="UserIds"       type="tns:ArrayOfId" nillable="true"/>     <!-- list of wanted users (empty to receive group or system wide) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetUsersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Users"         type="tns:ArrayOfUser"/>                   <!-- list of requested users -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update registered users at the server. -->
			<xsd:element name="ModifyUsersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="Users"         type="tns:ArrayOfUser"/>                   <!-- list of users to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyUsersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Users"         type="tns:ArrayOfUser"/>                   <!-- list of updated users -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Copy registered users at the server. -->
			<xsd:element name="CopyUsersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="SourceUserId"  type="xsd:integer"/>                       <!-- source user to copy -->
						<xsd:element name="TargetUsers"   type="tns:ArrayOfUser"/>                   <!-- list of target users (initial properties) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CopyUsersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Users"         type="tns:ArrayOfUser"/>                   <!-- list of copied users -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete registered users from the server. -->
			<xsd:element name="DeleteUsersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="UserIds"       type="tns:ArrayOfId"/>                     <!-- list of users to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteUsersResponse"/>

			<!--************* USER GROUP - COMPLEX TYPES *****************-->

			<!-- User group definition with the complete set of properties. -->
			<xsd:complexType name="UserGroup">
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"              type="xsd:integer"     nillable="true"/>     <!-- unique db id -->
					<xsd:element name="Name"            type="xsd:string"      nillable="true"/>     <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="Description"     type="xsd:string"      nillable="true"/>     <!-- explanation of group -->
					<xsd:element name="Admin"           type="xsd:boolean"     nillable="true"/>     <!-- group with admin access rights -->
					<xsd:element name="Routing"         type="xsd:boolean"     nillable="true"/>     <!-- objects can be routed to groups -->
					<xsd:element name="ExternalId"      type="xsd:string"      nillable="true"/>     <!-- reference to external system, such as LDAP -->
					<!-- relations (read only) -->
					<xsd:element name="Users"           type="tns:ArrayOfUser" nillable="true"/>     <!-- user members of this group -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfUserGroup">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:UserGroup[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Register new user groups at the server. -->
			<xsd:element name="CreateUserGroupsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="UserGroups"    type="tns:ArrayOfUserGroup"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateUserGroupsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="UserGroups"    type="tns:ArrayOfUserGroup"/>              <!-- list of created user groups -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve user groups from the server. -->
			<xsd:element name="GetUserGroupsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="UserId"        type="xsd:integer"   nillable="true"/>     <!-- unique user identification (empty to receive system wide) -->
						<xsd:element name="GroupIds"      type="tns:ArrayOfId" nillable="true"/>     <!-- list of wanted user groups (empty to receive all for user or system wide) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetUserGroupsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="UserGroups"        type="tns:ArrayOfUserGroup"/>          <!-- list of requested (or all) user groups -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update user groups at the server. -->
			<xsd:element name="ModifyUserGroupsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="UserGroups"    type="tns:ArrayOfUserGroup"/>              <!-- list of user groups to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyUserGroupsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="UserGroups"    type="tns:ArrayOfUserGroup"/>              <!-- list of updated user groups -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Copy user groups at the server. -->
			<xsd:element name="CopyUserGroupsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="SourceGroupId" type="xsd:integer"/>                       <!-- source user group to copy -->
						<xsd:element name="TargetGroups"  type="tns:ArrayOfUserGroup"/>              <!-- list of target user groups (initial properties) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CopyUserGroupsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="UserGroups"    type="tns:ArrayOfUserGroup"/>              <!-- list of copied user groups -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete user groups from the server. -->
			<xsd:element name="DeleteUserGroupsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="GroupIds"      type="tns:ArrayOfId"/>                     <!-- list of user groups to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteUserGroupsResponse"/>

			<!--************* MEMBERSHIP - COMPLEX TYPES *****************-->

			<!-- Add users to an user group. (Create membership.) -->
			<xsd:element name="AddUsersToGroupRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="UserIds"       type="tns:ArrayOfId"/>
						<xsd:element name="GroupId"       type="xsd:integer"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Remove users from an user group. (Delete membership.) -->
			<xsd:element name="RemoveUsersFromGroupRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="UserIds"       type="tns:ArrayOfId"/>
						<xsd:element name="GroupId"       type="xsd:integer"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Add an user to user groups. (Create memberships.) -->
			<xsd:element name="AddGroupsToUserRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="GroupIds"      type="tns:ArrayOfId"/>
						<xsd:element name="UserId"        type="xsd:integer"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Remove an user from user groups. (Delete memberships.) -->
			<xsd:element name="RemoveGroupsFromUserRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="GroupIds"      type="tns:ArrayOfId"/>
						<xsd:element name="UserId"        type="xsd:integer"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--************* PUBLICATION - COMPLEX TYPES *****************-->

			<!-- Brand (=publication) definition with the complete set of properties. -->
			<xsd:complexType name="Publication">
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"              type="xsd:integer"        nillable="true"/>  <!-- unique db id -->
					<xsd:element name="Name"            type="xsd:string"         nillable="true"/>  <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="Description"     type="xsd:string"         nillable="true"/>  <!-- comments about publication -->
					<xsd:element name="SortOrder"       type="xsd:unsignedInt"    nillable="true"/>  <!-- sort index for publications -->
					<xsd:element name="EmailNotify"     type="xsd:boolean"        nillable="true"/>  <!-- enable email nofifications -->
					<xsd:element name="ReversedRead"    type="xsd:boolean"        nillable="true"/>  <!-- reversed reading order of pages -->
					<xsd:element name="AutoPurge"		type="xsd:unsignedInt"    nillable="true"/>	 <!-- Introduced in v8.0. 'threshold'(in days) of which deletedObjects should be purged by auto purge when the deleted object is older than this threshold. Default is 0. -->
					<xsd:element name="DefaultChannelId" type="xsd:integer"       nillable="true"/>  <!-- pub channel to be chosen when none specified -->
					<xsd:element name="ExtraMetaData"   type="tns:ArrayOfExtraMetaData" nillable="true"/>   <!-- v9.0: Custom properties introduced by system integrations. -->
					<!-- relations (read only) -->
					<xsd:element name="PubChannels"     type="tns:ArrayOfIdName"  nillable="true"/>  <!-- pubchannels (references) defined for pub -->
					<xsd:element name="Issues"          type="tns:ArrayOfIdName"  nillable="true"/>  <!-- issues (references) defined for pub -->
					<xsd:element name="Editions"        type="tns:ArrayOfIdName"  nillable="true"/>  <!-- editions (references) defined for pub -->
					<xsd:element name="Sections"        type="tns:ArrayOfIdName"  nillable="true"/>  <!-- sections (references) defined for pub (overruling issues excluded) -->
					<xsd:element name="Statuses"        type="tns:ArrayOfIdName"  nillable="true"/>  <!-- statusses (references) defined for pub (overruling issues excluded) -->
					<xsd:element name="UserGroups"      type="tns:ArrayOfIdName"  nillable="true"/>  <!-- user groups (references) with access to pub -->
					<xsd:element name="AdminGroups"     type="tns:ArrayOfIdName"  nillable="true"/>  <!-- publication administrators (references) -->
					<xsd:element name="Workflows"       type="tns:ArrayOfIdName"  nillable="true"/>  <!-- workflow rules (references) defined for pub (overruling issues excluded) -->
					<xsd:element name="Routings"        type="tns:ArrayOfIdName"  nillable="true"/>  <!-- routing rules (references) defined for pub (overruling issues excluded) -->
					<xsd:element name="CalculateDeadlines"    type="xsd:boolean"  nillable="true"/>  <!-- v9.2: Enable/Disable deadline(relative) calculation for the object. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfPublication">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Publication[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Create a new brand (=publication) configuration at server. -->
			<xsd:element name="CreatePublicationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                     <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                <!-- asks for relations -->
						<xsd:element name="Publications"  type="tns:ArrayOfPublication"/>         <!-- list of publications to create -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreatePublicationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Publications"  type="tns:ArrayOfPublication"/>      	 <!-- list of created publications -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve a brand (=publication) configuration from server. -->
			<xsd:element name="GetPublicationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"         type="xsd:string"/>                       <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"   type="tns:ArrayOfMode"/>                  <!-- asks for relations -->
						<xsd:element name="PublicationIds" type="tns:ArrayOfId"   nillable="true"/>  <!-- list of wanted publications (empty to receive all) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetPublicationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Publications"  type="tns:ArrayOfPublication"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update a brand (=publication) configuration at server. -->
			<xsd:element name="ModifyPublicationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"          type="xsd:string"/>                      <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"    type="tns:ArrayOfMode"/>                 <!-- asks for relations -->
						<xsd:element name="Publications"    type="tns:ArrayOfPublication"/>          <!-- list of publications to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyPublicationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Publications"    type="tns:ArrayOfPublication"/>          <!-- list of updated publications -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element >

			<!-- Copy a brand (=publication) configuration at server. -->
			<xsd:element name="CopyPublicationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"          type="xsd:string"/>                      <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"    type="tns:ArrayOfMode"/>                 <!-- asks for relations -->
						<xsd:element name="DuplicateIssues" type="xsd:boolean"/>                     <!-- copy all issues of source publication -->
						<xsd:element name="SourcePubId"     type="xsd:integer"/>                     <!-- source publication -->
						<xsd:element name="TargetPubs"      type="tns:ArrayOfPublication"/>          <!-- list of target publications (initial properties) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CopyPublicationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Publications"    type="tns:ArrayOfPublication"/>          <!-- list of copied publications -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete a brand (=publication) configuration from server. -->
			<xsd:element name="DeletePublicationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"         type="xsd:string"/>                       <!-- admin user's session ticket -->
						<xsd:element name="PublicationIds" type="tns:ArrayOfId"/>                    <!-- list of publications to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeletePublicationsResponse"/>

			<!--************* PUBCHANNEL - COMPLEX TYPES *****************-->

			<!-- Publication Channel definition with the complete set of properties. -->
			<xsd:complexType name="PubChannel">
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"                type="xsd:integer"        nillable="true"/>  <!-- unique db id -->
					<xsd:element name="Name"              type="xsd:string"         nillable="true"/>  <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="Type"              type="tns:PubChannelType" nillable="true"/>
					<xsd:element name="Description"       type="xsd:string"         nillable="true"/>
					<xsd:element name="SortOrder"         type="xsd:unsignedInt"    nillable="true"/>   <!-- v10.2 sort index for pubchannel -->
					<xsd:element name="PublishSystem"     type="xsd:string"         nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.0: Type of the publishing system. Use to identify the publishing connector. -->
					<xsd:element name="PublishSystemId"   type="xsd:string"         nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.1: Unique id of the publishing system. Use to bind the publishing storage. -->
					<xsd:element name="CurrentIssueId"    type="xsd:integer"        nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.0  -->
					<xsd:element name="SuggestionProvider" type="xsd:string"        nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.1: Internal plugin name that ships a Suggestion connector -->
					<xsd:element name="ExtraMetaData"     type="tns:ArrayOfExtraMetaData" nillable="true" minOccurs="0" maxOccurs="1"/>   <!-- v9.0: Custom properties introduced by system integrations. -->
					<!-- relations (read only) -->
					<xsd:element name="DirectPublish"     type="xsd:boolean"        nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.0 -->
					<xsd:element name="SupportsForms"     type="xsd:boolean"        nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.0: Tells whether the channel supports publish form feature. -->
					<xsd:element name="Issues"            type="tns:ArrayOfIdName"  nillable="true"/>  <!-- issues (references) defined for pubchannel -->
					<xsd:element name="Editions"          type="tns:ArrayOfIdName"  nillable="true"/>  <!-- editions (references) defined for pubchannel -->
					<xsd:element name="SupportsCropping"  type="xsd:boolean"        nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v10.1: Tells whether the channel supports image cropping feature. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfPubChannel">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PubChannel[]"/> <!-- resolved publication identification -->
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Create a new publication channel configuration at server. -->
			<xsd:element name="CreatePubChannelsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannels"   type="tns:ArrayOfPubChannel"/>             <!-- list of new pubchannels to create for pub -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreatePubChannelsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="PubChannels"   type="tns:ArrayOfPubChannel"/>             <!-- list of created pubchannels -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve a publication channel configuration from server. -->
			<xsd:element name="GetPubChannelsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelIds" type="tns:ArrayOfId"     nillable="true"/> <!-- list of wanted pubchannels (nil for all) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetPubChannelsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannels"   type="tns:ArrayOfPubChannel"/>             <!-- list requested (or all) pubchannels of pub -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update a publication channel configuration at server. -->
			<xsd:element name="ModifyPubChannelsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannels"   type="tns:ArrayOfPubChannel"/>             <!-- list of pubchannels to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyPubChannelsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="PubChannels"   type="tns:ArrayOfPubChannel"/>                     <!-- list of updated pubchannels -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete a publication channel configuration from server. -->
			<xsd:element name="DeletePubChannelsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelIds" type="tns:ArrayOfId"/>                     <!-- list of pubchannels to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeletePubChannelsResponse"/>

			<!--************* ISSUE - COMPLEX TYPES *****************-->

			<!-- Issue definition with the complete set of properties. -->
			<xsd:complexType name="Issue">            <!-- all issue properties (read/write) -->
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"              type="xsd:integer"       nillable="true"/>   <!-- unique db id -->
					<xsd:element name="Name"            type="xsd:string"        nillable="true"/>   <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="Description"     type="xsd:string"        nillable="true"/>   <!-- comments about issue -->
					<xsd:element name="SortOrder"       type="xsd:unsignedInt"   nillable="true"/>   <!-- sort index for issue -->
					<xsd:element name="EmailNotify"     type="xsd:boolean"       nillable="true"/>   <!-- enable email nofifications -->
					<xsd:element name="ReversedRead"    type="xsd:boolean"       nillable="true"/>   <!-- reversed reading order of pages -->
					<xsd:element name="OverrulePublication" type="xsd:boolean"   nillable="true"/>   <!-- issue definitions must be used (instead of publication definitions) -->
					<xsd:element name="Deadline"        type="tns:dateTimeOrEmpty" nillable="true"/> <!-- publication deadline for issue -->
					<xsd:element name="ExpectedPages"   type="xsd:unsignedInt"   nillable="true"/>   <!-- number of planned pages for issue -->
					<xsd:element name="Subject"         type="xsd:string"        nillable="true"/>   <!-- subject description of the issue -->
					<xsd:element name="Activated"       type="xsd:boolean"       nillable="true"/>   <!-- issue currently in production -->
					<xsd:element name="PublicationDate" type="tns:dateTimeOrEmpty" nillable="true"/> <!-- planned day to publish issue -->
					<xsd:element name="ExtraMetaData"   type="tns:ArrayOfExtraMetaData" nillable="true"/>   <!-- Custom properties introduced by system integrations. -->
					<!-- relations (read only) -->
					<xsd:element name="Editions"        type="tns:ArrayOfIdName" nillable="true"/>   <!-- editions (references) defined for pub -->
					<xsd:element name="Sections"        type="tns:ArrayOfIdName" nillable="true"/>   <!-- sections (references) defined for issue (only when OverrulePublication enabled) -->
					<xsd:element name="Statuses"        type="tns:ArrayOfIdName" nillable="true"/>   <!-- statusses (references) defined for issue (only when OverrulePublication enabled) -->
					<xsd:element name="UserGroups"      type="tns:ArrayOfIdName" nillable="true"/>   <!-- user groups (references) with access to issue (only when OverrulePublication enabled) -->
					<xsd:element name="Workflows"       type="tns:ArrayOfIdName" nillable="true"/>   <!-- workflow rules (references) defined for issue (only when OverrulePublication enabled) -->
					<xsd:element name="Routings"        type="tns:ArrayOfIdName" nillable="true"/>   <!-- routing rules (references) defined for issue (only when OverrulePublication enabled) -->
					<xsd:element name="CalculateDeadlines"    type="xsd:boolean" nillable="true"/>  <!-- v9.2: Enable/Disable deadline(relative) calculation for the object. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfIssue">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Issue[]"/> <!-- resolved publication identification -->
					</restriction>
				</complexContent>
			</xsd:complexType>

			<complexType name="ArrayOfString">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:String[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<xsd:complexType name="ExtraMetaData">
				<xsd:all>
					<xsd:element name="Property" type="xsd:string"/>
					<xsd:element name="Values" type="tns:ArrayOfString"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="ArrayOfExtraMetaData"> <!-- Extra meta data on top of standard set. -->
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ExtraMetaData[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Create a new issue configuration at server. -->
			<xsd:element name="CreateIssuesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer" nillable="true"/>       <!-- unique pubchannel identification -->
						<xsd:element name="Issues"        type="tns:ArrayOfIssue"/>                  <!-- list of new issues to create for pub -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateIssuesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"/>                       <!-- resolved pubchannel identification -->
						<xsd:element name="Issues"        type="tns:ArrayOfIssue"/>                  <!-- list of created issues -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve an issue configuration from server. -->
			<xsd:element name="GetIssuesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"     nillable="true"/>   <!-- unique pubchannel identification -->
						<xsd:element name="IssueIds"      type="tns:ArrayOfId"   nillable="true"/>   <!-- list of wanted issues (empty to receive all) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetIssuesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"/>                       <!-- unique pubchannel identification -->
						<xsd:element name="Issues"        type="tns:ArrayOfIssue"/>                  <!-- list requested (or all) issues of pub -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update an issue configuration at server. -->
			<xsd:element name="ModifyIssuesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"      nillable="true"/>  <!-- unique pubchannel identification -->
						<xsd:element name="Issues"        type="tns:ArrayOfIssue"/>                  <!-- list of issues to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyIssuesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"/>                       <!-- resolved pubchannel identification -->
						<xsd:element name="Issues"        type="tns:ArrayOfIssue"/>                  <!-- list of updated issues -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Copy an issue configuration at server. -->
			<xsd:element name="CopyIssuesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- source issue -->
						<xsd:element name="Issues"        type="tns:ArrayOfIssue"/>                  <!-- list of target issues (initial properties) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element  name="CopyIssuesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Issues"        type="tns:ArrayOfIssue"/>                  <!-- list of copied publications -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete an issue configuration from server. -->
			<xsd:element name="DeleteIssuesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="IssueIds"      type="tns:ArrayOfId"/>                     <!-- list of issues to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteIssuesResponse"/>

			<!--************* EDITION - COMPLEX TYPES *****************-->

			<!-- Edition definition with the complete set of properties. -->
			<xsd:complexType name="Edition">
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"                type="xsd:integer"     nillable="true"/>   <!-- unique db id -->
					<xsd:element name="Name"              type="xsd:string"      nillable="true"/>   <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="Description"       type="xsd:string"      nillable="true"/>   <!-- comments about edition -->
					<xsd:element name="SortOrder"         type="xsd:integer"     nillable="true"/>   <!-- sort index for editions -->
					<xsd:element name="DeadlineRelative"  type="xsd:int"         nillable="true"/>   <!-- Deadline Relative for Edition -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfEdition">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Edition[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Create a new edition configuration at server. -->
			<xsd:element name="CreateEditionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"     nillable="true"/>   <!-- unique pubchannel identification -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- unique issue identification (empty when OverrulePublication disabled) -->
						<xsd:element name="Editions"      type="tns:ArrayOfEdition"/>                <!-- list of new editions to create for pub -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateEditionsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"/>                       <!-- resolved pubchannel identification -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- resolved issue identification (empty when OverrulePublication disabled) -->
						<xsd:element name="Editions"      type="tns:ArrayOfEdition"/>                <!-- list of created editions -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve an edition configuration from server. -->
			<xsd:element name="GetEditionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"     nillable="true"/>   <!-- unique pubchannel identification -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- unique issue identification (empty when OverrulePublication disabled) -->
						<xsd:element name="EditionIds"    type="tns:ArrayOfId"   nillable="true"/>   <!-- list of wanted editions (empty to receive all) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetEditionsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"/>                       <!-- unique pubchannel identification -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- resolved issue identification (empty when OverrulePublication disabled) -->
						<xsd:element name="Editions"      type="tns:ArrayOfEdition"/>                <!-- list of requested (or all) editions of pub/iss -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update an edition configuration at server. -->
			<xsd:element name="ModifyEditionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"     nillable="true"/>   <!-- unique pubchannel identification -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- unique issue identification (empty when OverrulePublication disabled) -->
						<xsd:element name="Editions"      type="tns:ArrayOfEdition"/>                <!-- list of editions to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyEditionsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"/>                       <!-- resolved pubchannel identification -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- resolved issue identification (empty when OverrulePublication disabled) -->
						<xsd:element name="Editions"      type="tns:ArrayOfEdition"/>                <!-- list of updated editions -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete an edition configuration from server. -->
			<xsd:element name="DeleteEditionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="PubChannelId"  type="xsd:integer"     nillable="true"/>   <!-- unique pubchannel identification -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- unique issue identification (empty when OverrulePublication disabled) -->
						<xsd:element name="EditionIds"    type="tns:ArrayOfId"/>                     <!-- list of editions to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteEditionsResponse"/>

			<!--************* SECTION - COMPLEX TYPES *****************-->

			<!-- Category (=section) definition with the complete set of properties. -->
			<xsd:complexType name="Section">
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"                type="xsd:integer"       nillable="true"/> <!-- unique db id -->
					<xsd:element name="Name"              type="xsd:string"        nillable="true"/> <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="Description"       type="xsd:string"        nillable="true"/> <!-- comments about section -->
					<xsd:element name="SortOrder"         type="xsd:unsignedInt"   nillable="true"/> <!-- sort index for section -->
					<xsd:element name="Deadline"          type="tns:dateTimeOrEmpty" nillable="true"/> <!-- publication deadline for section -->
					<xsd:element name="ExpectedPages"     type="xsd:unsignedInt"   nillable="true"/> <!-- number of planned pages for section -->
					<!-- relations (read only) -->
					<xsd:element name="Statuses"          type="tns:ArrayOfIdName" nillable="true"/> <!-- statusses (references) defined for section -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfSection">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Section[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Create a new category (=section) configuration at server. -->
			<xsd:element name="CreateSectionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- unique issue identification (zero when OverrulePublication disabled) -->
						<xsd:element name="Sections"      type="tns:ArrayOfSection"/>                <!-- list of new sections to create for pub/iss -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateSectionsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- unique issue identification (zero when OverrulePublication disabled) -->
						<xsd:element name="Sections"      type="tns:ArrayOfSection"/>                <!-- list of created sections -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve a category (=section) configuration from server. -->
			<xsd:element name="GetSectionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- asks for relations -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- unique issue identification (zero when OverrulePublication disabled) -->
						<xsd:element name="SectionIds"    type="tns:ArrayOfId"   nillable="true"/>   <!-- list of wanted sections (empty to receive all) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetSectionsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- unique issue identification (zero when OverrulePublication disabled) -->
						<xsd:element name="Sections"      type="tns:ArrayOfSection"/>                <!-- list of requested (or all) sections of pub/iss -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update a category (=section) configuration at server. -->
			<xsd:element name="ModifySectionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- unique issue identification (zero when OverrulePublication disabled) -->
						<xsd:element name="Sections"      type="tns:ArrayOfSection"/>                <!-- list of sections to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifySectionsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- resolved publication identification -->
						<xsd:element name="IssueId"       type="xsd:integer"/>                       <!-- unique issue identification (zero when OverrulePublication disabled) -->
						<xsd:element name="Sections"      type="tns:ArrayOfSection"/>                <!-- list of updated sections -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete a category (=section) configuration from server. -->
			<xsd:element name="DeleteSectionsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- unique publication identification -->
						<xsd:element name="IssueId"       type="xsd:integer"  nillable="true"/>      <!-- unique issue identification (zero when OverrulePublication disabled) -->
						<xsd:element name="SectionIds"    type="tns:ArrayOfId"/>                     <!-- list of sections to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteSectionsResponse"/>

			<!--************* STATUS - COMPLEX TYPES *****************-->

			<!-- Status definition with the complete set of properties. -->
			<xsd:complexType name="Status">
				<xsd:all>
					<!-- identification (id and/or name should be given) -->
					<xsd:element name="Id"              type="xsd:integer"      nillable="true" />   <!-- unique db id -->
					<xsd:element name="Name"            type="xsd:string"       nillable="true" />   <!-- unique name -->
					<!-- properties (read/write) -->
					<xsd:element name="SortOrder"       type="xsd:unsignedInt"  nillable="true"/>    <!-- sort index for status -->
					<xsd:element name="Type"            type="tns:ObjectType"   nillable="true"/>    <!-- object type; empty means 'for all types' -->
					<xsd:element name="Produce"         type="xsd:boolean"      nillable="true"/>    <!-- If true for layouts, output will be send if set in featurelist -->
					<xsd:element name="Color"           type="tns:Color"        nillable="true"/>    <!-- RGB color of status to show in GUI -->
					<xsd:element name="DeadlineRelative"  type="xsd:int"        nillable="true"/>    <!-- Deadline Relative for Edition -->
					<!-- DefaultRouteTo not implemented here. Is only used for workflow objects -->
					<xsd:element name="NextStatus"      type="tns:IdName"       nillable="true"/>    <!-- Points to the next state in the flow, nil when there is no next state -->
					<xsd:element name="CreatePermanentVersion"     type="xsd:boolean" nillable="true"/> <!-- If true for layouts, output will be send if set in featurelist -->
					<xsd:element name="RemoveIntermediateVersions" type="xsd:boolean" nillable="true"/> <!-- If true for layouts, output will be send if set in featurelist -->
					<xsd:element name="AutomaticallySendToNext"    type="xsd:boolean" nillable="true"/> <!-- If true for layouts, output will be send if set in featurelist -->
					<xsd:element name="ReadyForPublishing" type="xsd:boolean" nillable="true"/>         <!-- If true for Dossier or PublishForm, these objects are ready to be Published -->
					<xsd:element name="Phase"           type="tns:StatusPhase"   nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.4: Phase of which the status resides in during the workflow -->
					<xsd:element name="SkipIdsa"        type="xsd:boolean"       nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- If true for layout(module), no InDesign Server job is created -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfStatus">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Status[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- v10.2 Create a status configuration at server. -->
			<xsd:element name="CreateStatusesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer" nillable="true"/>       <!-- unique publication identification (can be nil when IssueId is given) -->
						<xsd:element name="IssueId"       type="xsd:integer" nillable="true"/>       <!-- unique issue identification (nil when OverrulePublication disabled) -->
						<xsd:element name="Statuses"      type="tns:ArrayOfStatus" nillable="true"/> <!-- list of statuses without ids -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="CreateStatusesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Statuses"      type="tns:ArrayOfStatus"/>                 <!-- list of created statuses -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- v10.2 Retrieve one or more statuses from the server.
				 There are several constraints on this request:
				 - Either a PublicationId, an IssueId or StatusIds have to be provided. No combination of these is necessary.
				 - StatusIds can only contain ids of statuses that are part of the same issue or the same brand.
				 	(Meaning that if you have StatusIds of the same brand, but some are actually part of an overruling issue, this request will be illegal)
				 - If a PublicationId/IssueId has been provided along with StatusIds, these will need to match with the PublicationId/IssueId of the StatusIds.
				 - ObjectType is merely used as an extra constraint to further specify the results. -->
			<xsd:element name="GetStatusesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="PublicationId" type="xsd:integer"     nillable="true"/>   <!-- unique publication identification (can be nil in request when IssueId is given) -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- unique issue identification (nil when OverrulePublication disabled) -->
						<xsd:element name="ObjectType"    type="tns:ObjectType"  nillable="true"/>   <!-- object type; nil means 'for all types' -->
						<xsd:element name="StatusIds"     type="tns:ArrayOfId"   nillable="true"/>   <!-- list of wanted statuses (nil to receive all) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetStatusesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Statuses"      type="tns:ArrayOfStatus"/>                 <!-- list of requested statuses of publication or issue -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- v10.2 Update a status configuration at server. -->
			<xsd:element name="ModifyStatusesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="Statuses"      type="tns:ArrayOfStatus"/>                 <!-- list of statuses to update -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyStatusesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Statuses"      type="tns:ArrayOfStatus"/>                 <!-- list of updated statuses -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- v10.2 Delete a status configuration from server. -->
			<xsd:element name="DeleteStatusesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- admin user's session ticket -->
						<xsd:element name="StatusIds"     type="tns:ArrayOfId"/>                     <!-- list of statuses to delete -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteStatusesResponse"/>

			<!--************* ACCESS PROFILES - COMPLEX TYPES *************-->

			<!-- v10.2 Access profile definition with the complete set of properties. -->
			<xsd:complexType name="AccessProfile">
				<xsd:all>
					<xsd:element name="Id" type="xsd:integer" nillable="true"/>                      <!-- unique database id -->
					<xsd:element name="Name" type="xsd:string" nillable="true"/>                     <!-- unique access profile name, can be null for modify > no change -->
					<xsd:element name="SortOrder" type="xsd:integer" nillable="true"/>               <!-- sort index -->
					<xsd:element name="Description" type="xsd:string" nillable="true"/>              <!-- description of access profile -->
					<xsd:element name="ProfileFeatures" type="tns:ArrayOfProfileFeature" nillable="true"/> <!-- array of all features that can be set on an access profile -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfAccessProfile">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:AccessProfile[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!--
				Supported values for the Name element are:
				   View, List_PubOverview, Read, Open_Edit, Write, Delete, Purge, Change_Status_Forward, Change_Status,
				   Restore_Version, Keep_Locked, Download_Preview, Download_Original, EditStickyNotes, ViewNotes, DeleteNotes,
				   AddInCopyImages, Publish, Create_Tasks, AllowMultipleArticlePlacements, ChangeEdition, CreateDossier,
				   CheckinArticleFromLayer, CheckinArticleFromDocument, AbortCheckOut, RestrictedProperties, ChangeIPS,
				   ApplyParaStyles, EditParaStyles, ApplyCharStyles, EditCharStyles, ApplyParaFormats, ApplyCharFontFamily,
				   ApplyCharFontStyle, ApplyCharBasicFormats, ApplyCharAdvancedFormats, CopyFit, CompositionPrefs, ForceTrackChanges,
				   EditTrackChanges, ChangeLanguage, EditDictionary, ResizeTFLines, ResizeTF, ApplySwatches, EditSwatches,
				   EditTags, ShortCuts, EditTextMacros, AdvElementsPanel, DSUpdate, DSWriteDataToServer, DSCreateField,
				   DSUpdateContentDatabase, EditTextComp, InsertInlineImage, Query_Browse, Publication_Overview, Upload, Reporting,
				   Web_Editor, MyProfile, Planning, ContentStationPro
				Supported values for the Value element are:
				   - Yes, No (for all features)
			-->
			<xsd:complexType name="ProfileFeature">
				<xsd:all>
					<xsd:element name="Name" type="xsd:string"/>                                     <!-- unique internal name -->
					<xsd:element name="DisplayName" type="xsd:string" nillable="true"/>              <!-- public name -->
					<xsd:element name="Value" type="tns:ProfileFeatureValue"/>                       <!-- determines if the feature is active or not -->
				</xsd:all>
			</xsd:complexType>

			<xsd:simpleType name="ProfileFeatureValue">
				<xsd:restriction base="string">
					<xsd:enumeration value="Yes"/>
					<xsd:enumeration value="No"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="ArrayOfProfileFeature">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ProfileFeature[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!--
				 v10.2 Creates one or more access profiles on the server.

			 	 Two different responses can be requested for access profiles: with or without profile features.
			 	 In order to retrieve access profiles with features, use the Mode "GetProfileFeatures".
				 In order to retrieve access profiles without features, leave RequestModes empty.

				 If an AccessProfile contains ProfileFeatures, the array of ProfileFeatures has to have the following format:
				 $array[name] => value
				 This is done to provide a unified process to handle the ProfileFeatures.
			-->
			<xsd:element name="CreateAccessProfilesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket" type="xsd:string"/>                               <!-- admin user's session ticket -->
						<xsd:element name="RequestModes" type="tns:ArrayOfMode" nillable="true"/>    <!-- asks for relations -->
						<xsd:element name="AccessProfiles" type="tns:ArrayOfAccessProfile"/>         <!-- array of access profiles to create (no id) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="CreateAccessProfilesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="AccessProfiles" type="tns:ArrayOfAccessProfile"/>         <!-- array of created access profiles -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				 v10.2 Retrieve one or more access profiles from the server.

				 Two different responses can be requested for access profiles: with or without profile features.
			 	 In order to retrieve access profiles with features, use the Mode "GetProfileFeatures".
				 In order to retrieve access profiles without features, leave RequestModes empty.

				 The property AccessProfileIds accepts an array with only a 0 in it. This can be used when all
				 profile features have to be retrieved without existing access profiles.
			-->
			<xsd:element name="GetAccessProfilesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket" type="xsd:string"/>                               <!-- admin user's session ticket -->
						<xsd:element name="RequestModes" type="tns:ArrayOfMode" nillable="true"/>    <!-- asks for relations -->
						<xsd:element name="AccessProfileIds" type="tns:ArrayOfId" nillable="true"/>  <!-- list of requested access profiles -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetAccessProfilesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="AccessProfiles" type="tns:ArrayOfAccessProfile"/>         <!-- array of requested access profiles -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				 v10.2 Update one or more access profiles at the server.

				 Two different responses can be requested for access profiles: with or without profile features.
			 	 In order to retrieve access profiles with features, use the Mode "GetProfileFeatures".
				 In order to retrieve access profiles without features, leave RequestModes empty.

				 If an AccessProfile contains ProfileFeatures, the array of ProfileFeatures has to have the following format:
				 $array[name] => value
				 This is done to provide a unified process to handle the ProfileFeatures.
			-->
			<xsd:element name="ModifyAccessProfilesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket" type="xsd:string"/>                               <!-- admin user's session ticket -->
						<xsd:element name="RequestModes" type="tns:ArrayOfMode" nillable="true"/>    <!-- asks for relations -->
						<xsd:element name="AccessProfiles" type="tns:ArrayOfAccessProfile"/>         <!-- array of acces profiles to be updated -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyAccessProfilesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="AccessProfiles" type="tns:ArrayOfAccessProfile"/>         <!-- array of updated access profiles -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- v10.2 Delete one or more access profiles from the server. -->
			<xsd:element name="DeleteAccessProfilesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket" type="xsd:string"/>                               <!-- admin user's session ticket -->
						<xsd:element name="AccessProfileIds" type="tns:ArrayOfId"/>                  <!-- list of requested access profiles -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteAccessProfilesResponse"/>

			<!--************* USER AUTHORIZATIONS - COMPLEX TYPES *****************-->

			<!-- Workflow user group authorization rule definition with the complete set of properties. -->
			<xsd:complexType name="WorkflowUserGroupAuthorization">
				<xsd:all>
					<xsd:element name="Id"              type="xsd:integer" nillable="true"/>         <!-- System wide unique db id, determined by server. (Nil for create.) -->
					<xsd:element name="UserGroupId"     type="xsd:integer"/>                         <!-- Unique id of the user group the authorization binds. -->
					<xsd:element name="SectionId"       type="xsd:integer" nillable="true"/>         <!-- Unique id of a section the authorization binds. (Nil for all sections.) -->
					<xsd:element name="StatusId"        type="xsd:integer" nillable="true"/>         <!-- Unique id of a status the authorization binds. (Nil for all statuses.) -->
					<xsd:element name="AccessProfileId" type="xsd:integer"/>                         <!-- Unique id of an access profile the authorization binds. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfWorkflowUserGroupAuthorization">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:WorkflowUserGroupAuthorization[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!--
				v10.2 Create new workflow user group authorizations at the server.

				Either a publication id or an issue id has to be specified alongside WorkflowUserGroupAuthorizations.
			-->
			<xsd:element name="CreateWorkflowUserGroupAuthorizationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"     nillable="true"/>   <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- Unique issue identification. (Is nil when OverrulePublication is disabled.) -->
						<xsd:element name="WorkflowUserGroupAuthorizations" type="tns:ArrayOfWorkflowUserGroupAuthorization"/> <!-- Workflow user group authorizations to create. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateWorkflowUserGroupAuthorizationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="WorkflowUserGroupAuthorizations" type="tns:ArrayOfWorkflowUserGroupAuthorization"/> <!-- Created workflow user group authorizations. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Modify workflow user group authorizations at the server.

				Either a publication id or an issue id has to be specified alongside WorkflowUserGroupAuthorizations.
			-->
			<xsd:element name="ModifyWorkflowUserGroupAuthorizationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"     nillable="true"/>   <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- Unique issue identification. (Is nil when OverrulePublication is disabled.) -->
						<xsd:element name="WorkflowUserGroupAuthorizations" type="tns:ArrayOfWorkflowUserGroupAuthorization"/> <!-- Workflow user group authorizations to create. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyWorkflowUserGroupAuthorizationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="WorkflowUserGroupAuthorizations" type="tns:ArrayOfWorkflowUserGroupAuthorization"/> <!-- List of created workflow user group authorizations. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Retrieve workflow user group authorizations from the server.

				Either a PublicationId or IssueId alongside an optional UserGroupId, or only an array of authorization ids.
				It is unnecessary to request WorkflowUserGroupAuthorizationIds from multiple publications there is no
				real-world application to do this through a service.

				Supported RequestModes: GetUserGroups, GetStatuses, GetSections.
			-->
			<xsd:element name="GetWorkflowUserGroupAuthorizationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- Asks for relational objects. -->
						<xsd:element name="PublicationId" type="xsd:integer"     nillable="true"/>   <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"     nillable="true"/>   <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="UserGroupId"   type="xsd:integer"     nillable="true"/>   <!-- Unique user group identification. (Nil for all user groups.) -->
						<xsd:element name="WorkflowUserGroupAuthorizationIds" type="tns:ArrayOfId" nillable="true"/> <!-- List of wanted workflow user group authorizations (Nil to receive all.) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetWorkflowUserGroupAuthorizationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="WorkflowUserGroupAuthorizations" type="tns:ArrayOfWorkflowUserGroupAuthorization"/> <!-- List of requested workflow user group authorizations. -->
						<xsd:element name="UserGroups" type="tns:ArrayOfUserGroup" nillable="true"/> <!-- List of requested user groups by RequestModes. -->
						<xsd:element name="Statuses"   type="tns:ArrayOfStatus"    nillable="true"/> <!-- List of requested statuses by RequestModes. -->
						<xsd:element name="Sections"   type="tns:ArrayOfSection"   nillable="true"/> <!-- List of requested sections by RequestModes. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Delete workflow user group authorizations from the server.

				Either a PublicationId or IssueId alongside an optional UserGroupId, or only an array
				of authorization ids.
				It is unnecessary to request WorkflowUserGroupAuthorizationIds from multiple publications 
				or issues as there is no real-world application to do this through a service.
			-->
			<xsd:element name="DeleteWorkflowUserGroupAuthorizationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"  nillable="true"/>      <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"  nillable="true"/>      <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="UserGroupId"   type="xsd:integer"  nillable="true"/>      <!-- Unique user group identification. (Nil for all user groups.) -->
						<xsd:element name="WorkflowUserGroupAuthorizationIds" type="tns:ArrayOfId" nillable="true"/> <!-- List of selected workflow user group authorizations (Nil to delete all.) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteWorkflowUserGroupAuthorizationsResponse"/>

			<!--************* BRAND AUTHORIZATIONS - COMPLEX TYPES *****************-->

			<!-- v10.2 Create new publication admin authorizations at the server. -->
			<xsd:element name="CreatePublicationAdminAuthorizationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- Unique id of a publication the authorization binds. -->
						<xsd:element name="UserGroupIds"  type="tns:ArrayOfId"/>                     <!-- Publication admin authorizations to create. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreatePublicationAdminAuthorizationsResponse"/>                       <!-- No response necessary, all information is already known. -->

			<!--
				v10.2 Retrieve publication admin authorizations from the server.

				Supported RequestModes: GetUserGroups, GetStatuses, GetSections.
			-->
			<xsd:element name="GetPublicationAdminAuthorizationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- Asks for relational objects. -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- Unique id of a publication the authorization binds. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetPublicationAdminAuthorizationsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="UserGroupIds" type="tns:ArrayOfId"/>                      <!-- List of requested publication admin authorizations. -->
						<xsd:element name="UserGroups" type="tns:ArrayOfUserGroup" nillable="true"/> <!-- List of requested sections by RequestModes. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Delete publication admin authorizations from the server.

				If only a PublicationId is given, all authorizations will be deleted for that publication. 
				If both are given, only rules for User Groups within the publication will be deleted. 
			-->
			<xsd:element name="DeletePublicationAdminAuthorizationsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"/>                       <!-- Unique id of a publication. (Nil to delete all.) -->
						<xsd:element name="UserGroupIds"  type="tns:ArrayOfId" nillable="true"/>     <!-- List of publication admin authorizations -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeletePublicationAdminAuthorizationsResponse"/>

			<!--************* ROUTING RULES - COMPLEX TYPES *****************-->

			<!-- Routing rule definition with the complete set of properties. -->
			<xsd:complexType name="Routing">
				<xsd:all>
					<xsd:element name="Id"        type="xsd:integer" nillable="true"/>               <!-- System wide unique db id, determined by server. (Nil for create.) -->
					<xsd:element name="SectionId" type="xsd:integer" nillable="true"/>               <!-- Unique id of a section the authorization binds. (Nil for all sections.) -->
					<xsd:element name="StatusId"  type="xsd:integer" nillable="true"/>               <!-- Unique id of a status the authorization binds. (Nil for all statuses.) -->
					<xsd:element name="RouteTo"   type="xsd:string"/>                                <!-- Unique id of an access profile the authorization binds. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfRouting">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Routing[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!--
				v10.2 Create new routing rules at the server.

				Either a publication id or an issue id has to be specified alongside Routing objects.
			-->
			<xsd:element name="CreateRoutingsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"       nillable="true"/> <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"       nillable="true"/> <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="Routings"      type="tns:ArrayOfRouting" nillable="true"/> <!-- Routing rules to be created. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateRoutingsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Routings" type="tns:ArrayOfRouting"/>                     <!-- Created routing rules. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Modify existing routing rules at the server.

				Either a publication or an issue id has to be specified alongside Routing objexts.
			-->
			<xsd:element name="ModifyRoutingsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"       nillable="true"/> <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"       nillable="true"/> <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="Routings"      type="tns:ArrayOfRouting" nillable="true"/> <!-- Routing rules to be modified. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyRoutingsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Routings" type="tns:ArrayOfRouting"/>                     <!-- Modified routing rules. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Retrieve routing rules from the server.

				Either a PublicationId or IssueId alongside an optional SectionId can be given, or
				only an array of routing ids.
				It is unnecessary to request Routing rules from multiple publications as there is no
				real-world application to do this through a service.
				Supported RequestModes: GetStatuses, GetSections.
			-->
			<xsd:element name="GetRoutingsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket -->
						<xsd:element name="RequestModes"  type="tns:ArrayOfMode"/>                   <!-- Asks for relational objects. -->
						<xsd:element name="PublicationId" type="xsd:integer"   nillable="true"/>     <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"   nillable="true"/>     <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="SectionId"     type="xsd:integer"   nillable="true"/>     <!-- Unique user group identification. (Nil for all user groups.) -->
						<xsd:element name="RoutingIds"    type="tns:ArrayOfId" nillable="true"/>     <!-- List of wanted workflow user group authorizations (Nil to receive all.) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetRoutingsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Routings" type="tns:ArrayOfRouting"/>                   <!-- List of requested workflow user group authorizations. -->
						<xsd:element name="Sections" type="tns:ArrayOfSection" nillable="true"/>   <!-- List of requested sections by RequestModes. -->
						<xsd:element name="Statuses" type="tns:ArrayOfStatus"  nillable="true"/>   <!-- List of requested statuses by RequestModes. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Delete routing rules from the server.

				Either a PublicationId or IssueId alongside an optional SectionId, or only an array
				of authorization ids.
				It is unnecessary to request RoutingIds from multiple publications or issues as there
				is no real-world application to do this through a service.
			-->
			<xsd:element name="DeleteRoutingsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId" type="xsd:integer"   nillable="true"/>     <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"       type="xsd:integer"   nillable="true"/>     <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="SectionId"     type="xsd:integer"   nillable="true"/>     <!-- Unique section identification. (Nil for all sections.) -->
						<xsd:element name="RoutingIds"    type="tns:ArrayOfId" nillable="true"/>     <!-- List of selected workflow user group authorizations (Nil to delete all.) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteRoutingsResponse"/>

			<!--************* TEMPLATE OBJECT ACCESS RULES *****************-->

			<!-- v10.2 Template object access definition. -->
			<xsd:complexType name="TemplateObjectAccess">
				<xsd:all>
					<xsd:element name="TemplateObjectId" type="xsd:integer"/>                        <!-- Unique template object identification. -->
					<xsd:element name="UserGroupId"      type="xsd:integer"/>                        <!-- Unique user group identification. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfTemplateObjectAccess">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:TemplateObjectAccess[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!--
				v10.2 Create new template object access rules at the server.

				Either a publication id or an issue id has to be specified alongside a list of template object access rules.

				Supported RequestModes: GetUserGroups, GetObjectInfos.
			-->
			<xsd:element name="AddTemplateObjectsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"          type="xsd:string"/>                      <!-- Admin user's session ticket. -->
						<xsd:element name="RequestModes"    type="tns:ArrayOfMode"/>                 <!-- Asks for relational objects. -->
						<xsd:element name="PublicationId"   type="xsd:integer" nillable="true"/>     <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"         type="xsd:integer" nillable="true"/>     <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="TemplateObjects" type="tns:ArrayOfTemplateObjectAccess"/> <!-- List of template object access rules.-->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="AddTemplateObjectsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="UserGroups"  type="tns:ArrayOfUserGroup"  nillable="true"/> <!-- List of requested user groups by RequestMode (GetUserGroups). -->
						<xsd:element name="ObjectInfos" type="tns:ArrayOfObjectInfo" nillable="true"/> <!-- List of requested object information by RequestMode (GetObjectInfos). -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Retrieve template object access rules from the server.

				Either a PublicationId or IssueId alongside an optional TemplateObjectId and/or UserGroupId can be given.
				It is unnecessary to request template object access rules from multiple publications as there is no
				real-world application to do this through a service.

				Supported RequestModes: GetUserGroups, GetObjectInfos.
			-->
			<xsd:element name="GetTemplateObjectsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"           type="xsd:string"/>                     <!-- Admin user's session ticket. -->
						<xsd:element name="RequestModes"     type="tns:ArrayOfMode"/>                <!-- Asks for relational objects. -->
						<xsd:element name="PublicationId"    type="xsd:integer" nillable="true"/>    <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"          type="xsd:integer" nillable="true"/>    <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="TemplateObjectId" type="xsd:integer" nillable="true"/>    <!-- Unique template object identification. -->
						<xsd:element name="UserGroupId"      type="xsd:integer" nillable="true"/>    <!-- Unique user group identification. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetTemplateObjectsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="TemplateObjects" type="tns:ArrayOfTemplateObjectAccess"/>       <!-- List of requested template object access rules. -->
						<xsd:element name="UserGroups"      type="tns:ArrayOfUserGroup"  nillable="true"/> <!-- List of requested user groups by RequestMode (GetUserGroups). -->
						<xsd:element name="ObjectInfos"     type="tns:ArrayOfObjectInfo" nillable="true"/> <!-- List of requested object information by RequestMode (GetObjectInfos). -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				v10.2 Delete template object access rules from the server.

				Either a PublicationId or IssueId should be given, along with a list of template objects access rules
				to be deleted. It is unnecessary to delete template object access rules from multiple publications
				as there is no real-world application to do this through a service.
			-->
			<xsd:element name="RemoveTemplateObjectsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"          type="xsd:string"/>                      <!-- Admin user's session ticket. -->
						<xsd:element name="PublicationId"   type="xsd:integer" nillable="true"/>     <!-- Unique publication identification. (Can be nil in request when IssueId is given.) -->
						<xsd:element name="IssueId"         type="xsd:integer" nillable="true"/>     <!-- Unique issue identification. (Nil when OverrulePublication is disabled.) -->
						<xsd:element name="TemplateObjects" type="tns:ArrayOfTemplateObjectAccess"/> <!-- List of template object access rules. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="RemoveTemplateObjectsResponse"/>

			<!--************* WORFLOW DIALOG - COMPLEX TYPES *****************-->

			<!--************* NAMED QUERY - COMPLEX TYPES *****************-->

			<!--************* META DATA - COMPLEX TYPES *****************-->

			<!--************* OPERATION LOG - COMPLEX TYPES *****************-->

			<!--************* MESSAGE LOG - COMPLEX TYPES *****************-->

			<!--************* AUTOCOMPLETE TERMENTITIES - COMPLEX TYPES *****************-->

			<!-- Term entity configuration. The Id or Name + AutocompleteProvider should be given. -->
			<xsd:complexType name="TermEntity">
				<xsd:all>
					<xsd:element name="Id"              type="xsd:integer"      nillable="true" />  <!-- System wide unique db id, determined by server. -->
					<xsd:element name="Name"            type="xsd:string"       nillable="true" />  <!-- Unique name within the provider's vocabulary. -->
					<xsd:element name="AutocompleteProvider" type="xsd:string"  nillable="true"/>   <!-- Internal server plug-in name that has an Autocomplete connector. -->
					<xsd:element name="PublishSystemId" type="xsd:string"       nillable="true"/>   <!-- Unique id of the publishing system. Use to bind the publishing storage. -->
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ArrayOfTermEntity">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:TermEntity[]"/>
					</restriction>
				</complexContent>
			</xsd:complexType>

			<!-- Create new term entity configurations at server. -->
			<xsd:element name="CreateAutocompleteTermEntitiesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="TermEntities"  type="tns:ArrayOfTermEntity"/>             <!-- Term entity definitions to create. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateAutocompleteTermEntitiesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="TermEntities"  type="tns:ArrayOfTermEntity"/>             <!-- Created term entity definitions. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Retrieve a term entity configuration from server. -->
			<xsd:element name="GetAutocompleteTermEntitiesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="AutocompleteProvider" type="xsd:string"    nillable="true"/> <!-- Internal server plug-in name that ships an Autocomplete connector. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetAutocompleteTermEntitiesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="TermEntities"  type="tns:ArrayOfTermEntity"/>             <!-- Found term entity definitions. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update a term entity configuration at server. -->
			<xsd:element name="ModifyAutocompleteTermEntitiesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="TermEntities"  type="tns:ArrayOfTermEntity"/>             <!-- Term entity definitions to modify. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyAutocompleteTermEntitiesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="TermEntities"  type="tns:ArrayOfTermEntity"/>             <!-- Modified term entity definitions. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Delete a term entity configuration from server. -->
			<xsd:element name="DeleteAutocompleteTermEntitiesRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="TermEntities"  type="tns:ArrayOfTermEntity"/>             <!-- Term entity definitions to delete. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteAutocompleteTermEntitiesResponse"/>

			<!--************* AUTOCOMPLETE TERMS - COMPLEX TYPES *****************-->
			<!-- Create autocomplete terms at server. -->
			<xsd:element name="CreateAutocompleteTermsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="TermEntity"    type="tns:TermEntity"/>                    <!-- Reference to the term entity for which terms should be created. -->
						<xsd:element name="Terms"         type="tns:ArrayOfString"/>                 <!-- Terms to create. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="CreateAutocompleteTermsResponse"/>

			<!-- Retrieve autocomplete terms from server. -->
			<xsd:element name="GetAutocompleteTermsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="TermEntity"    type="tns:TermEntity"/>                    <!-- Reference to the term entity for which terms should be retrieved. -->
						<xsd:element name="TypedValue"    type="xsd:string"/>                        <!-- User typed text (fragment) to search terms for. -->
						<xsd:element name="FirstEntry"    type="xsd:integer"/>                       <!-- Index of the first term in the total result set to return. -->
						<xsd:element name="MaxEntries"     type="xsd:integer" nillable="true"/>      <!-- Number of terms to return in the next page. Zero for all, or nil for the server defined default.  -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetAutocompleteTermsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Terms"         type="tns:ArrayOfString"/>                 <!-- Found terms for current page. -->
						<xsd:element name="FirstEntry"    type="xsd:integer"/>                       <!-- Index of the first term in the total result set. -->
						<xsd:element name="ListedEntries" type="xsd:integer"/>                       <!-- Number of terms listed in the returned page. -->
						<xsd:element name="TotalEntries"  type="xsd:integer"/>                       <!-- Number of found terms in the total result set. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!-- Update autocomplete terms at server. -->
			<xsd:element name="ModifyAutocompleteTermsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="TermEntity"    type="tns:TermEntity"/>                    <!-- Reference to the term entity for which terms should be modified. -->
						<xsd:element name="OldTerms"      type="tns:ArrayOfString"/>                 <!-- Terms to be deleted. -->
						<xsd:element name="NewTerms"      type="tns:ArrayOfString"/>                 <!-- Terms to be added. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="ModifyAutocompleteTermsResponse"/>

			<!-- Delete autocomplete terms from server. -->
			<xsd:element name="DeleteAutocompleteTermsRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"        type="xsd:string"/>                        <!-- Admin user's session ticket. -->
						<xsd:element name="TermEntity"    type="tns:TermEntity"/>                    <!-- Reference to the term entity for which terms should be deleted. -->
						<xsd:element name="Terms"         type="tns:ArrayOfString"/>                 <!-- Terms to be deleted. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="DeleteAutocompleteTermsResponse"/>


		</xsd:schema>
	</wsdl:types>


	<!-- >>>>>>>>>>>>>>>>>>>>>>>>>> MESSAGES  <<<<<<<<<<<<<<<<<<<<<<<<<< -->


	<!--************* LOGON/LOGOFF - MESSAGES *****************-->

	<wsdl:message name="LogOnRequest">
		<wsdl:part name="parameters"    element="tns:LogOnRequest"/>
	</wsdl:message>
	<wsdl:message name="LogOnResponse">
		<wsdl:part name="parameters"    element="tns:LogOnResponse"/>               <!-- admin user's session ticket -->
	</wsdl:message>
	<wsdl:message name="LogOffRequest">
		<wsdl:part name="parameters" element="tns:LogOffRequest"/>
	</wsdl:message>
	<wsdl:message name="LogOffResponse"/>


	<!--************* USERS - MESSAGES *****************-->
	<wsdl:message name="CreateUsersRequest">
		<wsdl:part name="parameters"	element="tns:CreateUsersRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateUsersResponse">
		<wsdl:part name="parameters"	element="tns:CreateUsersResponse"/>
	</wsdl:message>

	<wsdl:message name="GetUsersRequest">
		<wsdl:part name="parameter"		element="tns:GetUsersRequest"/>
	</wsdl:message>
	<wsdl:message name="GetUsersResponse">
		<wsdl:part name="paramater"		element="tns:GetUsersResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyUsersRequest">
		<wsdl:part name="paramaters"	element="tns:ModifyUsersRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyUsersResponse">
		<wsdl:part name="paramaters"	element="tns:ModifyUsersResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteUsersRequest">
		<wsdl:part name="paramaters"		element="tns:DeleteUsersRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteUsersResponse">
		<wsdl:part name="paramaters"		element="tns:DeleteUsersResponse"/>
	</wsdl:message>
	<!--
		<wsdl:message name="CopyUsersRequest">
			<wsdl:part name="paramaters"		element="tns:CopyUsersRequest"/>
		</wsdl:message>
		<wsdl:message name="CopyUsersResponse">
			<wsdl:part name="paramaters"		element="tns:CopyUsersResponse"/>
		</wsdl:message>
	-->


	<!--************* USER GROUPS - MESSAGES *****************-->

	<wsdl:message name="CreateUserGroupsRequest">
		<wsdl:part name="parameters"	element="tns:CreateUserGroupsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateUserGroupsResponse">
		<wsdl:part name="parameters"	element="tns:CreateUserGroupsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetUserGroupsRequest">
		<wsdl:part name="parameter"	element="tns:GetUserGroupsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetUserGroupsResponse">
		<wsdl:part name="parameter"	element="tns:GetUserGroupsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyUserGroupsRequest">
		<wsdl:part name="parameters"	element="tns:ModifyUserGroupsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyUserGroupsResponse">
		<wsdl:part name="parameters"	element="tns:ModifyUserGroupsResponse"/>
	</wsdl:message>
	<!--
		<wsdl:message name="CopyUserGroupsRequest">
			<wsdl:part name="parameters"	element="tns:CopyUserGroupsRequest"/>
		</wsdl:message>
		<wsdl:message name="CopyUserGroupsResponse">
			<wsdl:part name="parameters"	element="tns:CopyUserGroupsResponse"/>
		</wsdl:message>
	-->
	<wsdl:message name="DeleteUserGroupsRequest">
		<wsdl:part name="parameters"	element="tns:DeleteUserGroupsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteUserGroupsResponse">
		<wsdl:part name="parameters"	element="tns:DeleteUserGroupsResponse"/>
	</wsdl:message>

	<!--************* MEMBERSHIP - MESSAGES *****************-->
	<wsdl:message name="AddUsersToGroupRequest">
		<wsdl:part name="parameters"	element="tns:AddUsersToGroupRequest"/>
	</wsdl:message>
	<wsdl:message name="AddUsersToGroupResponse"/>

	<wsdl:message name="RemoveUsersFromGroupRequest">
		<wsdl:part name="parameters"	element="tns:RemoveUsersFromGroupRequest"/>
	</wsdl:message>
	<wsdl:message name="RemoveUsersFromGroupResponse"/>

	<wsdl:message name="AddGroupsToUserRequest">
		<wsdl:part name="parameters"	element="tns:AddGroupsToUserRequest"/>
	</wsdl:message>
	<wsdl:message name="AddGroupsToUserResponse"/>

	<wsdl:message name="RemoveGroupsFromUserRequest">
		<wsdl:part name="parameters"	element="tns:RemoveGroupsFromUserRequest"/>
	</wsdl:message>
	<wsdl:message name="RemoveGroupsFromUserResponse"/>

	<!--************* PUBLICATION - MESSAGES *****************-->

	<wsdl:message name="CreatePublicationsRequest">
		<wsdl:part name="parameters" 	element="tns:CreatePublicationsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreatePublicationsResponse">
		<wsdl:part name="parameters"  	element="tns:CreatePublicationsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetPublicationsRequest">
		<wsdl:part name="parameters"    element="tns:GetPublicationsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetPublicationsResponse">
		<wsdl:part name="parameters"    element="tns:GetPublicationsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyPublicationsRequest">
		<wsdl:part name="parameters" 	element="tns:ModifyPublicationsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyPublicationsResponse">
		<wsdl:part name="parameters"  	element="tns:ModifyPublicationsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeletePublicationsRequest">
		<wsdl:part name="parameters"  	element="tns:DeletePublicationsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeletePublicationsResponse">
	</wsdl:message>
	<!--
		<wsdl:message name="CopyPublicationsRequest">
			<wsdl:part name="parameters"  	element="tns:CopyPublicationsRequest"/>
		</wsdl:message>
		<wsdl:message name="CopyPublicationsResponse">
			<wsdl:part name="parameters"  	element="tns:CopyPublicationsResponse"/>
		</wsdl:message>
	-->

	<!--************* PUBCHANNEL - MESSAGES *****************-->

	<wsdl:message name="CreatePubChannelsRequest">
		<wsdl:part name="parameters" 	element="tns:CreatePubChannelsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreatePubChannelsResponse">
		<wsdl:part name="parameters" 	element="tns:CreatePubChannelsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetPubChannelsRequest">
		<wsdl:part name="parameters"	element="tns:GetPubChannelsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetPubChannelsResponse">
		<wsdl:part name="parameters"	element="tns:GetPubChannelsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyPubChannelsRequest">
		<wsdl:part name="parameters" 	element="tns:ModifyPubChannelsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyPubChannelsResponse">
		<wsdl:part name="parameters"	element="tns:ModifyPubChannelsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeletePubChannelsRequest">
		<wsdl:part name="parameters"	element="tns:DeletePubChannelsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeletePubChannelsResponse">
		<wsdl:part name="parameters"	element="tns:DeletePubChannelsResponse"/>
	</wsdl:message>
	<!--
		<wsdl:message name="CopyPubChannelsRequest">
			<wsdl:part name="parameters"	element="tns:CopyPubChannelsRequest"/>
		</wsdl:message>
		<wsdl:message name="CopyPubChannelsResponse">
			<wsdl:part name="parameters"	element="tns:CopyPubChannelsResponse"/>
		</wsdl:message>
	-->

	<!--************* ISSUE - MESSAGES *****************-->

	<wsdl:message name="CreateIssuesRequest">
		<wsdl:part name="parameters" 	element="tns:CreateIssuesRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateIssuesResponse">
		<wsdl:part name="parameters" 	element="tns:CreateIssuesResponse"/>
	</wsdl:message>

	<wsdl:message name="GetIssuesRequest">
		<wsdl:part name="parameters"	element="tns:GetIssuesRequest"/>
	</wsdl:message>
	<wsdl:message name="GetIssuesResponse">
		<wsdl:part name="parameters"	element="tns:GetIssuesResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyIssuesRequest">
		<wsdl:part name="parameters" 	element="tns:ModifyIssuesRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyIssuesResponse">
		<wsdl:part name="parameters"	element="tns:ModifyIssuesResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteIssuesRequest">
		<wsdl:part name="parameters"	element="tns:DeleteIssuesRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteIssuesResponse">
		<wsdl:part name="parameters"	element="tns:DeleteIssuesResponse"/>
	</wsdl:message>

	<wsdl:message name="CopyIssuesRequest">
		<wsdl:part name="parameters"	element="tns:CopyIssuesRequest"/>
	</wsdl:message>
	<wsdl:message name="CopyIssuesResponse">
		<wsdl:part name="parameters"	element="tns:CopyIssuesResponse"/>
	</wsdl:message>

	<!--************* EDITION - MESSAGES *****************-->

	<wsdl:message name="CreateEditionsRequest">
		<wsdl:part name="parameters" 	element="tns:CreateEditionsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateEditionsResponse">
		<wsdl:part name="parameters" 	element="tns:CreateEditionsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetEditionsRequest">
		<wsdl:part name="parameters"	element="tns:GetEditionsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetEditionsResponse">
		<wsdl:part name="parameters"	element="tns:GetEditionsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyEditionsRequest">
		<wsdl:part name="parameters"	element="tns:ModifyEditionsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyEditionsResponse">
		<wsdl:part name="parameters"	element="tns:ModifyEditionsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteEditionsRequest">
		<wsdl:part name="parameters"	element="tns:DeleteEditionsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteEditionsResponse">
		<wsdl:part name="parameters"	element="tns:DeleteEditionsResponse"/>
	</wsdl:message>

	<!--************* SECTION - MESSAGES *****************-->

	<wsdl:message name="CreateSectionsRequest">
		<wsdl:part name="parameters"	element="tns:CreateSectionsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateSectionsResponse">
		<wsdl:part name="parameters" 	element="tns:CreateSectionsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetSectionsRequest">
		<wsdl:part name="parameters" 	element="tns:GetSectionsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetSectionsResponse">
		<wsdl:part name="parameters"	element="tns:GetSectionsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifySectionsRequest">
		<wsdl:part name="parameters"	element="tns:ModifySectionsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifySectionsResponse">
		<wsdl:part name="parameters"	element="tns:ModifySectionsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteSectionsRequest">
		<wsdl:part name="parameters"	element="tns:DeleteSectionsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteSectionsResponse">
		<wsdl:part name="parameters"	element="tns:DeleteSectionsResponse"/>
	</wsdl:message>

	<!--************* STATUS - MESSAGES *****************-->

	<wsdl:message name="CreateStatusesRequest">
		<wsdl:part name="parameters"    element="tns:CreateStatusesRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateStatusesResponse">
		<wsdl:part name="parameters" 	element="tns:CreateStatusesResponse"/>
	</wsdl:message>

	<wsdl:message name="GetStatusesRequest">
		<wsdl:part name="parameters" 	element="tns:GetStatusesRequest"/>
	</wsdl:message>
	<wsdl:message name="GetStatusesResponse">
		<wsdl:part name="parameters"	element="tns:GetStatusesResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyStatusesRequest">
		<wsdl:part name="parameters"	element="tns:ModifyStatusesRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyStatusesResponse">
		<wsdl:part name="parameters"	element="tns:ModifyStatusesResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteStatusesRequest">
		<wsdl:part name="parameters"	element="tns:DeleteStatusesRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteStatusesResponse"/>

	<!--************* ACCESS PROFILES - MESSAGES *****************-->

	<wsdl:message name="CreateAccessProfilesRequest">
		<wsdl:part name="parameters"    element="tns:CreateAccessProfilesRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateAccessProfilesResponse">
		<wsdl:part name="parameters" 	element="tns:CreateAccessProfilesResponse"/>
	</wsdl:message>

	<wsdl:message name="GetAccessProfilesRequest">
		<wsdl:part name="parameters" 	element="tns:GetAccessProfilesRequest"/>
	</wsdl:message>
	<wsdl:message name="GetAccessProfilesResponse">
		<wsdl:part name="parameters"	element="tns:GetAccessProfilesResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyAccessProfilesRequest">
		<wsdl:part name="parameters"	element="tns:ModifyAccessProfilesRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyAccessProfilesResponse">
		<wsdl:part name="parameters"	element="tns:ModifyAccessProfilesResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteAccessProfilesRequest">
		<wsdl:part name="parameters"	element="tns:DeleteAccessProfilesRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteAccessProfilesResponse"/>

	<!-- ??? <<< MUTATION POINT >>> ??? -->

	<!--************* USER AUTHORIZATIONS - MESSAGES *****************-->

	<wsdl:message name="CreateWorkflowUserGroupAuthorizationsRequest">
		<wsdl:part name="parameters"	element="tns:CreateWorkflowUserGroupAuthorizationsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateWorkflowUserGroupAuthorizationsResponse">
		<wsdl:part name="parameters" 	element="tns:CreateWorkflowUserGroupAuthorizationsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetWorkflowUserGroupAuthorizationsRequest">
		<wsdl:part name="parameters" 	element="tns:GetWorkflowUserGroupAuthorizationsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetWorkflowUserGroupAuthorizationsResponse">
		<wsdl:part name="parameters"	element="tns:GetWorkflowUserGroupAuthorizationsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyWorkflowUserGroupAuthorizationsRequest">
		<wsdl:part name="parameters"	element="tns:ModifyWorkflowUserGroupAuthorizationsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyWorkflowUserGroupAuthorizationsResponse">
		<wsdl:part name="parameters"	element="tns:ModifyWorkflowUserGroupAuthorizationsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteWorkflowUserGroupAuthorizationsRequest">
		<wsdl:part name="parameters"	element="tns:DeleteWorkflowUserGroupAuthorizationsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteWorkflowUserGroupAuthorizationsResponse">
		<wsdl:part name="parameters"	element="tns:DeleteWorkflowUserGroupAuthorizationsResponse"/>
	</wsdl:message>

	<!--************* BRAND AUTHORIZATIONS - MESSAGES *****************-->
	
	<wsdl:message name="CreatePublicationAdminAuthorizationsRequest">
		<wsdl:part name="parameters"	element="tns:CreatePublicationAdminAuthorizationsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreatePublicationAdminAuthorizationsResponse">
		<wsdl:part name="parameters" 	element="tns:CreatePublicationAdminAuthorizationsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetPublicationAdminAuthorizationsRequest">
		<wsdl:part name="parameters" 	element="tns:GetPublicationAdminAuthorizationsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetPublicationAdminAuthorizationsResponse">
		<wsdl:part name="parameters"	element="tns:GetPublicationAdminAuthorizationsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeletePublicationAdminAuthorizationsRequest">
		<wsdl:part name="parameters"	element="tns:DeletePublicationAdminAuthorizationsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeletePublicationAdminAuthorizationsResponse">
		<wsdl:part name="parameters"	element="tns:DeletePublicationAdminAuthorizationsResponse"/>
	</wsdl:message>

	<!--************* ROUTING RULES - MESSAGES *****************-->

	<wsdl:message name="CreateRoutingsRequest">
		<wsdl:part name="parameters"	element="tns:CreateRoutingsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateRoutingsResponse">
		<wsdl:part name="parameters" 	element="tns:CreateRoutingsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetRoutingsRequest">
		<wsdl:part name="parameters" 	element="tns:GetRoutingsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetRoutingsResponse">
		<wsdl:part name="parameters"	element="tns:GetRoutingsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyRoutingsRequest">
		<wsdl:part name="parameters"	element="tns:ModifyRoutingsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyRoutingsResponse">
		<wsdl:part name="parameters"	element="tns:ModifyRoutingsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteRoutingsRequest">
		<wsdl:part name="parameters"	element="tns:DeleteRoutingsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteRoutingsResponse">
		<wsdl:part name="parameters"	element="tns:DeleteRoutingsResponse"/>
	</wsdl:message>

	<!--************* TEMPLATE ACCESS RULES DIALOG - MESSAGES *****************-->

	<wsdl:message name="AddTemplateObjectsRequest">
		<wsdl:part name="parameters"	element="tns:AddTemplateObjectsRequest"/>
	</wsdl:message>
	<wsdl:message name="AddTemplateObjectsResponse">
		<wsdl:part name="parameters" 	element="tns:AddTemplateObjectsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetTemplateObjectsRequest">
		<wsdl:part name="parameters"	element="tns:GetTemplateObjectsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetTemplateObjectsResponse">
		<wsdl:part name="parameters" 	element="tns:GetTemplateObjectsResponse"/>
	</wsdl:message>

	<wsdl:message name="RemoveTemplateObjectsRequest">
		<wsdl:part name="parameters"	element="tns:RemoveTemplateObjectsRequest"/>
	</wsdl:message>
	<wsdl:message name="RemoveTemplateObjectsResponse">
		<wsdl:part name="parameters" 	element="tns:RemoveTemplateObjectsResponse"/>
	</wsdl:message>

	<!--************* WORFLOW DIALOG - MESSAGES *****************-->

	<!--************* NAMED QUERY - MESSAGES *****************-->

	<!--************* META DATA - MESSAGES *****************-->

	<!--************* OPERATION LOG - MESSAGES *****************-->

	<!--************* MESSAGE LOG - MESSAGES *****************-->

	<!--************* AUTOCOMPLETE TERMENTITIES - MESSAGES *****************-->

	<wsdl:message name="CreateAutocompleteTermEntitiesRequest">
		<wsdl:part name="parameters"	element="tns:CreateAutocompleteTermEntitiesRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateAutocompleteTermEntitiesResponse">
		<wsdl:part name="parameters" 	element="tns:CreateAutocompleteTermEntitiesResponse"/>
	</wsdl:message>

	<wsdl:message name="GetAutocompleteTermEntitiesRequest">
		<wsdl:part name="parameters" 	element="tns:GetAutocompleteTermEntitiesRequest"/>
	</wsdl:message>
	<wsdl:message name="GetAutocompleteTermEntitiesResponse">
		<wsdl:part name="parameters"	element="tns:GetAutocompleteTermEntitiesResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyAutocompleteTermEntitiesRequest">
		<wsdl:part name="parameters"	element="tns:ModifyAutocompleteTermEntitiesRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyAutocompleteTermEntitiesResponse">
		<wsdl:part name="parameters"	element="tns:ModifyAutocompleteTermEntitiesResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteAutocompleteTermEntitiesRequest">
		<wsdl:part name="parameters"	element="tns:DeleteAutocompleteTermEntitiesRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteAutocompleteTermEntitiesResponse">
		<wsdl:part name="parameters"	element="tns:DeleteAutocompleteTermEntitiesResponse"/>
	</wsdl:message>

	<!--************* AUTOCOMPLETE TERMS - MESSAGES *****************-->

	<wsdl:message name="CreateAutocompleteTermsRequest">
		<wsdl:part name="parameters"	element="tns:CreateAutocompleteTermsRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateAutocompleteTermsResponse">
		<wsdl:part name="parameters" 	element="tns:CreateAutocompleteTermsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetAutocompleteTermsRequest">
		<wsdl:part name="parameters" 	element="tns:GetAutocompleteTermsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetAutocompleteTermsResponse">
		<wsdl:part name="parameters"	element="tns:GetAutocompleteTermsResponse"/>
	</wsdl:message>

	<wsdl:message name="ModifyAutocompleteTermsRequest">
		<wsdl:part name="parameters"	element="tns:ModifyAutocompleteTermsRequest"/>
	</wsdl:message>
	<wsdl:message name="ModifyAutocompleteTermsResponse">
		<wsdl:part name="parameters"	element="tns:ModifyAutocompleteTermsResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteAutocompleteTermsRequest">
		<wsdl:part name="parameters"	element="tns:DeleteAutocompleteTermsRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteAutocompleteTermsResponse">
		<wsdl:part name="parameters"	element="tns:DeleteAutocompleteTermsResponse"/>
	</wsdl:message>

	<!-- >>>>>>>>>>>>>>>>>>>>>>>>>> OPERATIONS  <<<<<<<<<<<<<<<<<<<<<<<< -->

	<wsdl:portType name="SmartConnectionAdminPort">


		<!--************* LOGON/LOGOFF - OPERATIONS *****************-->

		<wsdl:operation name="LogOn">
			<wsdl:input message="tns:LogOnRequest"/>
			<wsdl:output message="tns:LogOnResponse"/>
		</wsdl:operation>
		<wsdl:operation name="LogOff">
			<wsdl:input message="tns:LogOffRequest"/>
			<wsdl:output message="tns:LogOffResponse"/>
		</wsdl:operation>


		<!--************* USER - OPERATIONS *****************-->
		<wsdl:operation name="CreateUsers">
			<wsdl:input message="tns:CreateUsersRequest"/>
			<wsdl:output message="tns:CreateUsersResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetUsers">
			<wsdl:input message="tns:GetUsersRequest"/>
			<wsdl:output message="tns:GetUsersResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyUsers">
			<wsdl:input message="tns:ModifyUsersRequest"/>
			<wsdl:output message="tns:ModifyUsersResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteUsers">
			<wsdl:input message="tns:DeleteUsersRequest"/>
			<wsdl:output message="tns:DeleteUsersResponse"/>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyUsers">
					<wsdl:input message="tns:CopyUsersRequest"/>
					<wsdl:output message="tns:CopyUsersResponse"/>
				</wsdl:operation>
		-->

		<!--************* USER GROUP - OPERATIONS *****************-->
		<wsdl:operation name="CreateUserGroups">
			<wsdl:input message="tns:CreateUserGroupsRequest"/>
			<wsdl:output message="tns:CreateUserGroupsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetUserGroups">
			<wsdl:input message="tns:GetUserGroupsRequest"/>
			<wsdl:output message="tns:GetUserGroupsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyUserGroups">
			<wsdl:input message="tns:ModifyUserGroupsRequest"/>
			<wsdl:output message="tns:ModifyUserGroupsResponse"/>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyUserGroups">
					<wsdl:input message="tns:CopyUserGroupsRequest"/>
					<wsdl:output message="tns:CopyUserGroupsResponse"/>
				</wsdl:operation>
		-->
		<wsdl:operation name="DeleteUserGroups">
			<wsdl:input message="tns:DeleteUserGroupsRequest"/>
			<wsdl:output message="tns:DeleteUserGroupsResponse"/>
		</wsdl:operation>

		<!--************* MEMBERSHIP - OPERATIONS *****************-->
		<wsdl:operation name="AddUsersToGroup">
			<wsdl:input message="tns:AddUsersToGroupRequest"/>
			<wsdl:output message="tns:AddUsersToGroupResponse"/>
		</wsdl:operation>
		<wsdl:operation name="RemoveUsersFromGroup">
			<wsdl:input message="tns:RemoveUsersFromGroupRequest"/>
			<wsdl:output message="tns:RemoveUsersFromGroupResponse"/>
		</wsdl:operation>
		<wsdl:operation name="AddGroupsToUser">
			<wsdl:input message="tns:AddGroupsToUserRequest"/>
			<wsdl:output message="tns:AddGroupsToUserResponse"/>
		</wsdl:operation>
		<wsdl:operation name="RemoveGroupsFromUser">
			<wsdl:input message="tns:RemoveGroupsFromUserRequest"/>
			<wsdl:output message="tns:RemoveGroupsFromUserResponse"/>
		</wsdl:operation>


		<!--************* PUBLICATION - OPERATIONS *****************-->
		<wsdl:operation name="CreatePublications">
			<wsdl:input message="tns:CreatePublicationsRequest"/>
			<wsdl:output message="tns:CreatePublicationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetPublications">
			<wsdl:input message="tns:GetPublicationsRequest"/>
			<wsdl:output message="tns:GetPublicationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyPublications">
			<wsdl:input message="tns:ModifyPublicationsRequest"/>
			<wsdl:output message="tns:ModifyPublicationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeletePublications">
			<wsdl:input message="tns:DeletePublicationsRequest"/>
			<wsdl:output message="tns:DeletePublicationsResponse"/>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyPublications">
					<wsdl:input message="tns:CopyPublicationsRequest"/>
					<wsdl:output message="tns:CopyPublicationsResponse"/>
				</wsdl:operation>
		-->

		<!--************* PUBCHANNEL - OPERATIONS *****************-->
		<wsdl:operation name="CreatePubChannels">
			<wsdl:input message="tns:CreatePubChannelsRequest"/>
			<wsdl:output message="tns:CreatePubChannelsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetPubChannels">
			<wsdl:input message="tns:GetPubChannelsRequest"/>
			<wsdl:output message="tns:GetPubChannelsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyPubChannels">
			<wsdl:input message="tns:ModifyPubChannelsRequest"/>
			<wsdl:output message="tns:ModifyPubChannelsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeletePubChannels">
			<wsdl:input message="tns:DeletePubChannelsRequest"/>
			<wsdl:output message="tns:DeletePubChannelsResponse"/>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyPubChannels">
					<wsdl:input message="tns:CopyPubChannelsRequest"/>
					<wsdl:output message="tns:CopyPubChannelsResponse"/>
				</wsdl:operation>
		-->

		<!--************* ISSUE - OPERATIONS *****************-->
		<wsdl:operation name="CreateIssues">
			<wsdl:input message="tns:CreateIssuesRequest"/>
			<wsdl:output message="tns:CreateIssuesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetIssues">
			<wsdl:input message="tns:GetIssuesRequest"/>
			<wsdl:output message="tns:GetIssuesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyIssues">
			<wsdl:input message="tns:ModifyIssuesRequest"/>
			<wsdl:output message="tns:ModifyIssuesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteIssues">
			<wsdl:input message="tns:DeleteIssuesRequest"/>
			<wsdl:output message="tns:DeleteIssuesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="CopyIssues">
			<wsdl:input message="tns:CopyIssuesRequest"/>
			<wsdl:output message="tns:CopyIssuesResponse"/>
		</wsdl:operation>

		<!--************* EDITION - OPERATIONS *****************-->
		<wsdl:operation name="CreateEditions">
			<wsdl:input message="tns:CreateEditionsRequest"/>
			<wsdl:output message="tns:CreateEditionsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetEditions">
			<wsdl:input message="tns:GetEditionsRequest"/>
			<wsdl:output message="tns:GetEditionsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyEditions">
			<wsdl:input message="tns:ModifyEditionsRequest"/>
			<wsdl:output message="tns:ModifyEditionsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteEditions">
			<wsdl:input message="tns:DeleteEditionsRequest"/>
			<wsdl:output message="tns:DeleteEditionsResponse"/>
		</wsdl:operation>

		<!--************* SECTION - OPERATIONS *****************-->
		<wsdl:operation name="CreateSections">
			<wsdl:input message="tns:CreateSectionsRequest"/>
			<wsdl:output message="tns:CreateSectionsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetSections">
			<wsdl:input message="tns:GetSectionsRequest"/>
			<wsdl:output message="tns:GetSectionsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifySections">
			<wsdl:input message="tns:ModifySectionsRequest"/>
			<wsdl:output message="tns:ModifySectionsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteSections">
			<wsdl:input message="tns:DeleteSectionsRequest"/>
			<wsdl:output message="tns:DeleteSectionsResponse"/>
		</wsdl:operation>

		<!--************* STATUS - OPERATIONS *****************-->
		<wsdl:operation name="CreateStatuses">
			<wsdl:input message="tns:CreateStatusesRequest"/>
			<wsdl:output message="tns:CreateStatusesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetStatuses">
			<wsdl:input message="tns:GetStatusesRequest"/>
			<wsdl:output message="tns:GetStatusesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyStatuses">
			<wsdl:input message="tns:ModifyStatusesRequest"/>
			<wsdl:output message="tns:ModifyStatusesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteStatuses">
			<wsdl:input message="tns:DeleteStatusesRequest"/>
			<wsdl:output message="tns:DeleteStatusesResponse"/>
		</wsdl:operation>

		<!--************* ACCESS PROFILES - OPERATIONS *****************-->
		<wsdl:operation name="CreateAccessProfiles">
			<wsdl:input message="tns:CreateAccessProfilesRequest"/>
			<wsdl:output message="tns:CreateAccessProfilesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetAccessProfiles">
			<wsdl:input message="tns:GetAccessProfilesRequest"/>
			<wsdl:output message="tns:GetAccessProfilesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyAccessProfiles">
			<wsdl:input message="tns:ModifyAccessProfilesRequest"/>
			<wsdl:output message="tns:ModifyAccessProfilesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteAccessProfiles">
			<wsdl:input message="tns:DeleteAccessProfilesRequest"/>
			<wsdl:output message="tns:DeleteAccessProfilesResponse"/>
		</wsdl:operation>

		<!--************* USER AUTHORIZATIONS - OPERATIONS *****************-->
		<wsdl:operation name="CreateWorkflowUserGroupAuthorizations">
			<wsdl:input message="tns:CreateWorkflowUserGroupAuthorizationsRequest"/>
			<wsdl:output message="tns:CreateWorkflowUserGroupAuthorizationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetWorkflowUserGroupAuthorizations">
			<wsdl:input message="tns:GetWorkflowUserGroupAuthorizationsRequest"/>
			<wsdl:output message="tns:GetWorkflowUserGroupAuthorizationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyWorkflowUserGroupAuthorizations">
			<wsdl:input message="tns:ModifyWorkflowUserGroupAuthorizationsRequest"/>
			<wsdl:output message="tns:ModifyWorkflowUserGroupAuthorizationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteWorkflowUserGroupAuthorizations">
			<wsdl:input message="tns:DeleteWorkflowUserGroupAuthorizationsRequest"/>
			<wsdl:output message="tns:DeleteWorkflowUserGroupAuthorizationsResponse"/>
		</wsdl:operation>

		<!--************* BRAND AUTHORIZATIONS - OPERATIONS *****************-->
		<wsdl:operation name="CreatePublicationAdminAuthorizations">
			<wsdl:input message="tns:CreatePublicationAdminAuthorizationsRequest"/>
			<wsdl:output message="tns:CreatePublicationAdminAuthorizationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetPublicationAdminAuthorizations">
			<wsdl:input message="tns:GetPublicationAdminAuthorizationsRequest"/>
			<wsdl:output message="tns:GetPublicationAdminAuthorizationsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeletePublicationAdminAuthorizations">
			<wsdl:input message="tns:DeletePublicationAdminAuthorizationsRequest"/>
			<wsdl:output message="tns:DeletePublicationAdminAuthorizationsResponse"/>
		</wsdl:operation>

		<!--************* ROUTING RULES - OPERATIONS *****************-->
		<wsdl:operation name="CreateRoutings">
			<wsdl:input message="tns:CreateRoutingsRequest"/>
			<wsdl:output message="tns:CreateRoutingsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetRoutings">
			<wsdl:input message="tns:GetRoutingsRequest"/>
			<wsdl:output message="tns:GetRoutingsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyRoutings">
			<wsdl:input message="tns:ModifyRoutingsRequest"/>
			<wsdl:output message="tns:ModifyRoutingsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteRoutings">
			<wsdl:input message="tns:DeleteRoutingsRequest"/>
			<wsdl:output message="tns:DeleteRoutingsResponse"/>
		</wsdl:operation>

		<!--************* TEMPLATE ACCESS RULES DIALOG - OPERATIONS *****************-->
		<wsdl:operation name="AddTemplateObjects">
			<wsdl:input message="tns:AddTemplateObjectsRequest"/>
			<wsdl:output message="tns:AddTemplateObjectsResponse"/>
		</wsdl:operation>

		<wsdl:operation name="GetTemplateObjects">
			<wsdl:input message="tns:GetTemplateObjectsRequest"/>
			<wsdl:output message="tns:GetTemplateObjectsResponse"/>
		</wsdl:operation>

		<wsdl:operation name="RemoveTemplateObjects">
			<wsdl:input message="tns:RemoveTemplateObjectsRequest"/>
			<wsdl:output message="tns:RemoveTemplateObjectsResponse"/>
		</wsdl:operation>

		<!-- ??? <<< MUTATION POINT >>> ??? -->

		<!--************* WORFLOW DIALOG - OPERATIONS *****************-->

		<!--************* NAMED QUERY - OPERATIONS *****************-->

		<!--************* META DATA - OPERATIONS *****************-->

		<!--************* OPERATION LOG - OPERATIONS *****************-->

		<!--************* MESSAGE LOG - OPERATIONS *****************-->

		<!--************* AUTOCOMPLETE TERMENTITIES - OPERATIONS *****************-->
		<wsdl:operation name="CreateAutocompleteTermEntities">
			<wsdl:input message="tns:CreateAutocompleteTermEntitiesRequest"/>
			<wsdl:output message="tns:CreateAutocompleteTermEntitiesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetAutocompleteTermEntities">
			<wsdl:input message="tns:GetAutocompleteTermEntitiesRequest"/>
			<wsdl:output message="tns:GetAutocompleteTermEntitiesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyAutocompleteTermEntities">
			<wsdl:input message="tns:ModifyAutocompleteTermEntitiesRequest"/>
			<wsdl:output message="tns:ModifyAutocompleteTermEntitiesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteAutocompleteTermEntities">
			<wsdl:input message="tns:DeleteAutocompleteTermEntitiesRequest"/>
			<wsdl:output message="tns:DeleteAutocompleteTermEntitiesResponse"/>
		</wsdl:operation>

		<!--************* AUTOCOMPLETE TERMS - OPERATIONS *****************-->
		<wsdl:operation name="CreateAutocompleteTerms">
			<wsdl:input message="tns:CreateAutocompleteTermsRequest"/>
			<wsdl:output message="tns:CreateAutocompleteTermsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetAutocompleteTerms">
			<wsdl:input message="tns:GetAutocompleteTermsRequest"/>
			<wsdl:output message="tns:GetAutocompleteTermsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ModifyAutocompleteTerms">
			<wsdl:input message="tns:ModifyAutocompleteTermsRequest"/>
			<wsdl:output message="tns:ModifyAutocompleteTermsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteAutocompleteTerms">
			<wsdl:input message="tns:DeleteAutocompleteTermsRequest"/>
			<wsdl:output message="tns:DeleteAutocompleteTermsResponse"/>
		</wsdl:operation>


	</wsdl:portType>


	<!-- >>>>>>>>>>>>>>>>>>>>>>>>>> BINDINGS  <<<<<<<<<<<<<<<<<<<<<<<<<< -->

	<wsdl:binding name="SmartConnectionAdminBinding" type="tns:SmartConnectionAdminPort">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>


		<!--************* LOGON/LOGOFF - BINDINGS *****************-->

		<wsdl:operation name="LogOn">
			<soap:operation soapAction="urn:SmartConnectionAdmin#LogOn"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="LogOff">
			<soap:operation soapAction="urn:SmartConnectionAdmin#LogOff"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>


		<!--************* USER - BINDINGS *****************-->
		<wsdl:operation name="CreateUsers">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateUsers"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetUsers">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetUsers"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyUsers">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyUsers"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteUsers">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteUsers"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyUsers">
					<soap:operation soapAction="urn:SmartConnectionAdmin#CopyUsers"/>
					<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
					<wsdl:output> <soap:body use="literal"/> </wsdl:output>
				</wsdl:operation>
		-->

		<!--************* USER GROUP - BINDINGS *****************-->
		<wsdl:operation name="CreateUserGroups">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateUserGroups"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetUserGroups">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetUserGroups"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyUserGroups">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyUserGroups"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyUserGroups">
					<soap:operation soapAction="urn:SmartConnectionAdmin#CopyUserGroups"/>
					<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
					<wsdl:output> <soap:body use="literal"/> </wsdl:output>
				</wsdl:operation>
		-->
		<wsdl:operation name="DeleteUserGroups">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteUserGroups"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>


		<!--************* MEMBERSHIP - BINDINGS *****************-->
		<wsdl:operation name="AddUsersToGroup">
			<soap:operation soapAction="urn:SmartConnectionAdmin#AddUsersToGroup"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="RemoveUsersFromGroup">
			<soap:operation soapAction="urn:SmartConnectionAdmin#RemoveUsersFromGroup"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="AddGroupsToUser">
			<soap:operation soapAction="urn:SmartConnectionAdmin#AddGroupsToUser"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="RemoveGroupsFromUser">
			<soap:operation soapAction="urn:SmartConnectionAdmin#RemoveGroupsFromUser"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* PUBLICATION - BINDINGS *****************-->
		<wsdl:operation name="CreatePublications">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreatePublications"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetPublications">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetPublications"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyPublications">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyPublications"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeletePublications">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeletePublications"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyPublications">
					<soap:operation soapAction="urn:SmartConnectionAdmin#CopyPublications"/>
					<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
					<wsdl:output> <soap:body use="literal"/> </wsdl:output>
				</wsdl:operation>
		-->

		<!--************* PUBCHANNEL - BINDINGS *****************-->
		<wsdl:operation name="CreatePubChannels">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreatePubChannels"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetPubChannels">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetPubChannels"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyPubChannels">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyPubChannels"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeletePubChannels">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeletePubChannels"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<!--
				<wsdl:operation name="CopyPubChannels">
					<soap:operation soapAction="urn:SmartConnectionAdmin#CopyPubChannels"/>
					<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
					<wsdl:output> <soap:body use="literal"/> </wsdl:output>
				</wsdl:operation>
		-->

		<!--************* ISSUE - BINDINGS *****************-->
		<wsdl:operation name="CreateIssues">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateIssues"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetIssues">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetIssues"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyIssues">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyIssues"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteIssues">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteIssues"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="CopyIssues">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CopyIssues"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* EDITION - BINDINGS *****************-->
		<wsdl:operation name="CreateEditions">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateEditions"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetEditions">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetEditions"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyEditions">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyEditions"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteEditions">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteEditions"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* SECTION - BINDINGS *****************-->
		<wsdl:operation name="CreateSections">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateSections"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetSections">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetSections"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifySections">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifySections"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteSections">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteSections"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* STATUS - BINDINGS *****************-->
		<wsdl:operation name="CreateStatuses">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateStatuses"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetStatuses">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetStatuses"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyStatuses">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyStatuses"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteStatuses">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteStatuses"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* ACCESS PROFILES - BINDINGS *************-->
		<wsdl:operation name="CreateAccessProfiles">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateAccessProfiles"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetAccessProfiles">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetAccessProfiles"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyAccessProfiles">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyAccessProfiles"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteAccessProfiles">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteAccessProfiles"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* USER AUTHORIZATIONS - BINDINGS *****************-->
		<wsdl:operation name="CreateWorkflowUserGroupAuthorizations">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateWorkflowUserGroupAuthorizations"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetWorkflowUserGroupAuthorizations">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetWorkflowUserGroupAuthorizations"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyWorkflowUserGroupAuthorizations">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyWorkflowUserGroupAuthorizations"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteWorkflowUserGroupAuthorizations">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteWorkflowUserGroupAuthorizations"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* BRAND AUTHORIZATIONS - BINDINGS *****************-->
		<wsdl:operation name="CreatePublicationAdminAuthorizations">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreatePublicationAdminAuthorizations"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetPublicationAdminAuthorizations">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetPublicationAdminAuthorizations"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeletePublicationAdminAuthorizations">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeletePublicationAdminAuthorizations"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* ROUTING RULES - BINDINGS *****************-->
		<wsdl:operation name="CreateRoutings">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateRoutings"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyRoutings">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyRoutings"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetRoutings">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetRoutings"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteRoutings">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteRoutings"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!--************* TEMPLATE ACCESS RULES - BINDINGS *****************-->
		<wsdl:operation name="AddTemplateObjects">
			<soap:operation soapAction="urn:SmartConnectionAdmin#AddTemplateObjects"/>
			<wsdl:input> <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<wsdl:operation name="GetTemplateObjects">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetTemplateObjects"/>
			<wsdl:input> <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<wsdl:operation name="RemoveTemplateObjects">
			<soap:operation soapAction="urn:SmartConnectionAdmin#RemoveTemplateObjects"/>
			<wsdl:input> <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

		<!-- ??? <<< MUTATION POINT >>> ??? -->

		<!--************* WORFLOW DIALOG - BINDINGS *****************-->

		<!--************* NAMED QUERY - BINDINGS *****************-->

		<!--************* META DATA - BINDINGS *****************-->

		<!--************* OPERATION LOG - BINDINGS *****************-->

		<!--************* MESSAGE LOG - BINDINGS *****************-->

		<!--************* AUTOCOMPLETE TERMENTITIES - BINDINGS *****************-->
		<wsdl:operation name="CreateAutocompleteTermEntities">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateAutocompleteTermEntities"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetAutocompleteTermEntities">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetAutocompleteTermEntities"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyAutocompleteTermEntities">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyAutocompleteTermEntities"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteAutocompleteTermEntities">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteAutocompleteTermEntities"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>


		<!--************* AUTOCOMPLETE TERMS - BINDINGS *****************-->
		<wsdl:operation name="CreateAutocompleteTerms">
			<soap:operation soapAction="urn:SmartConnectionAdmin#CreateAutocompleteTerms"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetAutocompleteTerms">
			<soap:operation soapAction="urn:SmartConnectionAdmin#GetAutocompleteTerms"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ModifyAutocompleteTerms">
			<soap:operation soapAction="urn:SmartConnectionAdmin#ModifyAutocompleteTerms"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteAutocompleteTerms">
			<soap:operation soapAction="urn:SmartConnectionAdmin#DeleteAutocompleteTerms"/>
			<wsdl:input>  <soap:body use="literal"/> </wsdl:input>
			<wsdl:output> <soap:body use="literal"/> </wsdl:output>
		</wsdl:operation>

	</wsdl:binding>


	<!-- >>>>>>>>>>>>>>>>>>>>>>>>>>> SERVICE  <<<<<<<<<<<<<<<<<<<<<<<<<< -->

	<wsdl:service name="SmartConnectionAdminService">
		<wsdl:documentation>Enterprise Server administration service</wsdl:documentation>
		<wsdl:port name="SmartConnectionAdminPort" binding="tns:SmartConnectionAdminBinding">
			<soap:address location="http://127.0.0.1/SCEnterprise/adminindex.php" />
		</wsdl:port>
	</wsdl:service>

</wsdl:definitions>
