<?xml version="1.0"?>
<!-- Confidential, Copyright WoodWing Software BV, all rights reserved -->
<!-- Enterprise Server workflow WSDL -->

<definitions 
		name="SmartConnection" 
		targetNamespace="urn:SmartConnection" 
		xmlns:tns="urn:SmartConnection" 
		xmlns="http://schemas.xmlsoap.org/wsdl/" 
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
		xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
		xmlns:content="http://schemas.xmlsoap.org/ws/2002/04/content-type/"
		xmlns:dime="http://schemas.xmlsoap.org/ws/2002/04/dime/wsdl/"
		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
		xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/">

	<types xmlns="http://schemas.xmlsoap.org/wsdl/">
		<schema
			xmlns="http://www.w3.org/2001/XMLSchema" 
			targetNamespace="urn:SmartConnection" 
			elementFormDefault="unqualified"
			attributeFormDefault="unqualified">

			<!-- Any sequence of Unicode (UTF-8) characters. -->
			<simpleType name="String">
				<restriction base="string">
				</restriction>
			</simpleType>

			<!-- The type of workflow object. -->
			<simpleType name="ObjectType">
				<restriction base="string">
					<enumeration value=""/>    <!-- empty means: 'for all object types' -->
					<enumeration value="Article"/>
					<enumeration value="ArticleTemplate"/>
					<enumeration value="Layout"/>
					<enumeration value="LayoutTemplate"/>
					<enumeration value="Image"/>
					<enumeration value="Advert"/>
					<enumeration value="AdvertTemplate"/>
					<enumeration value="Plan"/> 
					<enumeration value="Audio"/> <!-- v5.0 feature -->
					<enumeration value="Video"/> <!-- v5.0 feature -->
					<enumeration value="Library"/> <!-- v5.0 feature -->
					<enumeration value="Dossier"/> <!-- v5.0 feature -->
					<enumeration value="DossierTemplate"/> <!-- v6.1 feature -->
					<enumeration value="LayoutModule"/> <!-- v6.0 feature -->
					<enumeration value="LayoutModuleTemplate"/> <!-- v6.0 feature -->
					<enumeration value="Task"/> <!-- v6.0 feature -->
					<enumeration value="Hyperlink"/> <!-- v6.0 feature -->
					<enumeration value="Presentation"/> <!-- v8.0 feature -->
					<enumeration value="Archive"/>      <!-- v8.0 feature -->
                    <enumeration value="Spreadsheet"/> <!-- v8.2 feature -->
					<enumeration value="Other"/> <!-- For future usage -->
                    <enumeration value="PublishForm"/> <!-- v9.0 feature -->
                    <enumeration value="PublishFormTemplate"/> <!-- v9.0 feature -->
				</restriction>
			</simpleType>
			
			<simpleType name="PropertyType">
				<restriction base="string">
					<enumeration value="string"/>
					<enumeration value="multistring"/> <!-- Allows commas used for separated values such as "keywords" -->
					<enumeration value="multiline"/> <!-- Allows line-endings used for multi-line text box such as "comments" -->
					<enumeration value="bool"/>
					<enumeration value="int"/>
					<enumeration value="double"/>
					<enumeration value="date"/>
					<enumeration value="datetime"/>
					<enumeration value="list"/> <!-- Allows single value selection from option list such as "publication -->
					<enumeration value="multilist"/> <!-- Allows multiple value selection from option list -->
					<enumeration value="fileselector"/> <!-- v9.0: Container widget that allows users to pick a file. Contains a "file" widget and optionally other widgets. -->
					<enumeration value="file"/> <!-- v9.0: Widget that represents a selected file, such as a thumbnail. -->
					<enumeration value="articlecomponentselector"/> <!-- v9.0: Container widget that allows users to pick a text component of an article. Contains an "articlecomponent" widget and optionally other widgets. -->
					<enumeration value="articlecomponent"/> <!-- v9.0: Widget that represents a selected file, such as a thumbnail. -->
                    <enumeration value="button"/> <!-- v9.0: Widget type that is used in the ButtonBar stucture. -->
				</restriction>
			</simpleType>
			
			<simpleType name="OperationType">
				<restriction base="string">
					<enumeration value="&lt;"/>
					<enumeration value=">"/>
					<enumeration value="&lt;="/>
					<enumeration value=">="/>	<!-- v4.2: Greater Than or Equal -->					
					<enumeration value="="/>
					<enumeration value="!="/>
					<enumeration value="contains"/>
					<enumeration value="starts"/>
					<enumeration value="ends"/>
					<enumeration value="within"/>	<!-- v5.0: Time interval -->
					<enumeration value="between"/>	<!-- v8.0: Between dates -->
				</restriction>
			</simpleType>

			<simpleType name="PubChannelType">
				<restriction base="string">
					<enumeration value="print"/>
					<enumeration value="web"/>
					<enumeration value="sms"/>
					<enumeration value="dps"/>    <!-- v7.5 Digital Publishing System -->
					<enumeration value="dps2"/>   <!-- v9.6 Adobe DPS (2015) integration -->
					<enumeration value="other"/>
				</restriction>
			</simpleType>

			<simpleType name="Action">
				<restriction base="string">
					<enumeration value=""/>    <!-- empty means: 'for all action types' -->
					<enumeration value="Create"/> <!-- Create or Save As -->
					<enumeration value="CheckIn"/> <!-- CheckIn or Save Version -->
					<enumeration value="SendTo"/>
					<enumeration value="CopyTo"/>
					<enumeration value="SetProperties"/>
					<enumeration value="Query"/>
					<enumeration value="Preview"/>	<!-- v6.1 properties to show with preview -->
					<enumeration value="PublishDossier"/>  <!-- v7.0 new dialog action to show dialog before publish -->
					<enumeration value="UpdateDossier"/>  <!-- v7.0 new dialog action to show dialog before update -->
					<enumeration value="UnPublishDossier"/>  <!-- v7.0 new dialog action to show dialog before unpublish -->
					<enumeration value="SetPublishProperties"/> <!-- v9.0 new action to support the Multi Channel Publishing feature -->
				</restriction>
			</simpleType>
			
			<complexType name="AttachmentContent">
				<simpleContent>
					<restriction base="soap-enc:base64Binary">
						<annotation>
							<appinfo>
								<content:mediaType value="application/octet-stream"/>
							</appinfo>
						</annotation>
					</restriction>
				</simpleContent>
			</complexType>
			
			<simpleType name="MessageType">
				<restriction base="string">
					<enumeration value="system"/>  <!-- Message generated by system to be shown in GUI -->
					<enumeration value="client"/>  <!-- Client application specific message to be shown in GUI -->
					<enumeration value="user"/>    <!-- Message from user to be shown in GUI -->
					<enumeration value="sticky"/>  <!-- v4.2: Sticky Note -->
					<enumeration value="reply"/>   <!-- v8.0: Reply on other message -->
				</restriction>
			</simpleType>
			
			<simpleType name="MessageLevel">
				<restriction base="string">
					<enumeration value=""/>        <!-- Empty is used for Sticky Notes -->
					<enumeration value="Info"/>    <!-- Information message of normal operation  -->
					<enumeration value="Warning"/> <!-- Warning message of suspicious operation -->
					<enumeration value="Error"/>   <!-- Error message of bad operation -->
				</restriction>
			</simpleType>

			<!--
				v8.0: Simple workflow statuses followed by messages.
			-->			
			<simpleType name="MessageStatus">
				<restriction base="string">
					<enumeration value="None"/>
					<enumeration value="Accepted"/>
					<enumeration value="Cancelled"/>
					<enumeration value="Completed"/>
					<enumeration value="Rejected"/>
				</restriction>
			</simpleType>
			
			<!-- RGB color definition in hexadecimal format (6 digits). For example: A3BF65 -->
			<simpleType name="Color">
				<restriction base="xsd:string">
					<pattern value="unsignedByte-unsignedByte-unsignedByte" />
				</restriction>
			</simpleType>
			
			<!-- Functional file types. -->
			<simpleType name="RenditionType">
				<restriction base="string">
					<enumeration value="none"/>
					<enumeration value="thumb"/>
					<enumeration value="preview"/>
					<enumeration value="placement"/>
					<enumeration value="native"/>
					<enumeration value="output"/>
					<enumeration value="trailer"/>
				</restriction>
			</simpleType>
			
			<simpleType name="RelationType">
				<restriction base="string">
					<enumeration value="Placed"/>
					<enumeration value="Planned"/>
					<enumeration value="Candidate"/> <!-- future -->
					<enumeration value="Contained"/> <!-- v5.0: Any object can be contained with in a Dossier -->
					<enumeration value="Related"/> 	 <!-- v6.0: Two objects could be related, for example 2 related dossiers -->
                    <enumeration value="InstanceOf"/>   <!-- v9.0: Used to denote that an object is used as a container. -->
				</restriction>
			</simpleType>

			<simpleType name="OnlineStatusType">
				<restriction base="string">
					<enumeration value="TakeOffline"/>	 <!-- Take document (home) to work disconnected. Might fail; e.g. when user has no rights. -->
					<enumeration value="TakeOnline"/>	  <!-- Bring document back to server for online usage. Might fail; e.g. when deadline has expired.  -->
				</restriction>
			</simpleType>

			<!--
				Some instances (such as pages) can be planned or produced or both. 
				Planned instances are requests for production system to get synchronized.
			-->
			<simpleType name="InstanceType">
				<restriction base="string">
					<enumeration value="Production"/>  <!-- Created/initiated by production system -->
					<enumeration value="Planning"/>    <!-- Created/initiated by planning system -->
				</restriction>
			</simpleType>

			<!--
				v7.6: Preview type used in PreviewArticleAtWorkspace to indicate what kind of preview is requested.	
			-->
			<simpleType name="PreviewType">
				<restriction base="string">
					<enumeration value="page"/>
					<enumeration value="spread"/>
				</restriction>
			</simpleType>

			<!--
				v8.0: Filter areas applied to object search. Introduced to support Trash Can feature.
			-->			
			<simpleType name="AreaType">
				<restriction base="string">
					<enumeration value="Workflow"/>	<!-- invoke workflow objects only -->
					<enumeration value="Trash" />	<!-- invoke deleted objects only (trash can) --> 
				</restriction>
			</simpleType>

			<!--
				v8.0: Empty-string definition, used for empty/undefined Deadlines.
			-->
			<simpleType name="emptyString">
				<restriction base="string">
					<length value="0"/>
				</restriction>
			</simpleType>

			<!--
				v8.0: Date-time definition, used for Deadlines. When no date-time is defined, an empty string is allowed.
			-->
			<simpleType name="dateTimeOrEmpty">
				<union memberTypes="dateTime tns:emptyString"/>
			</simpleType>

			<!--
				v9.7: Defines what kind of content can be placed in a frame.
			-->			
			<simpleType name="FrameType">
				<restriction base="string">
					<enumeration value=""/>           <!-- Can not place any content into frame. -->
					<enumeration value="unassigned"/> <!-- Can place text or graphic into frame. -->
					<enumeration value="text"/>       <!-- Can place article or spreadsheet content. -->
					<enumeration value="graphic"/>    <!-- Can place image content. --> 
				</restriction>
			</simpleType>

<!--************* COMPLEX TYPES *****************-->
			<!--
				Supported Feature keys. See SERVERFEATURES setting at configserver.php for supported options.
			-->
			<complexType name="Feature">
				<all>
					<element name="Key" type="xsd:string"/>						<!-- v4.2: changed into string. Restricted name of feature -->
					<element name="Value" nillable="true" type="xsd:string"/>	<!-- Optional value: only used for Key-Value settings -->
				</all>
			</complexType>

			<complexType name="BasicMetaData">
				<all>
					<element name="ID"				type="xsd:string"			nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="DocumentID"		type="xsd:string"			nillable="true"/>	<!-- XMP document ID - nillable since v4.2 -->
					<element name="Name"			type="xsd:string"			nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="Type"			type="tns:ObjectType"		nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="Publication"		type="tns:Publication"		nillable="true"/>	<!-- v6.0: Publication that ‘owns’ the object -->
					<element name="Category"		type="tns:Category"			nillable="true"/>	<!-- v6.0: Category of the object, formerly named Section -->
					<element name="ContentSource"	type="xsd:string"			nillable="true"/>	<!-- v6.0: Content provider, this is technical thing, for example DAM system ID -->
				</all>
			</complexType>
			<complexType name="RightsMetaData">
				<all>
					<element name="CopyrightMarked" type="xsd:boolean"			nillable="true"/>	<!-- InDesign FileInfo dialog, description tab-->
					<element name="Copyright"		type="xsd:string"			nillable="true"/>	<!-- InDesign FileInfo dialog, description tab-->
					<element name="CopyrightURL"	type="xsd:string"			nillable="true"/>	<!-- InDesign FileInfo dialog, description tab-->
				</all>
			</complexType>
			<complexType name="SourceMetaData">
				<all>
					<element name="Credit" 			type="xsd:string"			nillable="true"/>	<!-- InDesign FileInfo dialog, origin tab-->
					<element name="Source" 			type="xsd:string"			nillable="true"/>	<!-- InDesign FileInfo dialog, origin tab-->
					<element name="Author" 			type="xsd:string"			nillable="true"/>	<!-- InDesign FileInfo dialog, description tab-->
				</all>
			</complexType>
			<complexType name="ContentMetaData">
				<all>
					<element name="Description" 	type="xsd:string"			nillable="true"/>	<!-- InDesign FileInfo dialog, description tab-->
					<element name="DescriptionAuthor" type="xsd:string"			nillable="true"/>	<!-- InDesign FileInfo dialog, description tab-->
					<element name="Keywords" 		type="tns:ArrayOfString"	nillable="true"/>	<!-- InDesign FileInfo dialog, description tab-->
					<element name="Slugline" 		type="xsd:string"			nillable="true"/>	<!-- Contents snippet -->
					<element name="Format" 			type="xsd:string"			nillable="true"/>	<!-- nillable since v4.2 - Mime filetype  -->
					<element name="Columns" 		type="xsd:int"				nillable="true"/>
					<element name="Width" 			type="xsd:double"			nillable="true"/>	<!-- Width in points for Images -->	
					<element name="Height" 			type="xsd:double"			nillable="true"/>	<!-- Height in points for Images -->
					<element name="Dpi" 			type="xsd:unsignedInt"		nillable="true"/>	<!-- Dots per inch for images -->
					<element name="LengthWords"		type="xsd:unsignedInt"		nillable="true"/>	<!-- Articles only -->
					<element name="LengthChars"		type="xsd:unsignedInt"		nillable="true"/>	<!-- Articles only -->
					<element name="LengthParas"		type="xsd:unsignedInt"		nillable="true"/>	<!-- Articles only -->
					<element name="LengthLines"		type="xsd:unsignedInt"		nillable="true"/>	<!-- Articles only -->
					<element name="PlainContent"	type="xsd:string"			nillable="true"/>	<!-- Articles only -->
					<element name="FileSize"		type="xsd:unsignedInt"		nillable="true"/>	<!-- Articles only -->
					<element name="ColorSpace"		type="xsd:string"			nillable="true"/>	<!-- Bitmap, Grayscale, Indexed, RGB, CMYK, Multichannel, Duotone, Lab (Only for Image, Video, Audio, Advert and Layout objects) -->
					<element name="HighResFile"		type="xsd:string"			nillable="true"/>	<!-- Relative file location (to HighResStore feature) of highres advert/image output. Use foreward slashes. -->
					<element name="Encoding"		type="xsd:string"			nillable="true"/>	<!-- Audio/Video only -->
					<element name="Compression"		type="xsd:string"			nillable="true"/>	<!-- Audio/Video/Image only -->
					<element name="KeyFrameEveryFrames"	type="xsd:unsignedInt"	nillable="true"/>	<!-- Audio/Video only -->
					<element name="Channels"		type="xsd:string"			nillable="true"/>	<!-- Audio/Video only -->
					<element name="AspectRatio"		type="xsd:string"			nillable="true"/>	<!-- Video only -->
				</all>
			</complexType>
			<complexType name="WorkflowMetaData">
				<all>
					<element name="Deadline"		type="tns:dateTimeOrEmpty"		nillable="true"/>
					<element name="Urgency" 		type="xsd:string"							nillable="true"/>
					<element name="Modifier" 		type="xsd:string"							nillable="true"/>	<!-- At creation, will be original modifier, if known -->
					<element name="Modified" 		type="xsd:dateTime"						nillable="true"/>	<!-- At creation, will be original modified, if known -->
					<element name="Creator" 		type="xsd:string"							nillable="true"/>	<!-- At creation, will be original creator, if known -->
					<element name="Created" 		type="xsd:dateTime"						nillable="true"/>	<!-- At creation, will be original created, if known -->
					<element name="Comment" 		type="xsd:string"							nillable="true"/>
					<element name="State" 			type="tns:State"							nillable="true"/>
					<element name="RouteTo"			type="xsd:string"							nillable="true"/>
					<element name="LockedBy"		type="xsd:string"							nillable="true"/>			
					<element name="Version"			type="xsd:string"							nillable="true"/>			
					<element name="DeadlineSoft"	type="tns:dateTimeOrEmpty"	nillable="true"/>	<!-- v5.0 -->
					<element name="Rating"			type="xsd:unsignedInt"				nillable="true"/>	<!-- v6.0: Object's rating, 0 means not rated -->
					<element name="Deletor"			type="xsd:string"							nillable="true"/>	<!-- v8.0 -->
					<element name="Deleted"			type="xsd:dateTime"						nillable="true"/>	<!-- v8.0 -->
				</all>
			</complexType>
			
			<!-- Extra (custom) meta data on top of standard set. -->
			<complexType name="ExtraMetaData">
				<all>
					<element name="Property" type="xsd:string"/>
					<element name="Values" type="tns:ArrayOfString"/>
				</all>
			</complexType>
			<complexType name="ArrayOfExtraMetaData">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ExtraMetaData[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="PlacementTile">	
				<all>
					<element name="PageSequence" type="xsd:unsignedInt"/>   <!-- Page this tile part of. Location details are relative to the left top of this page -->
					<element name="Left"         type="xsd:double"/>        <!-- Position in points (pt) relative to the left top of the page -->
					<element name="Top"          type="xsd:double"/>
					<element name="Width"        type="xsd:double"/>
					<element name="Height"       type="xsd:double"/>
				</all>
			</complexType>
			
			<complexType name="ArrayOfPlacementTile">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PlacementTile[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Placement">	
				<all>
					<element name="Page"         type="xsd:unsignedInt" nillable="true"/> <!-- DEPRECATED; better use PageSequence. On which page (OrderNumber) the object is placed -->
					<element name="Element"      type="xsd:string" nillable="true"/>      <!-- Article consist of one or more text elements -->
					<element name="ElementID"    type="xsd:string"/>                      <!-- Each element has a Unique ID -->
					<element name="FrameOrder"   type="xsd:unsignedInt"/>                 <!-- An text element flows through 1 or more frames -->
					<element name="FrameID"      type="xsd:string" nillable="true"/>      <!-- Each frame has a Unique ID. For text frames, this ID refers to the spline frame. For graphic frames, this ID refers to the image item frame (which resides inside the spline frame). Since 9.0 nillable as used for article components placed on PublishForm objects. -->
					<element name="Left"         type="xsd:double"/>                      <!-- Measurements in points (pt); relative bounding box of object placed on layout -->
					<element name="Top"          type="xsd:double"/>
					<element name="Width"        type="xsd:double"/>
					<element name="Height"       type="xsd:double"/>
					<element name="Overset"      type="xsd:double"   nillable="true"/>    <!-- Overset value in pt, negative for underset, 0 for fit, missing if unknown -->
					<element name="OversetChars" type="xsd:int"      nillable="true"/>    <!-- Overset/underset in characters -->
					<element name="OversetLines" type="xsd:int"      nillable="true"/>    <!-- Overset/underset in lines -->
					<element name="Layer"        type="xsd:string"   nillable="true"/>    <!-- InDesign layer name for this placement -->
					<element name="Content"      type="xsd:string"   nillable="true"/>    <!-- Snippet of content for this frame -->
					<element name="Edition"      type="tns:Edition"  nillable="true"/>    <!-- v4.2: Placement can differ per edition. Nil if the same for all editions. -->
					<element name="ContentDx"    type="xsd:double"   nillable="true"/>    <!-- v5.0: Move content relatively to frame (not to page) from left to right in points (pt). Negative for bleed. Zero for no move (default). -->
					<element name="ContentDy"    type="xsd:double"   nillable="true"/>    <!-- v5.0: Move content relatively to frame (not to page) from top to bottom in points (pt). Negative for bleed. Zero for no move (default). -->
					<element name="ScaleX"       type="xsd:double"   nillable="true"/>    <!-- v5.0: Factor to scale content horizontally in its frame. Value 0.15 means 15.2%. Default 100%. Avoid zero. -->
					<element name="ScaleY"       type="xsd:double"   nillable="true"/>    <!-- v5.0: Same but then vertically. -->
					<element name="PageSequence" type="xsd:unsignedInt" nillable="true"/> <!-- v5.0: On which page (seq number in layout) the object is placed for the most part. Starting with 1. Since 9.0 nillable as used for article components placed on PublishForm objects.-->
					<element name="PageNumber"   type="xsd:string"      nillable="true"/>    <!-- v6.0: Human readable page number, could be FrontPage, Sport1 etc. -->
					<element name="Tiles"        type="tns:ArrayOfPlacementTile" nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v7.6: The list of tiles across pages the placement is divided into. Element will be empty when placement is not crossing page boundaries and will be omitted by older clients. --> 
					<element name="FormWidgetId" type="xsd:string"      nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.0: Refers to the SetPublishProperties dialog widget (of a PublishForm) on which the object is placed. -->
					<element name="InDesignArticleIds" type="tns:ArrayOfString" nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.7: UID that refers to one item under InDesignArticles->InDesignArticle->Id -->
					<element name="FrameType"    type="tns:FrameType"   nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.7: Tells what content can be placed; graphic or text. Nil has same meaning as empty string. See FrameType type definition for more info. -->
					<element name="SplineID"     type="xsd:string"      nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.7: Each spline frame has a Unique ID. For text frames, this is the same as FrameID. For graphic frames, this identifies the spline frame (which contains the image item frame). Basically, this frame crops the image on the page. -->
				</all>
			</complexType>

			<!-- v4.2: Article's text compoment -->
			<complexType name="Element">
				<all>
					<element name="ID"		  	type="xsd:string"/>	<!-- Unique id (GUID) -->
					<element name="Name"		type="xsd:string" nillable="true"/>	<!-- Label (e.g. "head", "body") -->
					<element name="LengthWords" type="xsd:unsignedInt" nillable="true" /> <!-- Length of content: Word count. -->
					<element name="LengthChars" type="xsd:unsignedInt" nillable="true" /> <!-- Length of content: Character count. -->
					<element name="LengthParas" type="xsd:unsignedInt" nillable="true" /> <!-- Length of content: Paragraph count. -->
					<element name="LengthLines" type="xsd:unsignedInt" nillable="true" /> <!-- Length of content: Line count. -->
					<element name="Snippet"	 	type="xsd:string"	  nillable="true"/>	<!-- Snippet of content -->
					<element name="Version"	 	type="xsd:string"	  nillable="true"/>	<!-- Version of content -->
					<element name="Content"	 	type="xsd:string"	  nillable="true"/>	<!-- v7.4: Full content of this text component. Is in native format (embedded) as specified at embracing web service data structure. Can only be used in context of SaveArticleInWorkspace. -->
				</all>
			</complexType>
			<complexType name="ArrayOfElement">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Element[]"/>
					</restriction>
				</complexContent>
			</complexType>			
			
			<!-- 
				v9.7: Group of frames/placements on a layout. See the 'Article' pallete in Adobe InDesign. 
				This entity should not be confused with Enterprise Articles, which is a different concept.
				An InDesignArticle may contain any frame on the layout, regardless to which placed object
				it belongs, and may contain frames that are no part of any placed Enterprise object.
				It can be a bundle of any kind, including text frames and graphic frames.
			-->
			<complexType name="InDesignArticle">
				<all>
					<element name="Id"		  	type="xsd:string"/>	<!-- Unique id within the layout (UID) -->
					<element name="Name"		type="xsd:string" nillable="true"/>	<!-- Unique name within the layout. (User can change.) -->
				</all>
			</complexType>
			<complexType name="ArrayOfInDesignArticle">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:InDesignArticle[]"/>
					</restriction>
				</complexContent>
			</complexType>			
			
			<complexType name="Relation">
				<all>
					<element name="Parent"          type="xsd:string"/>
					<element name="Child"           type="xsd:string"           nillable="true"/>
					<element name="Type"            type="tns:RelationType"/>
					<element name="Placements"      type="tns:ArrayOfPlacement" nillable="true"/>
					<element name="ParentVersion"   type="xsd:string"           nillable="true"/>   <!-- The current version of the parent, nil when passed to server -->
					<element name="ChildVersion"    type="xsd:string"           nillable="true"/>   <!-- The current version of the child, nil when passed to server -->
					<element name="Geometry"        type="tns:Attachment"       nillable="true"/>
					<element name="Rating"          type="xsd:unsignedInt"      nillable="true"/>   <!-- v6.0: Rating of the child object in relation to the parent context -->
					<element name="Targets"         type="tns:ArrayOfTarget"    nillable="true"/>   <!-- v6.0: object targets within the parent context -->
					<element name="ParentInfo"      type="tns:ObjectInfo"       nillable="true"/>   <!-- v8.2: Read-only info of parent to enable to user identify the object. Returned in GetObjects response. -->
					<element name="ChildInfo"       type="tns:ObjectInfo"       nillable="true"/>   <!-- v8.2: Read-only info of child to enable to user identify the object. Returned in GetObjects response. -->
					<element name="ObjectLabels"    type="tns:ArrayOfObjectLabel" 
						nillable="true" minOccurs="0" maxOccurs="1"/>                               <!-- v9.1: Labels defined for the dossier (parent) and its contained object. -->
				</all>
			</complexType>
			<complexType name="ArrayOfPlacement">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Placement[]"/>
					</restriction>
				</complexContent>
			</complexType>			
			<complexType name="ArrayOfRelation">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Relation[]"/>
					</restriction>
				</complexContent>
			</complexType>			
			<complexType name="ArrayOfRenditionType">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:RenditionType[]"/>
					</restriction>
				</complexContent>
			</complexType>
			<complexType name="ArrayOfFeature">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Feature[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!--
				Since v4.2, a Message can be in the form of a StickyNote.
				Since v8.0, all StickyNote elements are made nillable, because it is used
				in context of create- and update operations, which have different criteria;
				For create operations, AnchorX, AnchorY and PageSequence are mandatory.
				For update operations, all elements are optional. Only when filled, it gets updated.
			-->
			<complexType name="StickyInfo">
				<all>
					<element name="AnchorX"      nillable="true"    type="xsd:double"/>
					<element name="AnchorY"      nillable="true"    type="xsd:double"/>
					<element name="Left"         nillable="true"    type="xsd:double"/>
					<element name="Top"          nillable="true"    type="xsd:double"/>
					<element name="Width"        nillable="true"    type="xsd:double"/>					
					<element name="Height"       nillable="true"    type="xsd:double"/>					
					<element name="Page"         type="xsd:unsignedInt"
						nillable="true" minOccurs="0" maxOccurs="1"/>
						<!--
							Page tells on which page (PageOrder) the sticky is placed. 
							DEPRECATED since v5.0; use PageSequence instead. 
							Since v8.0 this is made optional so it can be removed in future major version.
						-->
					<element name="Version"      nillable="true"    type="xsd:string"/>      <!-- versioning -->
					<element name="Color"        nillable="true"    type="tns:Color"/>
					<element name="PageSequence" nillable="true"    type="xsd:unsignedInt"/> <!-- v5.0: On which page (Sequence number in layout) the anchor of the sticky note is placed. Starting with 1. -->
				</all>
			</complexType>

			<!-- Mechanism for client to store any kind of client setting which are NOT interpreted by server. -->
			<complexType name="Setting">
				<all>
					<element name="Setting" type="xsd:string"/>
					<element name="Value" type="xsd:string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfSetting">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Setting[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- For messages, the ObjectID -OR- UserID must be given. -->
			<complexType name="Message">
				<all>
					<element name="ObjectID" nillable="true" type="xsd:string"/>  <!-- object to which the message was sent -->
					<element name="UserID" nillable="true" type="xsd:string"/>	<!-- user or group to which the message was sent -->
					<element name="MessageID" nillable="true" type="xsd:string"/> <!-- system wide unique id of the message; generated by server -->
					<element name="MessageType" type="tns:MessageType"/>		  <!-- type tells how to deal with message -->
					<element name="MessageTypeDetail" type="xsd:string"/>		 <!-- pre-defined types such as DesignUpdate, PlanningUpdate, etc -->
					<element name="Message" nillable="true" type="xsd:string"/>				   <!-- message body -->
					<element name="TimeStamp" nillable="true" type="xsd:dateTime"/>			   <!-- time the message was sent -->
					<element name="Expiration" nillable="true" type="xsd:dateTime"/>	   <!-- time the message expires (removed) -->
					<element name="MessageLevel" nillable="true" type="tns:MessageLevel"/> <!-- info, warning or error indicating how to be shown/logged -->
					<element name="FromUser" nillable="true" type="xsd:string"/>		   <!-- user name who sent the message; only used when sent from server to client. -->
					<element name="StickyInfo" nillable="true" type="tns:StickyInfo"/> <!-- v4.2: User for sticky notes -->
					<element name="ThreadMessageID" type="xsd:string"
					         nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0: The message initiating a thread. Mandatory when MessageType is a reply. -->
					<element name="ReplyToMessageID" type="xsd:string"
					         nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0: The predecessor message on which is a reply. Mandatory when MessageType is a reply. -->
					<element name="MessageStatus" type="tns:MessageStatus"
					         nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0: Message workflow. Nil (or left out) means 'None'. -->
					<element name="ObjectVersion" type="xsd:string"
					         nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0: Read-only. The object version when the message was created. -->
				</all>
			</complexType>
			<complexType name="ArrayOfMessage">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Message[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!--
				List of messages enriched with additional information, such as which messages
				are read and which should be deleted. Those messages are either sent (or to be sent)
				to an user or an object. When sent along with a client request, the Messages may or 
				may not be the 'complete' set; In the database there can be more messages than currently 
				sent. And, the read messages (ReadMessageIDs) should refer to IDs that exist in database, 
				but they may be missing in the Messages property. When sent along a server response,
				the Messages are the last set taken from database and the read messages
				(ReadMessageIDs) -are- always referring to existing ones in the Messages property.
				When the user has deleted messages, their IDs are sent in DeleteMessageIDs.
				The DeleteMessageIDs property is only used in client requests, never in server responses.
			-->
			<complexType name="MessageList">
				<all>
					<element name="Messages"         type="tns:ArrayOfMessage" nillable="true"/>
					<element name="ReadMessageIDs"   type="tns:ArrayOfString"  nillable="true"/> <!-- read by any user -->
					<element name="DeleteMessageIDs" type="tns:ArrayOfString"  nillable="true"/> <!-- write only -->
				</all>
			</complexType>
			
			<!--
				Terms translation structure to allow terms to be translated to correct UI terminology, 
				like Publication to anything. Typically this is static implemented on server
			-->
			<complexType name="Term">
				<all>
					<element name="Term" type="xsd:string"/>
					<element name="Translation" type="xsd:string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfTerm">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Term[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- 
				User / UserGroup

				The client has not interest to know relation between users and groups. These lists  
				are purely used to allow user to select any.
			-->
			<complexType name="User">
				<all>
					<element name="UserID" type="xsd:string"/>
					<element name="FullName" type="xsd:string"/>
					<element name="TrackChangesColor" type="tns:Color"/>  <!-- v8.0: User's track changes color in RGB format (without # prefix) -->
				</all>
			</complexType>
			<complexType name="UserGroup">
				<all>
					<element name="Name" type="xsd:string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfUser">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:User[]"/>
					</restriction>
				</complexContent>
			</complexType>
			<complexType name="ArrayOfUserGroup">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:UserGroup[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- 
				Information about the application server that can be selected by user to logon.
			-->
			<complexType name="ServerInfo">
				<all>
					<element name="Name" type="xsd:string"/>				<!-- Server name -->
					<element name="URL" type="xsd:string"/>					<!-- URL for subsequent calls, can be different than logon URL! -->
					<element name="Developer" type="xsd:string"/>			<!-- Company who implemented server -->
					<element name="Implementation" type="xsd:string"/>		<!-- Name of this specific implementation -->
					<element name="Technology" type="xsd:string"/>			<!-- Server implementation technology -->
					<element name="Version" type="xsd:string"/>				<!-- Server version -->
					<element name="FeatureSet" type="tns:ArrayOfFeature"/>  <!-- Allows to set pre-logon features like SilentLogon -->
					<element name="CryptKey" nillable="true" type="xsd:string"/>			<!-- Public key to encrpyt password -->
					<element name="EnterpriseSystemId" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.2: Global unique identifier of an Enterprise system installation -->
				</all>
			</complexType>
			<complexType name="ArrayOfServerInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ServerInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<complexType name="MetaData">
				<all>
					<element name="BasicMetaData"	 type="tns:BasicMetaData"		nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="RightsMetaData"	 type="tns:RightsMetaData"		nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="SourceMetaData"	 type="tns:SourceMetaData"		nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="ContentMetaData"	 type="tns:ContentMetaData"		nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="WorkflowMetaData" type="tns:WorkflowMetaData"	nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="ExtraMetaData"	 type="tns:ArrayOfExtraMetaData" nillable="true"/>	<!-- nillable since v4.2 -->
				</all>
			</complexType>

			<complexType name="Page">
				<all>
					<element name="Width"       type="xsd:double"/>                             <!-- Width in points (pt) -->
					<element name="Height"      type="xsd:double"/>                             <!-- Height in points (pt) -->
					<element name="PageNumber"  type="xsd:string"/>                             <!-- Human readable page number, could be FrontPage, Sport1 etc. -->
					<element name="PageOrder"   type="xsd:unsignedInt"/>                        <!-- Logical page number: i=>1, ii=>2, A=>1, B=>2, etc -->
					<element name="Files"       type="tns:ArrayOfAttachment" nillable="true"/>  <!-- Preview/Production files -->
					<element name="Edition"     type="tns:Edition"           nillable="true"/>  <!-- v4.2: Edition to produce page. Nil when same for all editions, or no editions available at pub/iss. -->
					<element name="Master"      type="xsd:string"/>                             <!-- v5.0: Name of master page in template used to create page. When empty, first master page is taken. -->
					<element name="Instance"    type="tns:InstanceType"/>                       <!-- v5.0: Same page instance can be planned and/or produced -->
					<element name="PageSequence"	type="xsd:unsignedInt" nillable="true"/> 	<!-- v5.0: Pagesequence in the layout, starting with 1 -->
					<element name="Renditions"	type="tns:ArrayOfRenditionType" nillable="true"/>	<!--v5.0: Renditions available for this page-->
                    <element name="Orientation"	type="xsd:string" nillable="true"/>	<!--v8.0: The page orientation: nil, landscape or portrait.-->
				</all>
			</complexType>
			<complexType name="ArrayOfPage">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Page[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Object">
				<all>
					<element name="MetaData"	type="tns:MetaData" nillable="true"/>
					<element name="Relations"	type="tns:ArrayOfRelation" nillable="true"/>
					<element name="Pages"		type="tns:ArrayOfPage"		nillable="true"/>	<!-- Only used for Layout objects to specify pages of a layout -->
					<element name="Files"		type="tns:ArrayOfAttachment" nillable="true"/>	
					<element name="Messages"	type="tns:ArrayOfMessage"
												nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use MessageList instead. -->
					<element name="Elements"	type="tns:ArrayOfElement"	nillable="true"/>	<!-- v4.2: Article's text compoments -->
					<element name="Targets"		type="tns:ArrayOfTarget"	nillable="true"/>	<!-- v6.0: nil typically used for unplaced objects -->
					<element name="Renditions"	type="tns:ArrayOfEditionRenditionsInfo"	
												nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v7.5: Read-only. Returned when asked for RenditionsInfo. -->
					<element name="MessageList" type="tns:MessageList"
												nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v8.0: Messages sent to this object. -->
					<element name="ObjectLabels" type="tns:ArrayOfObjectLabel" 
												nillable="true" minOccurs="0" maxOccurs="1"/>   <!-- v9.1: Labels defined for the dossier (or dossier template). Empty for any other object type. -->
					<element name="InDesignArticles" type="tns:ArrayOfInDesignArticle" 
												nillable="true" minOccurs="0" maxOccurs="1"/>   <!-- v9.7: The InDesign Articles on the layout. -->
					<element name="Placements"  type="tns:ArrayOfPlacement" 
												nillable="true" minOccurs="0" maxOccurs="1"/>   <!-- v9.7: The frames on the layout that belong dedicated to the InDesign Articles (and not to relational placements). -->
					<element name="Operations"  type="tns:ArrayOfObjectOperation" 
												nillable="true" minOccurs="0" maxOccurs="1"/>   <!-- v9.8: Could be set for GetObjectsResponse and InstantiateTemplate request for layouts. List of Automated Print Workflow operations to be executed on the layout after opening. -->
				</all>
			</complexType>
			<complexType name="ArrayOfObject">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Object[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<complexType name="NamedQuery">
				<all>
					<element name="Name" type="xsd:string"/>
					<element name="Params" type="tns:ArrayOfPropertyInfo"/>
				</all>
			</complexType>
			<complexType name="ArrayOfNamedQuery">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:NamedQuery[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v6.0: Changed into basic info about property, full into in PropertyInfo. -->
			<complexType name="Property">
				<all>
					<element name="Name" type="xsd:string"/> <!-- unlocalized name of property -->
					<element name="DisplayName" type="xsd:string"/> <!-- localized name of property -->
					<element name="Type" type="tns:PropertyType"/> <!-- implies kind of field control used in dialog -->
				</all>
			</complexType>
			<complexType name="ArrayOfProperty">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Property[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v7.0 -->
			<complexType name="Facet">
				<all>
					<element name="Name" type="xsd:string"/> <!-- unlocalized name of facet -->
					<element name="DisplayName" type="xsd:string"/> <!-- localized name of property -->
					<element name="FacetItems" type="tns:ArrayOfFacetItem"/> <!-- Item fields of facet -->
				</all>
			</complexType>

			<!-- v7.0 -->
			<complexType name="ArrayOfFacet">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Facet[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v7.0 -->
			<complexType name="FacetItem">
				<all>
					<element name="Name" type="xsd:string"/> <!-- unlocalized name of facet item -->
					<element name="DisplayName" type="xsd:string"/> <!-- localized name of property -->
					<element name="Number" type="xsd:unsignedInt"/> <!-- Number of hits -->
				</all>
			</complexType>			

			<!-- v7.0 -->
			<complexType name="ArrayOfFacetItem">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:FacetItem[]"/>
					</restriction>
				</complexContent>
			</complexType>	

			<!--
			    v6.0: Defines all attributes of a property itself. Full definition of a property.
			    Configured in the Metadata setup by brand admin (or provided by a server plug-in).
			-->
			<complexType name="PropertyInfo">
				<all>
					<element name="Name" type="xsd:string"/> <!-- unlocalized name of property -->
					<element name="DisplayName" type="xsd:string"/> <!-- localized name of property -->
					<element name="Category" nillable="true" type="xsd:string"/> <!-- localized name of dialog tab control -->
					<element name="Type" type="tns:PropertyType"/> <!-- implies kind of field control used in dialog -->
					<element name="DefaultValue" nillable="true" type="xsd:string"/> <!-- pre-filled value when empty -->
					<element name="ValueList" nillable="true" type="tns:ArrayOfString" minOccurs="0" maxOccurs="1"/> <!-- only used for lists (Type="list") -->
					<element name="MinValue" nillable="true" type="xsd:string"/> <!-- only used for numbers (Type="int") -->
					<element name="MaxValue" nillable="true" type="xsd:string"/> <!-- only used for numbers (Type="int") -->
					<element name="MaxLength" nillable="true" type="xsd:int"/> <!-- only used for strings (Type="string/multiline") -->
					<element name="PropertyValues" nillable="true" type="tns:ArrayOfPropertyValue" minOccurs="0" maxOccurs="1"/> <!-- Since v8.0 use this instead of 'ValueList' -->
					<element name="ParentValue" nillable="true" type="xsd:string"/> <!-- DEPRECATED since v8.0 -->
					<element name="DependentProperties" nillable="true" type="tns:ArrayOfProperty"/> <!-- DEPRECATED since v8.0 -->
					<element name="MinResolution" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.0: Min accepted pixels for fileselector widgets to select images. Format: [width]x[height] -->
					<element name="MaxResolution" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.0: Max accepted pixels for fileselector widgets to select images. Format: [width]x[height] -->
					<element name="Widgets" nillable="true" type="tns:ArrayOfDialogWidget" minOccurs="0" maxOccurs="1"/> <!-- v9.0: Widgets can be grouped, as used for fileselector and articlecomponentselector. -->
					<element name="TermEntity" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.1: When given, it could be recognized by any auto-complete provider to help the user filling in the property -->
                    <element name="SuggestionEntity" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.1: When given, it could be recognized by any suggestion provider to help the user filling in the property -->
                    <element name="AutocompleteProvider" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.1 internal plugin name -->
                    <element name="SuggestionProvider" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.1 internal plugin name -->
                    <element name="PublishSystemId" nillable="true" type="xsd:string" minOccurs="0" maxOccurs="1"/> <!-- v9.1: Unique id of the publishing system. Use to bind the publishing storage. -->
					<element name="Notifications" nillable="true" type="tns:ArrayOfPropertyNotification" minOccurs="0" maxOccurs="1"/> <!-- v9.1: Warnings or tooltip help for the user to fill in the property -->
					<element name="MixedValues" nillable="true" type="xsd:boolean" minOccurs="0" maxOccurs="1"/> <!-- v9.2: Indicate whether or not property values differ for the selected objects -->
				</all>
			</complexType>
			<complexType name="ArrayOfPropertyInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PropertyInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

            <!--
                 Defines how a property widget should behave on a certain dialog.
                 Configured in the Dialog setup by brand admin (or provided by a server plug-in).
            -->
			<complexType name="PropertyUsage">
				<all>
					<element name="Name" type="xsd:string"/>        <!-- Name of property (not the dislay name) -->
					<element name="Editable" type="xsd:boolean"/>   <!-- User is allowed to change property value -->
					<element name="Mandatory" type="xsd:boolean"/>  <!-- Property value must be given; empty not allowed -->
					<element name="Restricted" type="xsd:boolean"/>	<!-- v5.0 feature. Since v7.0, the GetDialog service does set Editable to false for Restricted properties for which user has no rights. -->
					<element name="RefreshOnChange" type="xsd:boolean"/>	<!-- v8.0 feature. Since v8.0, a indicator whether to refresh dialog or not when field value changed. This feature is not in use but marked for future use. -->
                    <element name="InitialHeight" type="xsd:integer"  nillable="true"/> <!-- v9.0 feature. Since v9.0, an indicator to specify the height of a widget in pixels. -->
                    <element name="MultipleObjects" type="xsd:boolean" nillable="true"/> <!-- v9.2 feature. Indicate whether setting for single or multiple objects. It is not used by CS, but for completeness. -->
				</all>
			</complexType>
			<complexType name="ArrayOfPropertyUsage">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PropertyUsage[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- 
				Defines which properties a show will be prompted with for a specific action like 
				Create, CheckIn, SetProperty. All of this depends on ObjectType.
			-->
			<complexType name="ActionProperty">
				<all>
					<element name="Action" type="tns:Action"/>
					<element name="ObjectType" nillable="true" type="tns:ObjectType"/>   <!-- Can be nil to be valid for all object types, not some Actions (Query) are always cross object types -->
					<element name="Properties" type="tns:ArrayOfPropertyUsage"/>
				</all>
			</complexType>
			<complexType name="ArrayOfActionProperty">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ActionProperty[]"/>
					</restriction>
				</complexContent>
			</complexType>
						

			<complexType name="ObjectTypeProperty">
				<all>
					<element name="Type" nillable="true" type="tns:ObjectType"/> <!-- nil means for all (unspecified) object types -->
					<element name="Properties" type="tns:ArrayOfPropertyInfo"/>
				</all>
			</complexType>
			<complexType name="ArrayOfObjectTypeProperty">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectTypeProperty[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="ArrayOfAreaType">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:AreaType[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="QueryOrder">
				<all>
					<element name="Property" type="xsd:string"/>
					<element name="Direction" type="xsd:boolean"/>
				</all>
			</complexType>
			<complexType name="ArrayOfQueryOrder">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:QueryOrder[]"/>
					</restriction>
				</complexContent>
			</complexType>
			<complexType name="QueryParam">
				<all>
					<element name="Property" type="xsd:string"/>
					<element name="Operation" type="tns:OperationType"/>
					<element name="Value" type="xsd:string"/>
					<!--
						Use xsd:datetime for absolute times (such as Created, or Modified)
						Use xsd:duration for time intervals (such as Weeks or Years)
						Currently, for intervals, one unit is supported, such as: -P6M (not complex types such as: P1Y1M)
					-->
					<element name="Special" type="xsd:boolean" nillable="true"/>
					<!--
						v4.2: When Property is set to "Issue" and Special is "true",
			 			the Value can be "Current", "Next" or "Previous". The default value is "false".
			 		-->
			 		<element name="Value2" type="xsd:string" nillable="true"/>
			 		<!--
			 			v8.0: In TrashCan only, when Operation is set to "between",
			 			the Value = "from" date value, and Value2 = "to" date value
			 		-->
			 		
				</all>
			</complexType>
			<complexType name="ArrayOfQueryParam">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:QueryParam[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<complexType name="VersionInfo">
				<all>
					<element name="Version"		type="xsd:string"/>
					<element name="User"		type="xsd:string"/>
					<element name="Comment"		type="xsd:string"/>
					<element name="Slugline"	type="xsd:string"/>
					<element name="Created"		type="xsd:dateTime"/>
					<element name="Object"		type="xsd:string"/> 						<!-- v4.2: object name -->
					<element name="State"		type="tns:State"/> 							<!-- v4.2: object status -->
					<element name="File"		type="tns:Attachment"	nillable="true"/>	<!-- v4.2: the rendition asked for -->
				</all>
			</complexType>
			<complexType name="ArrayOfVersionInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:VersionInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Attachment">
				<all>
					<element name="Rendition" type="tns:RenditionType"/>
					<element name="Type"      type="xsd:string"/>

					<element name="Content"   type="tns:AttachmentContent" nillable="true"/> 
					<!-- DEPRECATED, use the File Transfer Server instead. Used for DIME only. 
					     Nillable since v8.0. Must be nil when FileUrl/FilePath is used. -->

					<element name="FilePath"  type="xsd:string" nillable="true"/> 
					<!-- Since v8.0 the FilePath is is added for internal use by the File Transfer Server, 
					     Server Plug-ins and Server core. Must be nil when Content/FileUrl is used. -->

					<element name="FileUrl"   type="xsd:string" nillable="true"/> 
					<!-- Since v7.4 the FileUrl is added for the Preview feature as used by CS editor. 
					     Instead of Content, the FileUrl is passed through PreviewArticleAtWorkspaceResponse. 
					     Since v8.0 the FileUrl is used to upload/download URL to/from the File Transfer Server. 
					     Externally used by client applications. Must be nil when Content/FilePath is used. -->

					<element name="EditionId" type="xsd:string" nillable="true" minOccurs="0" maxOccurs="1"/>
					<!-- Since v7.5 the EditionId is added to enable file rendition storage per edition/device.
					     This feature is used for dossier objects that can have an output rendition per edition/device. 
					     When EditionId is left out, there are no edition/device specific renditions. 
					     In that case, it should be read as: "for all editions/renditions". -->

					<element name="ContentSourceFileLink" type="xsd:string" nillable="true" minOccurs="0" maxOccurs="1"/>
					<!-- Since v9.7 the ContentSourceFileLink is added to enable returning references to files instead
						 of the files themselves. The file link is a direct reference to the location of the file on
						 the Content Source.
					-->
				</all>
			</complexType>
			<complexType name="ArrayOfAttachment">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Attachment[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v7.5: Indicates which file formats are stored in the database and filestore. -->
			<complexType name="RenditionTypeInfo">
				<all>
					<element name="Rendition" type="tns:RenditionType"/>
					<element name="Type"      type="xsd:string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfRenditionTypeInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:RenditionTypeInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v7.5: Indicates which file formats are stored in the database and filestore (for an edition/device). -->
			<complexType name="EditionRenditionsInfo">
				<all>
					<element name="Edition"    type="tns:Edition" nillable="true"/> <!-- nil indicates renditions on object level -->
					<element name="Renditions" type="tns:ArrayOfRenditionTypeInfo"/>
				</all>
			</complexType>
			<complexType name="ArrayOfEditionRenditionsInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:EditionRenditionsInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Publication">
				<all>
					<element name="Id" type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfPublication">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Publication[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="PublicationInfo">
				<all>
					<element name="Id"                      type="xsd:string"/>
					<element name="Name"                    type="xsd:string"/>
					<element name="Issues"                  type="tns:ArrayOfIssueInfo"          nillable="true"/> <!-- DEPRECATED. Contains Channel Issues (ID of Issue, name of Channel + Issue) -->
					<element name="States"                  type="tns:ArrayOfState"              nillable="true"/>
					<element name="ObjectTypeProperties"    type="tns:ArrayOfObjectTypeProperty" nillable="true"/>
					<element name="ActionProperties"        type="tns:ArrayOfActionProperty"     nillable="true"/>
					<element name="Editions"                type="tns:ArrayOfEdition"            nillable="true"/> <!-- v4.2, DEPRECATED, possibly removed after v6.0 -->
					<element name="FeatureAccessList"       type="tns:ArrayOfFeatureAccess"      nillable="true"/> <!-- v4.2 -->
					<element name="CurrentIssue"            type="xsd:string"                    nillable="true"/> <!-- v4.2: Configured current issue of the default channel. -->
					<element name="PubChannels"             type="tns:ArrayOfPubChannelInfo"     nillable="true"/> <!-- v6.0 -->
					<element name="Categories"              type="tns:ArrayOfCategoryInfo"       nillable="true"/> <!-- v6.0: Formerly called Sections. -->
					<element name="Dictionaries"            type="tns:ArrayOfDictionary"         nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v7.4: Configured brand-specific dictionaries used for spelling -->
					<element name="ReversedRead"            type="xsd:boolean"/>                                                               <!-- v7.6: reversed reading order of pages -->
				</all>
			</complexType>
			<complexType name="ArrayOfPublicationInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PublicationInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v6.0: formerly called Section -->
			<complexType name="Category">
				<all>
					<element name="Id"   type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
				</all>
			</complexType>

			<!-- v6.0: formerly called SectionInfo -->
			<complexType name="CategoryInfo">
				<all>
					<element name="Id"   type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
				</all>
			</complexType>

			<!-- v6.0: formerly called ArrayOfSectionInfo -->
			<complexType name="ArrayOfCategoryInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:CategoryInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v6.0 -->
			<complexType name="PubChannel">
				<all>
					<element name="Id"				type="xsd:string"/>
					<element name="Name"			type="xsd:string"/>
				</all>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="PubChannelInfo">
				<all>
					<element name="Id"				type="xsd:string"/>
					<element name="Name"			type="xsd:string"/>
					<element name="Issues"			type="tns:ArrayOfIssueInfo"	nillable="true"/>
					<element name="Editions"		type="tns:ArrayOfEdition"	nillable="true"/>
					<element name="CurrentIssue"	type="xsd:string"			nillable="true"/>
					<element name="Type"			type="tns:PubChannelType"	nillable="true"/>
					<element name="DirectPublish"	type="xsd:boolean"			nillable="true"/>
					<element name="SupportsForms"	type="xsd:boolean"			nillable="true" 
								minOccurs="0" maxOccurs="1"/> <!-- v9.0: Tells whether the channel supports publish form feature -->
				</all>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="ArrayOfPubChannelInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PubChannelInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v4.2 -->
			<complexType name="Edition">
				<all>
					<element name="Id" type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
				</all>
			</complexType>

			<!-- v4.2 -->
			<complexType name="ArrayOfEdition">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Edition[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="Issue">
				<all>
					<element name="Id" type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
					<element name="OverrulePublication" nillable="true" type="xsd:boolean"/> <!-- Might become deprecated. Tells if issue definitions must be used instead of publication details -->
				</all>
			</complexType>

			<complexType name="IssueInfo">
				<all>
					<element name="Id" type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
					<element name="OverrulePublication" nillable="true" type="xsd:boolean"/> <!-- tells if issue definitions must be used instead of publication details -->
					
					<!-- Overrule defintions at publication level -->
					<element name="Sections"	type="tns:ArrayOfCategoryInfo"	nillable="true"/>
					<element name="States"		type="tns:ArrayOfState"			nillable="true"/>
					<element name="Editions" 	type="tns:ArrayOfEdition" 		nillable="true"/> <!-- v4.2 -->
					
					<element name="Description"     type="xsd:string"           nillable="true"/> <!-- v6.0: Typically used for Page Folio -->
					<element name="Subject"         type="xsd:string"           nillable="true"/> <!-- v6.0: Typically used for Page Folio -->
					<element name="PublicationDate" type="tns:dateTimeOrEmpty"  nillable="true"/> <!-- v6.0: Typically used for Page Folio -->
					<element name="ReversedRead"    type="xsd:boolean"          nillable="true"/> <!-- v7.6: Reversed reading order of pages -->
				</all>
			</complexType>
			<complexType name="ArrayOfIssueInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:IssueInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="State">
				<all>
					<element name="Id"             type="xsd:string"/>
					<element name="Name"           type="xsd:string"	 nillable="true"/> <!-- nillable since v8.0 -->
					<element name="Type"           type="tns:ObjectType" nillable="true"/>
					<element name="Produce"        type="xsd:boolean"    nillable="true"/> <!-- If true for layouts, output will be send if set in featurelist -->
					<element name="Color"          type="tns:Color"      nillable="true"/>
					<element name="DefaultRouteTo" type="xsd:string"     nillable="true"/> <!-- default route to for this status, returned by server, no need to send as client -->
				</all>
			</complexType>
			<complexType name="ArrayOfState">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:State[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v6.0 -->
			<complexType name="Target">
				<all>
					<element name="PubChannel"        type="tns:PubChannel"/>
					<element name="Issue"             type="tns:Issue"           nillable="true"/>
					<element name="Editions"          type="tns:ArrayOfEdition"  nillable="true"/>
					<element name="PublishedDate"     type="tns:dateTimeOrEmpty" nillable="true"/>
					<element name="PublishedVersion"  type="xsd:string"          nillable="true"/>
				</all>
			</complexType>

			<!-- v6.0 -->
			<complexType name="ArrayOfTarget">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Target[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v7.0 -->
			<complexType name="ObjectTargetsInfo">
				<all>
					<element name="BasicMetaData"		type="tns:BasicMetaData"/>
					<element name="Targets"				type="tns:ArrayOfTarget"/>
				</all>
			</complexType>

			<!-- v7.0 -->
			<complexType name="ArrayOfObjectTargetsInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectTargetsInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="ArrayOfString">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:String[]"/>
					</restriction>
				</complexContent>
			</complexType>
			<complexType name="Row">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:String[]"/>
					</restriction>
				</complexContent>
			</complexType>
			<complexType name="ArrayOfRow">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Row[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v4.2 -->
			<complexType name="ChildRow">
				<all>
					<element name="Parents" type="tns:ArrayOfString"/> <!-- IDs of parent rows/objects -->
					<element name="Row" type="tns:ArrayOfString" nillable="true"/>
					<!--
						v4.2: child row; e.g. article placements or text components.
						v6.0: changed from ChildRow to Row, both client and server used Row.
					-->
				</all>
			</complexType>

			<!-- v4.2 -->
			<complexType name="ArrayOfChildRow">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ChildRow[]"/> <!-- Since v6.0 changed from Row to ChildRow -->
					</restriction>
				</complexContent>
			</complexType>
			
			<!--
				v4.2: Application feature (AppFeature) that needs to be enabled or disabled. 
				When AppFeature element is not listed, then the default Value="Yes" is assumed.
				Exception is the ForceTrackChanges feature for which Value="No" is the default.
				
				Supported values for the Name element are: 
				   ApplyParaStyles, EditParaStyles, ApplyParaFormats, ApplyCharStyles, EditCharStyles, ApplyCharFontFamily,
				   ApplyCharFontStyle, ApplyCharBasicFormats, ApplyCharAdvancedFormats, CopyFit, ApplySwatches, EditSwatches,
				   EditTags, ChangeLanguage, EditDictionary, ShortCuts, CompositionPrefs, ResizeTFLines, ResizeTF, EditTextMacros,
				   RestrictedProperties, RenameOnCheckIn, ChangePIS, SaveAs, ForceTrackChanges, EditTrackChanges, ImageSelect,
				   ImageCropping, ImageScale, Transparency, ColorManagement, OutputPrefs, AnyColor, CreateArticle, CreateImage,
				   CreateDossier, CreateTask, Publish
				Supported values for the Value element are:
				   - Yes, No (for all features)
				   - Proportional (only for the ImageScale feature)
			-->
			<complexType name="AppFeature">
				<all>
					<element name="Name" type="xsd:string"/>
					<element name="Value" type="xsd:string"/>
				</all>
			</complexType>

			<!-- v4.2 -->
			<complexType name="ArrayOfAppFeature">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:AppFeature[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v4.2 -->
			<complexType name="FeatureProfile">
				<all>
					<element name="Name" type="xsd:string"/>
					<element name="Features" nillable="true" type="tns:ArrayOfAppFeature"/>
				</all>
			</complexType>

			<!-- v4.2 -->
			<complexType name="ArrayOfFeatureProfile">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:FeatureProfile[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v4.2 -->
			<complexType name="FeatureAccess">
				<all>
					<element name="Profile" type="xsd:string"/> <!-- name of global FeatureProfile -->
					<!-- Issue/Section/State elements are id-based -->
					<element name="Issue"   type="xsd:string" nillable="true"/> <!-- nil means 'all' -->
					<element name="Section" type="xsd:string" nillable="true"/> <!-- nil means 'all' -->
					<element name="State"   type="xsd:string" nillable="true"/> <!-- nil means 'all' -->
				</all>
			</complexType>
			
			<!-- v4.2 -->
			<complexType name="ArrayOfFeatureAccess">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:FeatureAccess[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v5.0 -->
			<complexType name="DialogWidget">
				<all>
					<element name="PropertyInfo"  type="tns:PropertyInfo"/> 
					<element name="PropertyUsage" type="tns:PropertyUsage"/> 
				</all>
			</complexType>

			<!-- v5.0 -->
			<complexType name="ArrayOfDialogWidget">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:DialogWidget[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v5.0 -->
			<complexType name="DialogTab">
				<all>
					<element name="Title"   type="xsd:string"/> 
					<element name="Widgets" type="tns:ArrayOfDialogWidget"/>
					<element name="DefaultFocus" type="xsd:string"/> <!-- v7.0: Name of widget (on this tab) that should get the user input focus. It refers to DialogWidget->PropertyInfo->Name. Clients should first widget when left empty. When widget is read-only, the next widget should get the focus. -->
				</all>
			</complexType>

			<!-- v5.0 -->
			<complexType name="ArrayOfDialogTab">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:DialogTab[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- 
				v5.0: Property with multiple string values.
				v8.0: Choice either array of strings (Values) or array of key-value pairs (PropertyValue).
			-->
			<complexType name="MetaDataValue">
				<all>
					<element name="Property" type="xsd:string"/>
					<element name="Values" nillable="true" minOccurs="0" maxOccurs="1" type="tns:ArrayOfString"/>
					<element name="PropertyValues" nillable="true" minOccurs="0" maxOccurs="1" type="tns:ArrayOfPropertyValue"/>
				</all>
			</complexType>
			
			<!-- v7.0 -->
			<complexType name="ArrayOfMetaDataValue">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:MetaDataValue[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v5.0 -->
			<complexType name="Dialog">
				<all>
					<element name="Title"       type="xsd:string"/>
					<element name="Tabs"        type="tns:ArrayOfDialogTab"/>
					<element name="MetaData"    type="tns:ArrayOfMetaDataValue"/>
                    <element name="ButtonBar"   type="tns:ArrayOfDialogButton" nillable="true" /> <!-- v9.0: When supported, the buttons in the Dialog can be defined by the server. -->
				</all>
			</complexType>

            <!-- v9.0 -->
            <complexType name="ArrayOfDialogButton">
                <complexContent>
                    <restriction base="soap-enc:Array">
                        <attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:DialogButton[]"/>
                    </restriction>
                </complexContent>
            </complexType>


            <!-- v9.0 -->
            <complexType name="DialogButton">
                <all>
                    <element name="PropertyInfo"  type="tns:PropertyInfo"/> <!-- Since v9.1: Type has changed from Property into PropertyInfo -->
                    <element name="PropertyUsage" type="tns:PropertyUsage"/>
                </all>
            </complexType>
			
			<!-- v8.0 -->
			<complexType name="PropertyValue">
				<all>
					<element name="Value" type="xsd:string"/>
					<element name="Display" type="xsd:string" nillable="true" minOccurs="0" maxOccurs="1" /> <!-- optional -->
					<element name="Entity" type="xsd:string" nillable="true" minOccurs="0" maxOccurs="1" /> <!-- optional -->
				</all>
			</complexType>

			<!--
				v8.0: Choice of array of String or array of PropertyValue
			--> 
			<complexType name="ArrayOfPropertyValue">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PropertyValue[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="ObjectPageInfo">
				<all>
					<element name="MetaData"   type="tns:MetaData" nillable="true"/> <!-- Object metadata. Set nil when no metadata requested. --> 
					<element name="Pages"      type="tns:ArrayOfPage"/>     <!-- Pages of the object. -->
					<element name="Messages"   type="tns:ArrayOfMessage"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use MessageList instead. -->
					<element name="MessageList"   type="tns:MessageList"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v8.0: Messages sent to this object. -->
				</all>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="ArrayOfObjectPageInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectPageInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v7.0: Describes simple object properties -->
			<complexType name="ObjectInfo">
				<all>
					<element name="ID" type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
					<element name="Type" type="tns:ObjectType"/>
					<element name="Format" type="xsd:string" nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.2: Object's native file format. -->
				</all>
			</complexType>

			<complexType name="ArrayOfObjectInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v7.0: Conditionally getting objects; only when newer than version -->
			<complexType name="ObjectVersion">
				<all>
					<element name="ID" type="xsd:string"/>
					<element name="Version" type="xsd:string"/>
				</all>
			</complexType>

			<complexType name="ArrayOfObjectVersion">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectVersion[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v7.4: See GetSuggestions service for details. -->
			<complexType name="Suggestion">
				<all>
					<element name="MisspelledWord" type="xsd:string"/>
					<element name="Suggestions" type="tns:ArrayOfString"/>
				</all>
			</complexType>

			<complexType name="ArrayOfSuggestion">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Suggestion[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v7.4 -->
			<complexType name="Dictionary">
				<all>
					<element name="Name"        type="xsd:string"/> <!-- Display name of dictionary to be shown to end-users (must be unique per brand/publication). -->
					<element name="Language"    type="xsd:string"/> <!-- Language code in [llCC] format (l = language code, C = county code). Used by custom Server Plug-ins to recognize a language and take action. -->
					<element name="DocLanguage" type="xsd:string"/> <!-- Document's language code. Used to pre-select the dictionary for a certain article text fragment for spelling checking. -->
					<element name="WordChars"   type="xsd:string"/> <!-- Valid characters that are used in words. Regular expression, e.g. [A-Za-z0-9'-]. Other characters are assumed to be word separators. -->
				</all>
			</complexType>

			<complexType name="ArrayOfDictionary">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Dictionary[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v8.0 -->
			<complexType name="ErrorReportEntity">
				<all>
					<element name="Type" type="xsd:string"/>                 <!-- Entity type. E.g. Object, Message, Page, etc --> 
					<element name="ID"   type="xsd:string" nillable="true"/> <!-- Entity ID. E.g. Object ID, Message GUID, PageSequence, etc --> 
					<element name="Name" type="xsd:string" nillable="true"/> <!-- Entity Name, in case there is no ID. E.g. for CreateObjects. --> 
					<element name="Role" type="xsd:string" nillable="true"/> <!-- Free format field, contains tokens to recognize role of this entity within the error context. --> 
				</all>
			</complexType>
			<complexType name="ArrayOfErrorReportEntity">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ErrorReportEntity[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- 
				v8.0: An item in the list of reported errors (or warnings). It provides contextual
				information about the errors/warnings raised. For each, there is a Message to be 
				show to end users and a Details to be shown to admin users.
				
				ErrorCode: Server error number (prefixed with 'S') that can be checked by clients to 
					act on the error. Errors in 1xxx range are workflow errors, and in 2xxx range are 
					license errors. The code is also in the Message to make support easier receiving screenshots
					of error dialogs in foreign languages. Clients should not parse the Message to get the code.
				
				MessageLevel: Warning or Error.
					For warnings, the operation was successful, but for errors it failed.
					Errors could be fixed (by user) and retried / re-fired. Warnings not (just for info only).
			-->
			<complexType name="ErrorReportEntry">
				<all>
					<element name="Entities"  type="tns:ArrayOfErrorReportEntity"/>  <!-- Entities for which the error is thrown. E.g. Object, Message, etc --> 
					<element name="Message"   type="xsd:string"/>  <!-- Error to show at dialog. Mostly contains error code to ease support in foreign languages. -->
					<element name="Details"   type="xsd:string"/>  <!-- Error details for system admin. Should be hidden at dialog by default.  -->
					<element name="ErrorCode" type="xsd:string"/>  <!-- See above-->
					<element name="MessageLevel" type="tns:MessageLevel"/> <!-- See above. -->
				</all>
			</complexType>
			<complexType name="ArrayOfErrorReportEntry">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ErrorReportEntry[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- 
				v8.0: Error report generated by server and sent back to client. This is used for
				operations on multiple entities (e.g. objects, messages, etc) whereby some could fail, 
				while others could be successful. The SoapFault can still be raised for fatal operations 
				(such as an invalid ticket) whereby no action was taken at all. Once started taking action, 
				but halfway a fatal error occurs (such as SQL error), they get packed in the ErrorReport instead.
			-->
			<complexType name="ErrorReport">
				<all>
					<element name="BelongsTo" type="tns:ErrorReportEntity"/>       <!-- Entity for which the operation failed. -->
					<element name="Entries"   type="tns:ArrayOfErrorReportEntry"/> <!-- Error messages and details. --> 
				</all>
			</complexType>
			<complexType name="ArrayOfErrorReport">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ErrorReport[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- Since 9.1 Used by Autocomplete and Suggestions services -->
			<complexType name="AutoSuggestTag">
				<all>
					<element name="Value"    type="xsd:string"/>
					<element name="Score"    type="xsd:double"/>
					<element name="StartPos" type="xsd:integer" nillable="true"/> <!-- Position index starting from 0. Null-able only for Suggestions service.-->
					<element name="Length"   type="xsd:integer" nillable="true"/> <!-- The total length of the word that matches the search term. Null-able only for Suggestions service.-->
				</all>
			</complexType>
			<complexType name="ArrayOfAutoSuggestTag">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:AutoSuggestTag[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- Since 9.1 Used by Autocomplete and Suggestions services -->
			<complexType name="EntityTags">
				<all>
					<element name="Entity" type="xsd:string"/>
					<element name="Tags" type="tns:ArrayOfAutoSuggestTag"/>
				</all>
			</complexType>
			<complexType name="ArrayOfEntityTags">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:EntityTags[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- Since 9.1 Used by Autocomplete and Suggestions services -->
			<complexType name="AutoSuggestProperty">
				<all>
					<element name="Name"         type="xsd:string"/> <!-- name of the property -->
					<element name="Entity"       type="xsd:string"/> <!-- entity of the property -->
					<element name="IgnoreValues" type="tns:ArrayOfString" nillable="true"/> <!-- tags that were already selected before in the property value -->
				</all>
			</complexType>
			<complexType name="ArrayOfAutoSuggestProperty">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:AutoSuggestProperty[]"/>
					</restriction>
				</complexContent>
			</complexType>

            <!-- Since 9.1 For any dialog widget, additional info can be shown (such as tooltip help for the Suggestions button shown on PublishForm). -->
            <complexType name="PropertyNotification">
                <all>
                    <element name="Type"         type="tns:MessageLevel"/> <!-- Info = tooltip, Warning = potential problem with the property value (Error is not used in this context) -->
                    <element name="Message"      type="xsd:string"/> <!-- Message to show end user.  -->
                </all>
            </complexType>
            <complexType name="ArrayOfPropertyNotification">
                <complexContent>
                    <restriction base="soap-enc:Array">
                        <attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PropertyNotification[]"/>
                    </restriction>
                </complexContent>
            </complexType>

            <!-- Since 9.1 Object Labels. See CreateObjectLabels header for info. -->
            <complexType name="ObjectLabel">
                <all>
                    <element name="Id"                  type="xsd:integer"      nillable="true"/>   <!-- System wide unique id of the label. -->
                    <element name="Name"                type="xsd:string"       nillable="true"/>   <!-- Display name of the label. -->
                </all>
            </complexType>
            <complexType name="ArrayOfObjectLabel">
                <complexContent>
                    <restriction base="soap-enc:Array">
                        <attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectLabel[]"/>
                    </restriction>
                </complexContent>
            </complexType>

            <!-- Since 9.2. Part of the SendToNext service, to return object status and routeto properties, which may differ per object. -->
            <complexType name="RoutingMetaData">
                <all>
                    <element name="ID" type="xsd:string"/>
                    <element name="State" type="tns:State"/>
                    <element name="RouteTo" type="xsd:string"/>
                </all>
            </complexType>
            <complexType name="ArrayOfRoutingMetaData">
                <complexContent>
                    <restriction base="soap-enc:Array">
                        <attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:RoutingMetaData[]"/>
                    </restriction>
                </complexContent>
            </complexType>
            
			<!-- Since 9.4. Introduced to preview multiple articles in one workspace at once. -->
			<complexType name="ArticleAtWorkspace">
				<all>
					<element name="ID"            type="xsd:string" nillable="true"/>
					<element name="Format"        type="xsd:string"/>
					<element name="Content"       type="xsd:string" nillable="true"/> <!-- full content, see comments at "xxxWorkspace services" -->
					<element name="Elements"      type="tns:ArrayOfElement" nillable="true"/> <!-- changed text frames, see comments at "xxxWorkspace services" -->
				</all>
			</complexType>
			<complexType name="ArrayOfArticleAtWorkspace">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ArticleAtWorkspace[]"/>
					</restriction>
				</complexContent>
			</complexType>
		
			<!-- Since 9.7.  -->
			<complexType name="Param">
				<all>
					<element name="Name" type="xsd:string"/>
					<element name="Value" type="xsd:string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfParam">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Param[]"/>
					</restriction>
				</complexContent>
			</complexType>
		
			<!-- 
				v9.8: Automated Print Workflow feature. 
				List of parameters to pass into an object operation.
				The following operations and parameters are supported:
				
				- Params for PlaceDossier (to auto place candidates):
					EditionId (0 when no editions configured)
					DossierId (candidates to be auto placed)
					InDesignArticleId (UID, frames to place onto)
 
				- Params for PlaceImage (also use for cropping):
					EditionId (0 when no editions configured)
					ImageId
					SplineId (UID, frame to place onto)
					ContentDx (optional)
					ContentDy (optional)
					ScaleX (optional, 1=100%)
					ScaleY (optional, 1=100%)
 
				- Params for PlaceArticleElement:
					EditionId (0 when no editions configured)
					ArticleId
					ElementId (GUID, to place)
					SplineId (UID, frame to place onto)
	 
				- Params for ClearFrameContent
					EditionId (0 when no editions configured)
					SplineId (UID, frame to clear content)
			-->
			<complexType name="ObjectOperation">
				<all>
					<element name="Id"            type="xsd:string"/>
					<element name="Name"          type="xsd:string"/>
					<element name="Type"          type="xsd:string"/>
					<element name="Params"        type="tns:ArrayOfParam"/>
				</all>
			</complexType>
			<complexType name="ArrayOfObjectOperation">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectOperation[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- 
				v10.0: Message Queue integrations used for push notifications.
				When there are multiple protocols supported, there are multiple connections 
				defined, so clients should search for a known Instance and Protocol combination.
				When the Password is set to nil, the same user password used to logon to 
				Enterprise Server should also be used to logon to the message queue server.
			-->
			<complexType name="MessageQueueConnection">
				<all>
					<element name="Instance"          type="xsd:string"/> <!-- Integrated message queue server. Supported value is "RabbitMQ". -->
					<element name="Protocol"          type="xsd:string"/> <!-- Communication protocol used over TCP. Supported value is "AMQP". -->
					<element name="Url"               type="xsd:string"/> <!-- Network connection URL to the message queue server. -->
					<element name="Public"            type="xsd:boolean"/> <!-- If true, it means the connection is to a public address. Otherwise it is a private address. -->
					<element name="User"              type="xsd:string"/> <!-- User name to logon to the message queue server. -->
					<element name="Password"          type="xsd:string" nillable="true"/> <!-- User password to logon to the message queue server. -->
					<element name="VirtualHost"       type="xsd:string" nillable="true"/> <!-- Area within the message queue server, used by this Enterprise installation. -->
				</all>
			</complexType>
			<complexType name="ArrayOfMessageQueueConnection">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:MessageQueueConnection[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!--
				Return list of all servers. This message is optional in the sense it won't be called
				if the client config file specifies a list of servers.
			-->
			<element name="GetServers"/>
			<element name="GetServersResponse">
			  <complexType>
				<sequence>
					<element name="Servers" type="tns:ArrayOfServerInfo"/>
					<element name="CompanyLanguage" nillable="true" type="xsd:string"/>
					<!--
						The CompanyLanguage is used for the default language at the LogOn dialog. 
						Supported values: deDE, enUS, esES, frFR, itIT, jaJP, nlNL, ptBR, ruRU, plPL, koKR, zhTW and zhCN
						When set to nil, enUS is taken as default.
					-->
				</sequence>
			  </complexType>
			</element>
			<!--
				Check user/pass combination and return a ticket for subsequent calls.
			-->
			<element name="LogOn">
			  <complexType>
				<sequence>
					<element name="User"				type="xsd:string"/>
					<element name="Password"			type="xsd:string"/>	
					<element name="Ticket"				type="xsd:string"		nillable="true"/>	<!-- To allow silent logon, based on ticket of previous sections. Usage depends on client config. -->
					<element name="Server"				type="xsd:string"		nillable="true"/>	<!-- Server to logon to as returned from GetServers or empty if not supported -->
					<element name="ClientName"			type="xsd:string"/>							<!-- Client machine name -->
					<element name="Domain"				type="xsd:string"		nillable="true"/>   <!-- OS domain -->
					<element name="ClientAppName"		type="xsd:string"/>							<!-- Client Application: InDesign, InCopy, PhotoShop, Web -->
					<element name="ClientAppVersion"	type="xsd:string"		nillable="true"/>   <!-- Version of the client application in "[v]x.y.z [DAILY] build b" format. -->
					<element name="ClientAppSerial"		type="xsd:string"		nillable="true"/>
					<element name="ClientAppProductKey" type="xsd:string"		nillable="true"/> 
					<element name="RequestTicket"		type="xsd:boolean" 		nillable="true"/>	<!-- Obsoleted. Pass nil for TicketOnly and pass empty array for RequestInfo to obtain a ticket only. -->
					<element name="RequestInfo"			type="tns:ArrayOfString" nillable="true" minOccurs="0" maxOccurs="1"/>
					<!-- v9.7: Which kind of information to resolve for the LogOnResponse.
						Supported values: 
							Publications, NamedQueries, ServerInfo, Settings, 
							Users, UserGroups, Membership, ObjectTypeProperties, ActionProperties, 
							Terms, FeatureProfiles, Dictionaries, MessageList, CurrentUser, MessageQueueConnections (v10.0)
						And, when 'Publications' is NOT specified:
							Publications->ObjectTypeProperties, Publications->ActionProperties, 
							Publications->FeatureAccessList, Publications->CurrentIssue,
							Publications->PubChannels, Publications->Categories, Publications->Dictionaries
					-->
				</sequence>
			  </complexType>
			</element>
			<element name="LogOnResponse">
			  <complexType>
				<sequence>
					<element name="Ticket" 				 type="xsd:string"/>
					<element name="Publications" 		 type="tns:ArrayOfPublicationInfo"		nillable="true"/>
					<element name="NamedQueries" 		 type="tns:ArrayOfNamedQuery"			nillable="true"/>
					<element name="FeatureSet" 			 type="tns:ArrayOfFeature"				nillable="true"/>
					<element name="LimitationSet" 		 type="tns:ArrayOfString"				nillable="true"/>
					<element name="ServerInfo" 			 type="tns:ServerInfo"					nillable="true"/>
					<element name="Settings" 			 type="tns:ArrayOfSetting"				nillable="true"/>
					<element name="Users" 				 type="tns:ArrayOfUser"					nillable="true"/> <!-- All possible users of entire system -->
					<element name="UserGroups" 			 type="tns:ArrayOfUserGroup"			nillable="true"/> <!-- All possible groups of entire system -->
					<element name="Membership" 			 type="tns:ArrayOfUserGroup"			nillable="true"/> <!-- All groups current user is member of (used for messages and hotinbox) -->
					<element name="ObjectTypeProperties" type="tns:ArrayOfObjectTypeProperty"	nillable="true"/> <!-- Allows to define query properties -->
					<element name="ActionProperties" 	 type="tns:ArrayOfActionProperty"		nillable="true"/> <!-- Allows to define query properties -->
					<element name="Terms" 				 type="tns:ArrayOfTerm"					nillable="true"/> <!-- Allows to change client terminology -->
					<element name="FeatureProfiles"		 type="tns:ArrayOfFeatureProfile"		nillable="true"/> <!-- v4.2 -->
					<element name="Messages"			 type="tns:ArrayOfMessage"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use MessageList instead. -->
					<element name="TrackChangesColor" 	 type="tns:Color"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use User->TrackChangesColor instead. -->
					<element name="Dictionaries" 		 type="tns:ArrayOfDictionary"
							nillable="true" minOccurs="0" maxOccurs="1"/>   <!-- v7.4: Configured system-wide dictionaries used for spelling -->
					<element name="MessageList"          type="tns:MessageList"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v8.0: Messages pending for this user. -->
					<element name="CurrentUser"          type="tns:User"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v8.0: The user logged in. -->
					<element name="MessageQueueConnections" type="tns:ArrayOfMessageQueueConnection"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v10.0: Clients may connect to one of these message queue definitions to receive push notifications. -->
					<element name="MessageQueue"         type="xsd:string"
							nillable="true" minOccurs="0" maxOccurs="1"/>   <!-- v10.0: Clients may subscribe to this message queue to receive push notifications through RabbitMQ integration. -->
				</sequence>
			  </complexType>
			</element>
			<element name="LogOff">
			  <complexType>
				<sequence>
					<element name="Ticket" 			type="xsd:string"/>
					<element name="SaveSettings" 	type="xsd:boolean"			nillable="true"/>	<!-- Should settings be saved for next session, if true and settings empty they should be deleted on server -->
					<element name="Settings"		type="tns:ArrayOfSetting"	nillable="true"/>
					<element name="ReadMessageIDs"	type="tns:ArrayOfString"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use MessageList->DeleteMessageIDs instead. -->
					<element name="MessageList" type="tns:MessageList"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- Since 8.0. User messages. -->
				</sequence>
			  </complexType>
			</element>
			<!--
				Return the next possible workflow statusses for a given object. On client side, this is 
				just a list, but at server side it can be given a special meaning. The meaning can even 
				can change from time to time, for example from workflow steps to approve/disapprove.
				Once a certain status is reached, the server can take action, as configured (or customized).
			-->
			<element name="GetStates">
			  <complexType>
				<sequence>
					<element name="Ticket"			type="xsd:string"/>
					<element name="ID"				type="xsd:string"			nillable="true"/>
					<element name="Publication"		type="tns:Publication"		nillable="true"/>
					<element name="Issue" 			type="tns:Issue"			nillable="true"/>	<!-- DEPRECATED -->
					<element name="Section"			type="tns:Category"			nillable="true"/>	<!-- Might become deprecated. -->
					<element name="Type"			type="tns:ObjectType"		nillable="true"/>
				</sequence>
			  </complexType>
			</element>
			  <complexType name="GetStatesResponse">
				<sequence>
					<element name="States" type="tns:ArrayOfState"/>
					<element name="RouteToUsers" type="tns:ArrayOfUser"/>
					<element name="RouteToGroups" type="tns:ArrayOfUserGroup"/>
				</sequence>
			  </complexType>
			<element name="GetStatesResponse" type="tns:GetStatesResponse">
			</element>
			
			<!-- 
				Creates new objects (article, image, layout) in the database. 
				
				Note for uploading WCML articles: When two articles would share the same Element IDs (GUIDs),
				placing these articles together on the same layout could lead into content loss. Therefore, 
				if a client other than InDesign, InCopy or InDesignServer calls CreateObjects with a WCML 
				article with Lock=False, Enterprise Server updates the GUIDs of the Elements in the article 
				and inserts those GUIDs in the new Element IDs in the database. (Note that Elements are also 
				called stories or text components, which all means the same.)
			-->
			<element name="CreateObjects">
			  <complexType>
				<sequence>
					<element name="Ticket" 		type="xsd:string"/>
					<element name="Lock" 		type="xsd:boolean"/>
					<element name="Objects"		type="tns:ArrayOfObject"/>
					<element name="Messages"	type="tns:ArrayOfMessage"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use Objects->Object->MessageList->Messages instead. -->
					<element name="AutoNaming" nillable="true" type="xsd:boolean"/> <!-- DEPRECATED since v9.3.0 Will be removed in version 10.0 -->
                    <element name="ReplaceGUIDs" type="xsd:boolean"
							nillable="true" minOccurs="0" maxOccurs="1"/> <!-- Only applicable for wcml articles. Should be set to true if these kind of articles are uploaded (to prevent duplicate guids). -->
				</sequence>
			  </complexType>
			</element>
			<element name="CreateObjectsResponse">
			  <complexType>
				<sequence>
					<element name="Objects" type="tns:ArrayOfObject"/>
					<element name="Reports" type="tns:ArrayOfErrorReport" nillable="true"/> <!-- v8.0: Errors and warnings of saving the Messages. -->
				</sequence>
			  </complexType>
			</element>

			<!-- 
				v9.7: Creates new layouts in the database based on a given layout template.
				
				The Objects->Object->MetaData->BasicMetaData->ID should be set to nil
				and will be resolved in the response.
				
				The PlaceDossier operation can be set for Objects->Operations.
									
				The Objects->Object->Pages should be set to nil. Pages are derived from the
				template and will be resolved in the response.
			-->
			<element name="InstantiateTemplate">
			  <complexType>
				<sequence>
					<element name="Ticket"      type="xsd:string"/>
					<element name="Lock"        type="xsd:boolean"/>
					<element name="Rendition"   type="tns:RenditionType"/>                  <!-- Which file rendition to retrieve. -->
					<element name="RequestInfo" type="tns:ArrayOfString"  nillable="true"/> <!-- See GetObjects->RequestInfo for supported option. -->
					<element name="TemplateId"  type="xsd:string"/>                         <!-- Tells which template to use. -->
					<element name="Objects"     type="tns:ArrayOfObject"/>                  <!-- Decribes which objects to create from template -->
				</sequence>
			  </complexType>
			</element>
			<element name="InstantiateTemplateResponse">
			  <complexType>
				<sequence>
					<element name="Objects" type="tns:ArrayOfObject"/>
					<element name="Reports" type="tns:ArrayOfErrorReport" nillable="true"/> <!-- Errors and warnings of the operation. -->
				</sequence>
			  </complexType>
			</element>
			
			<!-- 
				Returns information concerning an object. Also used to place a lock for editing. 
				The Rendition parameter defines what (functional) kind of file to return or none. 
			-->
			<element name="GetObjects">
			  <complexType>
				<sequence>
					<element name="Ticket" 		type="xsd:string"/>
					<element name="IDs" 		type="tns:ArrayOfString"/>
					<element name="Lock" 		type="xsd:boolean"/>
					<element name="Rendition" 	type="tns:RenditionType"/>
					<element name="RequestInfo"	type="tns:ArrayOfString"	nillable="true"/>	
						<!--
							v6.0: What info to get aside from metadata & rendition. Allowing to get 
							just what you need: less data, more speed.
							Possibe values: 
							- Relations
							- PagesInfo 	- get info of pages, but no files for the pages
							- Pages			- get info of pages plus files for the pages, this overrules PagesInfo
							- Messages      - get messages pending for this object. Affects Objects->Object->MessageList.
							- Elements
							- Targets
							- RenditionsInfo - v7.5: Get available file renditions stored for the object
							- NoMetaData     - v9.1: Only MetaData->BasicMetaData->ID, Name and Type are resolved and other properties are left nil
							- ObjectLabels   - v9.1: When this option is given, the Object Labels for the object are returned.
							- InDesignArticles - v9.7: Get Object->InDesignArticles for layout objects.
							- Placements       - v9.7: Get Object->Placement for layout objects.
							- ObjectOperations - v9.7: Get Object->Operations for layout objects.
							- ContentSourceFileLinks - v9.7: When this option is given, file links are returned instead of files in the Attachment object for any object that originates from a supported content source.
						-->
					<element name="HaveVersions" type="tns:ArrayOfObjectVersion" nillable="true" minOccurs="0" maxOccurs="1"/> 
						<!-- v7.0: HaveVersions, only return native or placement rendition attachments for object HaveVersions[]->ID if 
							 latest version is different from the given HaveVersions[]->Version. The same object ids should NOT be requested through the IDs param too.
							 minOccurs and maxOccurs are for backwards compatibility and can be removed in the next major version -->
					<element name="Areas"		type="tns:ArrayOfAreaType"		nillable="true" minOccurs="0" maxOccurs="1"/>
						<!-- v8.0: Area to search for the object. Nil means 'workflow' area only (for backwards compatibility reasons).-->
					<element name="EditionId" type="xsd:string" nillable="true" minOccurs="0" maxOccurs="1"/>
						<!-- v7.5: When given, the rendition for specific edition/device is returned. -->
					<element name="SupportedContentSources" type="tns:ArrayOfString" nillable="true" minOccurs="0" maxOccurs="1"/>
						<!-- v9.7: A list of Content Sources that are supported by a client. For any Content Source related operation
					 		 such as the Content Source file links, this property is used to determine what the client understands.
					 		 Content Source related operations will only be done for any content sources listed in this property.
					 		 Any Content Source needs to be specified by its unique Enterprise Server plug-in name.
					 		 Example: A GetObjects call requests two objects, each from a different content source: Foo and Bar.
					 		  RequestInfo contains the ContentSourceFileLinks value in order to return file links instead of content files.
					 		  Only Foo is a supported content source listed in this property, and so in the GetObjectResults, only the
					 		  object from content source Foo contains a file link, while the object from Bar contains actual file content. -->
				</sequence>
			  </complexType>
			</element>
			<element name="GetObjectsResponse">
			  <complexType>
				<sequence>
					<element name="Objects" type="tns:ArrayOfObject"/>
				</sequence>
			  </complexType>
			</element>

			<!-- Returns argumented information from the object store based on user defined query parameters. -->
			<element name="QueryObjects">
			  <complexType>
				<sequence>
					<element name="Ticket"		 	type="xsd:string"/>
					<element name="Params"		 	type="tns:ArrayOfQueryParam"/>
					<element name="FirstEntry"	 	type="xsd:unsignedInt" 			nillable="true"/>	<!-- v4.2: Index of first requested object of total count (TotalEntries) -->
					<element name="MaxEntries"	 	type="xsd:unsignedInt" 			nillable="true"/>	<!-- v4.2: Max count of requested objects (zero for all, nil for server defined default) -->
					<element name="Hierarchical" 	type="xsd:boolean" 				nillable="true"/> 	<!-- v4.2: Requests to include ChildRows (placements/components) - Default false! -->
					<element name="Order"		 	type="tns:ArrayOfQueryOrder"	nillable="true"/>	<!-- v4.2 -->
					<element name="MinimalProps"	type="tns:ArrayOfString"		nillable="true"/>	<!-- v6.0: Minimal properties that should be returned even if these are not configured -->
					<element name="RequestProps" 	type="tns:ArrayOfString"		nillable="true"/>	<!-- v6.0: Which properties to return, be cautious, this overrules server configuration and overrules MinimalProps -->
					<element name="Areas"			type="tns:ArrayOfAreaType"		nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v8.0: Area to search for the object. Nil means 'workflow' area only (for backwards compatibility reasons).-->
					<element name="GetObjectMode" 	type="xsd:boolean"				nillable="true"		minOccurs="0" maxOccurs="1"/>	<!-- v7.6.10 Mode refers to if read access right (true), like GetObject, is checked or the default view right (false) is checked. -->
				</sequence>
			  </complexType>
			</element>
			<element name="QueryObjectsResponse">
			  <complexType>
				<sequence>
					<element name="Columns"			 type="tns:ArrayOfProperty"/>
					<element name="Rows"			 type="tns:ArrayOfRow"/>
					<element name="ChildColumns"	 type="tns:ArrayOfProperty" nillable="true"/>	<!-- column header of ChildRows -->
					<element name="ChildRows"		 type="tns:ArrayOfChildRow" nillable="true"/>	<!-- child objects of returned root objects, which might *not* match the query -->
					<element name="ComponentColumns" type="tns:ArrayOfProperty" nillable="true"/>	<!-- column header of ComponentRows -->
					<element name="ComponentRows"	 type="tns:ArrayOfChildRow" nillable="true"/>	<!-- article's text components, returned in Rows or ChildRows -->
					<element name="FirstEntry"		 type="xsd:unsignedInt"		nillable="true"/> 	<!-- v4.2: Index of first returned object of total count (TotalEntries) -->
					<element name="ListedEntries"	 type="xsd:unsignedInt"		nillable="true"/>	<!-- v4.2: Count of returned objects -->
					<element name="TotalEntries"	 type="xsd:unsignedInt"		nillable="true"/>	<!-- v4.2: Total count objects matching the query -->
					<element name="UpdateID"		 type="xsd:string"			nillable="true"/>	<!-- v7.0: For future usage -->
					<element name="Facets"	 		 type="tns:ArrayOfFacet" 	nillable="true"/>	<!-- v7.0: column header of Facets -->
					<element name="SearchFeatures" 	 type="tns:ArrayOfFeature"	nillable="true"/>   <!-- v7.0: For now only uses key, no possible values right now  -->
				</sequence>
			  </complexType>
			</element>

			<!--
				Saves objects into the server. Possibility to unlock and/or to create a new version.
			-->
			<element name="SaveObjects">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="CreateVersion" type="xsd:boolean"/>
					<element name="ForceCheckIn" type="xsd:boolean"/>
					<element name="Unlock" type="xsd:boolean"/>
					<element name="Objects" type="tns:ArrayOfObject"/>
					<element name="ReadMessageIDs" type="tns:ArrayOfString"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use Objects->Object->MessageList->DeleteMessageIDs instead. -->
					<element name="Messages" type="tns:ArrayOfMessage"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use Objects->Object->MessageList->Messages instead. -->
				</sequence>
			  </complexType>
			</element>
			<element name="SaveObjectsResponse">
			  <complexType>
				<sequence>
					<element name="Objects" type="tns:ArrayOfObject"/>
					<element name="Reports" type="tns:ArrayOfErrorReport" nillable="true"/> <!-- v8.0: Errors and warnings of saving the Messages. -->
				</sequence>
			  </complexType>
			</element>

			<!-- 
				v9.7 Locks objects on the server. 
				Errors when object already locked or when newer version exists. 
			-->
			<element name="LockObjects">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="HaveVersions" type="tns:ArrayOfObjectVersion"/> <!-- Objects to be locked. For each object, specify the latest version already retrieved before. -->
				</sequence>
			  </complexType>
			</element>
			<element name="LockObjectsResponse">
			  <complexType>
				<sequence>
					<element name="IDs"		type="tns:ArrayOfString"/>	<!-- Successfully locked objects. -->
					<element name="Reports"	type="tns:ArrayOfErrorReport"	nillable="true"/> <!-- Objects that could not be locked. -->
				</sequence>
			  </complexType>
			</element>

			<!-- Unlocks objects on the server. -->
			<element name="UnlockObjects">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="IDs" type="tns:ArrayOfString"/>
					<element name="ReadMessageIDs" type="tns:ArrayOfString"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use MessageList->DeleteMessageIDs instead. -->
					<element name="MessageList" type="tns:MessageList"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- Since 8.0. Object messages. Corresponds with the IDs property. -->
				</sequence>
			  </complexType>
			</element>
			<element name="UnlockObjectsResponse">
			  <complexType>
				<sequence>
					<element name="Reports" type="tns:ArrayOfErrorReport" nillable="true"/> <!-- v8.0: Errors and warnings of saving the Messages. -->
				</sequence>
			  </complexType>
			</element>
			
			<!-- 
				Delete objects (send from Workflow to Trash Can) or Purge objects (permanently remove 
				from Workflow / Trash Can).
			-->
			<element name="DeleteObjects">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="IDs" type="tns:ArrayOfString" 	nillable="true" />	<!-- IDs of objects purge/trash. When IDs and Params are nil, Permanent is 'true' and Areas is 'Trash', then the entire TrashCan gets emptied. -->
					<element name="Permanent" type="xsd:boolean"/>                      <!-- Pass 'true' to purge or 'false' to send to TrashCan. -->
					<element name="Params" type="tns:ArrayOfQueryParam"	nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0: Params to be used to search objects (additionally to the IDs param). -->
					<element name="Areas" type="tns:ArrayOfAreaType" nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0: 'Workflow' to search for normal objects, or 'Trash' to search in TrashCan. Can be only one Area at a time. When left out, 'Workflow' is assumed. -->
					<element name="Context" type="xsd:string" nillable="true" minOccurs="0" maxOccurs="1"/> <!-- 8.0: "Issue" when deleting all objects for an issue -->
				</sequence>
			  </complexType>
			</element>
			<!-- v8.0 -->
			<element name="DeleteObjectsResponse">
			  <complexType>
				<sequence>
					<element name="IDs"		type="tns:ArrayOfString"/>	<!-- Successfully deleted objects. -->
					<element name="Reports"	type="tns:ArrayOfErrorReport"	nillable="true"/> <!-- Objects that could not be deleted. -->
				</sequence>
			  </complexType>
			</element>
			<!-- v8.0: Retrieve objects from Trash Can (push back into Workflow). -->
			<element name="RestoreObjects">
			  <complexType>
				<sequence>
					<element name="Ticket"		type="xsd:string"/>
					<element name="IDs" 		type="tns:ArrayOfString"/>	<!-- IDs of object to be restored -->
				</sequence>
			  </complexType>
			</element>
			<!-- v8.0 -->
			<element name="RestoreObjectsResponse">
			  <complexType>
				<sequence>
					<element name="IDs"		type="tns:ArrayOfString"/>	<!-- Successfully restored objects. -->
					<element name="Reports"	type="tns:ArrayOfErrorReport"	nillable="true"/> <!-- Objects that could not be restored. -->
				</sequence>
			  </complexType>
			</element>
			<!--
				Create relations between objects, like an article placed on a layout, 
				or an article planned for a layout, or an image contained by a dossier.
			-->
			<element name="CreateObjectRelations">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="Relations" type="tns:ArrayOfRelation"/>
				</sequence>
			  </complexType>
			</element>
			<element name="CreateObjectRelationsResponse">
			  <complexType>
				<sequence>
					<element name="Relations" type="tns:ArrayOfRelation"/>
				</sequence>
			  </complexType>
			</element>			
			<element name="UpdateObjectRelations">
			   <complexType>
				  <sequence>
					 <element name="Ticket" type="xsd:string"/>
					 <element name="Relations" type="tns:ArrayOfRelation"/>
				  </sequence>
			   </complexType>
			</element>
			<element name="UpdateObjectRelationsResponse">
			   <complexType>
				  <sequence>
					 <element name="Relations" type="tns:ArrayOfRelation"/>
				  </sequence>
			   </complexType>
			</element>
			<element name="DeleteObjectRelations">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="Relations" type="tns:ArrayOfRelation"/>
				</sequence>
			  </complexType>
			</element>
			<!-- DEPRECATED, use GetObject instead. -->
			<element name="GetObjectRelations">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="ID" type="xsd:string"/>
				</sequence>
			  </complexType>
			</element>
			<!-- DEPRECATED, use GetObject instead. -->
			<element name="GetObjectRelationsResponse">
			  <complexType>
				<sequence>
					<element name="Relations" type="tns:ArrayOfRelation"/>
				</sequence>
			  </complexType>
			</element>
			<!-- v6.0: Assigns objects to targets. For example, to assign a dossier to an issue. -->
			<element name="CreateObjectTargets">
			  <complexType>
				<sequence>
					<element name="Ticket"	type="xsd:string"/>
					<element name="IDs" 	type="tns:ArrayOfString"/>
					<element name="Targets"	type="tns:ArrayOfTarget"/>
				</sequence>
			  </complexType>
			</element>
			<!-- v6.0 -->
			<element name="CreateObjectTargetsResponse">
			  <complexType>
				<sequence>
					<element name="IDs" 	type="tns:ArrayOfString"/>
					<element name="Targets" type="tns:ArrayOfTarget"/>
				</sequence>
			  </complexType>
			</element>
			<!-- v6.0 -->
			<element name="UpdateObjectTargets">
			   <complexType>
				  <sequence>
					<element name="Ticket"	type="xsd:string"/>
					<element name="IDs" 	type="tns:ArrayOfString"/>
					<element name="Targets" type="tns:ArrayOfTarget"/>
				  </sequence>
			   </complexType>
			</element>
			<!-- v6.0 -->
			<element name="UpdateObjectTargetsResponse">
			  <complexType>
				<sequence>
					<element name="IDs" 	type="tns:ArrayOfString"/>
					<element name="Targets" type="tns:ArrayOfTarget"/>
				</sequence>
			  </complexType>
			</element>
			<!-- v6.0 -->
			<element name="DeleteObjectTargets">
			  <complexType>
				<sequence>
					<element name="Ticket"	type="xsd:string"/>
					<element name="IDs" 	type="tns:ArrayOfString"/>
					<element name="Targets"	type="tns:ArrayOfTarget"/>
				</sequence>
			  </complexType>
			</element>
			<!-- Retrieves information of a specified version of a object. -->
			<element name="GetVersion">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="ID" type="xsd:string"/>
					<element name="Version" type="xsd:string"/>
					<element name="Rendition" type="tns:RenditionType"/>
					<element name="Areas" type="tns:ArrayOfAreaType" nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0 -->
				</sequence>
			  </complexType>
			</element>
			<element name="GetVersionResponse">
			  <complexType>
				<sequence>
					<element name="VersionInfo" type="tns:VersionInfo"/>
				</sequence>
			  </complexType>
			</element>
			<element name="ListVersions">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="ID" type="xsd:string"/>
					<element name="Rendition" type="tns:RenditionType" nillable="true"/>	<!-- v4.2 -->
					<element name="Areas" type="tns:ArrayOfAreaType" nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v8.0 -->
				</sequence>
			  </complexType>
			</element>
			<element name="ListVersionsResponse">
			  <complexType>
				<sequence>
					<element name="Versions" type="tns:ArrayOfVersionInfo"/>
				</sequence>
			  </complexType>
			</element>
			<element name="RestoreVersion">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="ID" type="xsd:string"/>
					<element name="Version" type="xsd:string"/>
				</sequence>
			  </complexType>
			</element>
			
			<!--
				Since v7.4 the xxxWorkspace services are added. Through these services, InDesign
				Server can be requested to generate preview files (JPEG) per page or a PDF file that
				contains all pages on which the article is placed. These services are called by
				the CS editor to create a temporary folder to write an article file (CS5 format)
				that is currently being edit. This folder is called 'workspace' and is used by
				InDesign Server to write generated preview files (JPEG) and PDF output files that
				can be downloaded by end user at any time after calling the PreviewArticleAtWorkspace.
				This service returns the generated preview/pdf pages through:
					PreviewArticleAtWorkspaceResponse -> Pages -> Page -> Files -> File - FileUrl
				These URLs point to the previewindex.php module which returns the real preview/pdf 
				content and can be fired at any time as long at the workspace is present. When the
				article is closed, the workspace must be cleared by client calling DeleteArticleWorkspace.
				
				The list of Elements sent through SaveArticleInWorkspace and PreviewArticleAtWorkspace
				services is there for optimization purposes; When only one (or a few) text component(s)
				are changed by the user, CS editor can send only those elements. When text components
				are added or removed, the Content should always be used. Nevertheless, added components
				are not refleced through previews or PDFs since those elements are not placed on layout yet.
				
				The CS editor is responsible to update the text component's -version- GUIDs that are
				changed by the user. This is to trigger InDesign Server to reload latest text content
				into the corresponding frame. This should be done for Content and Elements. (Obviously, 
				the text component's GUIDs are there to identify frames and therefor should never change.)
				
				Since 9.5, the Content parameter should be set to nil to have better remote performance.
				When Content=nil and ID is set, the server automatically resolves content from filestore.
				For new articles set ID=nil but always populate the Content parameter. Both nil is not allowed.
			-->
			<element name="CreateArticleWorkspace">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="ID"            type="xsd:string" nillable="true"/>
					<element name="Format"        type="xsd:string"/>
					<element name="Content"       type="xsd:string" nillable="true"/>
				</sequence>
			  </complexType>
			</element>
			<element name="CreateArticleWorkspaceResponse">
			  <complexType>
				<sequence>
					<element name="WorkspaceId"   type="xsd:string"/>
				</sequence>
			  </complexType>
			</element>
			
			<element name="ListArticleWorkspaces">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
				</sequence>
			  </complexType>
			</element>
			<element name="ListArticleWorkspacesResponse">
			  <complexType>
				<sequence>
					<element name="Workspaces"    type="tns:ArrayOfString"/>
				</sequence>
			  </complexType>
			</element>
			
			<element name="GetArticleFromWorkspace">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="WorkspaceId"   type="xsd:string"/>
				</sequence>
			  </complexType>
			</element>
			<element name="GetArticleFromWorkspaceResponse">
			  <complexType>
				<sequence>
					<element name="ID"            type="xsd:string" nillable="true"/>
					<element name="Format"        type="xsd:string"/>
					<element name="Content"       type="xsd:string"/>
				</sequence>
			  </complexType>
			</element>			
			
			<element name="SaveArticleInWorkspace">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="WorkspaceId"   type="xsd:string"/>
					<element name="ID"            type="xsd:string" nillable="true"/>
					<element name="Format"        type="xsd:string"/>
					<element name="Content"       type="xsd:string" nillable="true"/> <!-- full content, see comments above -->
					<element name="Elements"      type="tns:ArrayOfElement" nillable="true"/> <!-- changed text frames, see comments above -->
				</sequence>
			  </complexType>
			</element>
			
			<element name="PreviewArticleAtWorkspace">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="WorkspaceId"   type="xsd:string"/>
					<element name="ID"            type="xsd:string" nillable="true"/>
					<element name="Format"        type="xsd:string"/>
					<element name="Content"       type="xsd:string" nillable="true"/> <!-- full content, see comments above -->
					<element name="Elements"      type="tns:ArrayOfElement" nillable="true"/> <!-- changed text frames, see comments above -->
					<element name="Action"        type="xsd:string"/> <!-- Supported Action: 'Compose','Preview','PDF'-->
					<element name="LayoutId"      type="xsd:string"        nillable="true"/>
					<element name="EditionId"     type="xsd:string"        nillable="true"/>
					<element name="PreviewType"   type="tns:PreviewType"   nillable="true" minOccurs="0" default="page"/> <!-- v7.6: Type of preview that needs to be generated. Pass nil when Action is not set to Preview. --> 
					<element name="RequestInfo"   type="tns:ArrayOfString" nillable="true" minOccurs="0" maxOccurs="1"/>  
					<!-- v9.7: Which kind of information to resolve.
						Supported values:
							- InDesignArticles   - v9.7: Get InDesignArticles and populate Placements with their frames.
							- Relations          - v9.7: Get Relations (and Relation->Placements) of objects that are placed on the same pages as the article.
					-->
				</sequence>
			  </complexType>
			</element>
			<element name="PreviewArticleAtWorkspaceResponse">
			  <complexType>
				<sequence>
					<element name="Placements"    type="tns:ArrayOfPlacement"/> <!-- Contains article's placements. Since 9.7 is also contains the placements for the InDesignArticles. -->
					<element name="Elements"      type="tns:ArrayOfElement"/>
					<element name="Pages"         type="tns:ArrayOfPage" nillable="true"/>
					<element name="LayoutVersion" type="xsd:string"/>
					<element name="InDesignArticles" type="tns:ArrayOfInDesignArticle" 
													nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.7: The InDesign Articles on the layout. -->
					<element name="Relations" type="tns:ArrayOfRelation" 
													nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.7: The placed relations of the layout. -->
				</sequence>
			  </complexType>
			</element>				
			
			<!-- Since 9.4: Preview multiple articles in one workspace at once. -->
			<element name="PreviewArticlesAtWorkspace">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="WorkspaceId"   type="xsd:string"/>
					<element name="Articles"      type="tns:ArrayOfArticleAtWorkspace"/>
					<element name="Action"        type="xsd:string"/> <!-- Supported Action: 'Compose','Preview','PDF'-->
					<element name="LayoutId"      type="xsd:string" nillable="true"/>
					<element name="EditionId"     type="xsd:string" nillable="true"/>
					<element name="PreviewType"   type="tns:PreviewType" 
													nillable="true" minOccurs="0" default="page"/> <!-- Type of preview that needs to be generated. Pass nil when Action is not set to Preview. --> 
					<element name="RequestInfo"   type="tns:ArrayOfString" 
													nillable="true" minOccurs="0" maxOccurs="1"/>  <!-- v9.7: See PreviewArticleAtWorkspace for supported options. -->
				</sequence>
			  </complexType>
			</element>
			<element name="PreviewArticlesAtWorkspaceResponse">
			  <complexType>
				<sequence>
					<element name="Placements"    type="tns:ArrayOfPlacement"/> <!-- Contains article's placements. Since 9.7 is also contains the placements for the InDesignArticles. -->
					<element name="Elements"      type="tns:ArrayOfElement"/>
					<element name="Pages"         type="tns:ArrayOfPage" nillable="true"/>
					<element name="LayoutVersion" type="xsd:string"/>
					<element name="InDesignArticles" type="tns:ArrayOfInDesignArticle" 
													nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.7: The InDesign Articles on the layout. -->
					<element name="Relations" type="tns:ArrayOfRelation" 
													nillable="true" minOccurs="0" maxOccurs="1"/> <!-- v9.7: The placed relations of the layout. -->
				</sequence>
			  </complexType>
			</element>				
			
			<element name="DeleteArticleWorkspace">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="WorkspaceId"   type="xsd:string"/>
				</sequence>
			  </complexType>
			</element>

			<!--
				Since v7.4 the CheckSpelling, GetSuggestions and CheckSpellingAndSuggest services are added. 
				When the user has typed some text, the words can be checked through CheckSpelling and for misspelled 
				words, and red curly braces can be shown, as done for the Multi-Channel editor in Content Station.
				When an article contains hundreds of words, and the SOAP protocol is used, it is advisable to split-up
				and call CheckSpelling/CheckSpellingAndSuggest service many times, for the sake of performance.
				For misspelled words, the GetSuggestions service can be called to find out what correct
				suggestion there are in the dictionary, which can be shown to the user to select from.
				To avoid users to wait for suggestion while pulling down the context menu, clients can
				send multiple misspelled words at once after opening the article. Note that this sevice 
				can be costly for many words, and so it is advisable not to send too many at once.
				The "Language" parameter is in [llCC] format (l = language code, C = county code).
				The "PublicationId" parameter should be taken from the article's metadata. For new articles,
				clients should first ask user to save the article. Clients pass zero when they do not support
				the server setup feature which allows brand specific dictionaries. (Zero means system-wide.)
			-->
			<element name="CheckSpelling">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="Language"      type="xsd:string"/>
					<element name="PublicationId" type="xsd:string"/>
					<element name="WordsToCheck"  type="tns:ArrayOfString"/>
				</sequence>
			  </complexType>
			</element>
			<element name="CheckSpellingResponse">
			  <complexType>
				<sequence>
					<element name="MisspelledWords" type="tns:ArrayOfString"/>
				</sequence>
			  </complexType>
			</element>

			<element name="GetSuggestions">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="Language"      type="xsd:string"/>
					<element name="PublicationId" type="xsd:string"/>
					<element name="WordsToCheck"  type="tns:ArrayOfString"/>
				</sequence>
			  </complexType>
			</element>
			<element name="GetSuggestionsResponse">
			  <complexType>
				<sequence>
					<element name="Suggestions"   type="tns:ArrayOfSuggestion"/>
				</sequence>
			  </complexType>
			</element>
			
			<element name="CheckSpellingAndSuggest">
			  <complexType>
				<sequence>
					<element name="Ticket"        type="xsd:string"/>
					<element name="Language"      type="xsd:string"/>
					<element name="PublicationId" type="xsd:string"/>
					<element name="WordsToCheck"  type="tns:ArrayOfString"/>
				</sequence>
			  </complexType>
			</element>
			<element name="CheckSpellingAndSuggestResponse">
			  <complexType>
				<sequence>
					<element name="Suggestions"   type="tns:ArrayOfSuggestion"/>
				</sequence>
			  </complexType>
			</element>
			
			<!-- Executes a predefined query on the database. -->
			<element name="NamedQuery">
			  <complexType>
				<sequence>
					<element name="Ticket"		 type="xsd:string"/>
					<element name="Query"		 type="xsd:string"/>
					<element name="Params"		 type="tns:ArrayOfQueryParam"/>
					<element name="FirstEntry"	 type="xsd:unsignedInt" 		nillable="true"/>	<!-- v4.2: Index of first requested object of total count (TotalEntries) -->
					<element name="MaxEntries"	 type="xsd:unsignedInt" 		nillable="true"/>	<!-- v4.2: Max count of requested objects (zero for all, nil for DBMAXQUERY) -->
					<element name="Hierarchical" type="xsd:boolean" 			nillable="true"/> 	<!-- v4.2: Requests to include ChildRows (placements/components) - Default false! -->
					<element name="Order"		 type="tns:ArrayOfQueryOrder"	nillable="true"/>	<!-- v4.2 -->
				</sequence>
			  </complexType>
			</element>
			<element name="NamedQueryResponse">
			  <complexType>
				<sequence>
					<element name="Columns"			 type="tns:ArrayOfProperty"/>
					<element name="Rows"			 type="tns:ArrayOfRow"/>
					<element name="ChildColumns"	 type="tns:ArrayOfProperty" nillable="true"/>	<!-- v4.2: column header of ChildRows -->
					<element name="ChildRows"		 type="tns:ArrayOfChildRow" nillable="true"/>	<!-- v4.2: child objects of returned root objects, which might *not* match the query -->
					<element name="ComponentColumns" type="tns:ArrayOfProperty" nillable="true"/>	<!-- v4.2: column header of ComponentRows -->
					<element name="ComponentRows"	 type="tns:ArrayOfChildRow" nillable="true"/>	<!-- v4.2: article's text components, returned in Rows or ChildRows -->
					<element name="FirstEntry"		 type="xsd:unsignedInt"		nillable="true"/> 	<!-- v4.2: Index of first returned object of total count (TotalEntries) -->
					<element name="ListedEntries"	 type="xsd:unsignedInt"		nillable="true"/>	<!-- v4.2: Count of returned objects -->
					<element name="TotalEntries"	 type="xsd:unsignedInt"		nillable="true"/>	<!-- v4.2: Total count objects matching the query -->
					<element name="UpdateID"		 type="xsd:string"			nillable="true"/>	<!-- v6.0: For future usage -->
					<element name="Facets"	 		 type="tns:ArrayOfFacet" 	nillable="true"/>	<!-- v7.0: column header of Facets -->
					<element name="SearchFeatures" 	 type="tns:ArrayOfFeature"	nillable="true"/>	<!-- v7.0: For now only uses key, no possible values right now -->
				</sequence>
			  </complexType>
			</element>
			<element name="ChangePassword">
			  <complexType>
				<sequence>
					<!-- The Ticket is given when user is logged in OR the Name is given when password is expired -->
					<element name="Ticket"	type="xsd:string"	nillable="true"/>	<!-- nillable since v4.2 -->
					<element name="Old"		type="xsd:string"/>
					<element name="New"		type="xsd:string"/>
					<element name="Name"	type="xsd:string"	nillable="true"/> 	<!-- v4.2 -->
				</sequence>
			  </complexType>
			</element>
			
			<!-- Sends messages to objects or users. -->
			<element name="SendMessages">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="Messages" type="tns:ArrayOfMessage"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- DEPRECATED since v8.0. Use Objects->Object->MessageList->Messages instead. -->
					<element name="MessageList" type="tns:MessageList"
							nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v8.0: Messages to send.  -->
				</sequence>
			  </complexType>
			</element>
			<!-- Since v8.0 -->
			<element name="SendMessagesResponse">
			  <complexType>
				<sequence>
					<element name="MessageList" type="tns:MessageList"/>
					<element name="Reports"     type="tns:ArrayOfErrorReport" nillable="true"/> <!-- v8.0: Errors and warnings of saving the Messages. -->
				</sequence>
			  </complexType>
			</element>
			
			<element name="CopyObject">
			  <complexType>
				<sequence>
					<element name="Ticket"		type="xsd:string"/>
					<element name="SourceID"	type="xsd:string"/>
					<element name="MetaData"	type="tns:MetaData"/>
					<element name="Relations"	type="tns:ArrayOfRelation" nillable="true"/> <!-- v8.0 -->
					<element name="Targets"		type="tns:ArrayOfTarget" nillable="true"/> <!-- v6.0 -->
				</sequence>
			  </complexType>
			</element>
			<element name="CopyObjectResponse">
			  <complexType>
				<sequence>
					<element name="MetaData"	type="tns:MetaData"/>
					<element name="Relations"	type="tns:ArrayOfRelation"/> <!-- v8.0 -->
					<element name="Targets"		type="tns:ArrayOfTarget"/> <!-- v6.0 -->
				</sequence>
			  </complexType>
			</element>
			
			<element name="SetObjectProperties">
			  <complexType>
				<sequence>
					<element name="Ticket"		type="xsd:string"/>
					<element name="ID"			type="xsd:string"/>
					<element name="MetaData"	type="tns:MetaData"/>
					<element name="Targets"		type="tns:ArrayOfTarget" nillable="true"/> <!-- v6.0 -->
				</sequence>
			  </complexType>
			</element>
			<element name="SetObjectPropertiesResponse">
			  <complexType>
				<sequence>
					<element name="MetaData"	type="tns:MetaData"/>
					<element name="Targets"		type="tns:ArrayOfTarget"/> <!-- v6.0 -->
				</sequence>
			  </complexType>
			</element>
			
			<!-- 
				Since v9.2. Update properties for multiple objects at once.
			-->
			<element name="MultiSetObjectProperties">
			  <complexType>
				<sequence>
					<element name="Ticket"      type="xsd:string"/>
					<element name="IDs"         type="tns:ArrayOfString"/>          <!-- IDs of objects to update properties for. -->
					<element name="MetaData"    type="tns:ArrayOfMetaDataValue"/>   <!-- Object properties to be changed. -->
				</sequence>
			  </complexType>
			</element>
			<element name="MultiSetObjectPropertiesResponse">
			  <complexType>
				<sequence>
					<element name="MetaData"    type="tns:ArrayOfMetaDataValue"/>   <!-- Changed object properties. -->
					<element name="Reports"     type="tns:ArrayOfErrorReport"/>     <!-- Errors and warnings of object properties updates. Empty when all ok. -->
				</sequence>
			  </complexType>
			</element>

			<!--
				Sends an object to the next status in the workflow.
				If both State and RouteTo are nil the object is sent to the next status and the
				object is routed to the configured user or user group (automatic routing).
				DEPRECATED since v9.2, use SendToNext instead.
			-->
			<element name="SendTo">
			  <complexType>
				<sequence>
					<element name="Ticket"		type="xsd:string"/>
					<element name="IDs"			type="tns:ArrayOfString"/>
					<element name="WorkflowMetaData" type="tns:WorkflowMetaData"/>
				</sequence>
			  </complexType>
			</element>
			<element name="SendToResponse">
			  <complexType>
				<sequence>
					<element name="SendTo"		type="tns:WorkflowMetaData"/>
				</sequence>
			  </complexType>
			</element>

            <!--
                V9.2: Sends an object to the next status in the worfklow.
            -->
            <element name="SendToNext">
                <complexType>
                    <sequence>
                        <element name="Ticket" type="xsd:string"/>
                        <element name="IDs"    type="tns:ArrayOfString"/>
                    </sequence>
                </complexType>
            </element>
            <element name="SendToNextResponse">
                <complexType>
                    <sequence>
                        <element name="RoutingMetaDatas" type="tns:ArrayOfRoutingMetaData"/> <!-- Since 9.2. Changed routing properties, which may differ per object, particularly when used to implement the SendToNext feature. -->
                        <element name="Reports" type="tns:ArrayOfErrorReport"/> <!-- Since 9.2. Errors and warnings of object properties updates. Empty when all ok. -->
                    </sequence>
                </complexType>
            </element>


			<!--
				v4.1: Take documents (home) to work disconnected or bring back documents for online usage.
				Clients should only call this when server returns the KeepCheckedOut feature.
			-->
			<element name="ChangeOnlineStatus">
			  <complexType>
				<sequence>
					<element name="Ticket" type="xsd:string"/>
					<element name="IDs" type="tns:ArrayOfString"/>			 <!-- Objects to change status -->
					<element name="OnlineStatus" type="tns:OnlineStatusType"/> <!-- Request to change the objects into this new status -->
				</sequence>
			  </complexType>
			</element>
			<!--
				Deprecated, see GetDialog2.
			-->
			<element name="GetDialog">
			  <complexType>
				<sequence>
					<element name="Ticket"  type="xsd:string"/>                      <!-- Ticket retrieved through LogOn. Mandatory. -->
					<element name="ID"      type="xsd:string"     nillable="true"/>  <!-- Object ID. Required when Action != Create. Else, should be nil -->
					<element name="Publication" type="xsd:string" nillable="true"/>  <!-- Publication/Brand ID. Nil means: use object/first Publication. -->
					<element name="Issue"   type="xsd:string"     nillable="true"/>  <!-- Issue ID. Nil means: use object/current Issue. -->
					<element name="Section" type="xsd:string"     nillable="true"/>  <!-- Category ID. Nil means: use object/default Category. -->
					<element name="State"   type="xsd:string"     nillable="true"/>  <!-- v7.0: Status ID. Nil means: use object/default Status. -->
					<element name="Type"    type="tns:ObjectType" nillable="true"/>  <!-- Object Type. Required when Action = Create. Else, should be nil. -->
					<element name="Action"  type="tns:Action"     nillable="true"/>  <!-- Workflow Action type. -->
					<element name="RequestDialog"      type="xsd:boolean"/>          <!-- Asks to populate Dialog element at response. -->
					<element name="RequestPublication" type="xsd:boolean"/>          <!-- Asks to populate Publications element at response. -->
					<element name="RequestMetaData"    type="xsd:boolean"/>          <!-- Asks to populate MetaData element at response. (Do not confuse with Dialog->MetaData.) -->
					<element name="RequestStates"      type="xsd:boolean"/>          <!-- Asks to populate GetStatesResponse element at response. -->
					<element name="RequestTargets"     type="xsd:boolean"/>          <!-- v6.0: Indicates if client supports the Targets complex widget (that hold multiple issues/editions). -->
					<element name="DefaultDossier" type="xsd:string" nillable="true"/> <!-- Refer to 'DefaultDossier' explanation in GetDialog2 -->
					<element name="Parent"  type="xsd:string"     nillable="true"/>  <!-- Refer to 'Parent' explanation in GetDialog2 -->
					<element name="Template" type="xsd:string"    nillable="true"/>  <!-- Refer to 'Template' explanation in GetDialog2 -->
					<element name="Areas"   type="tns:ArrayOfAreaType" nillable="true" minOccurs="0" maxOccurs="1"/>	<!-- v8.0: Area to search for the object. Nil means 'workflow' area only (for backwards compatibility reasons).-->
				</sequence>
			  </complexType>
			</element>
			<element name="GetDialogResponse">
			  <complexType>
				<sequence>
					<element name="Dialog"            type="tns:Dialog"            nillable="true"/> <!-- Definition of dialog to show. Nil when RequestDialog=false -->
					<element name="Publications"   type="tns:ArrayOfPublication"   nillable="true"/> <!-- Publications to list. Nil when RequestPublication=false -->
					<element name="PublicationInfo"   type="tns:PublicationInfo"   nillable="true"/> <!-- Definition of current publication. Nil when RequestPublication=false -->
					<element name="MetaData"          type="tns:MetaData"          nillable="true"/> <!-- MetaData of object as stored at DB. Nil when RequestMetaData=false -->
					<!-- ?? How to fix: Attribute 'element' cannot appear in element 'element' -->
					<element name="GetStatesResponse" type="tns:GetStatesResponse" nillable="true"/> <!-- Statuses, users and groups to populate RouteTo .Nil when RequestStates=false. -->
					<element name="Targets"           type="tns:ArrayOfTarget"     nillable="true"/> <!-- v6.0: Object's targets. Nil when RequestTargets=false -->
					<element name="RelatedTargets"    type="tns:ArrayOfObjectTargetsInfo" nillable="true"/> <!-- v7.0: Targets of related objects. Nil when RequestTargets=false -->
					<element name="Dossiers"          type="tns:ArrayOfObjectInfo" nillable="true"/> <!-- v7.0: Dossiers to let user pick one to create object into. Nil when RequestDossiers=false. -->
				</sequence>
			  </complexType>
			</element>
			<!--
				v8.0: GetDialog2 is introduced which supersedes GetDialog.
				GetDialog is kept for backward compatibility with v7 clients, but became deprecated.
				Retrieve all information to show a workflow dialog to end user.
				Clients call this again e.g. when different publication has been selected.
			-->
			<element name="GetDialog2"> 
			  <complexType>
				<sequence>
					<element name="Ticket"  type="xsd:string"/>                         <!-- Ticket retrieved through LogOn. Mandatory. -->
					<element name="Action"  type="tns:Action"     nillable="true"/>     <!-- Workflow Action type. -->
					<element name="MetaData" type="tns:ArrayOfMetaDataValue"  nillable="true"/> <!-- v8.0: MetaData value allows client app to round trip the data.-->
					<element name="Targets"  type="tns:ArrayOfTarget" nillable="true"/> <!-- v8.0: Object's targets. Data contained in Targets allow client app to round trip the data. -->

					<element name="DefaultDossier" type="xsd:string" nillable="true"/>
					<!-- v7.0: Dossier ID: Request to populate the Dossier property. The given Publication and Issue are used to 
						get dossiers (to choose from). If no Issue specified, first one is taken. The dossier ID will be used to set the 
						default value at Dossier property. If DefaultDossier is nil (or left out) no dossier property nor dossiers will be returned. -->

					<element name="Parent" type="xsd:string" nillable="true"/>
					<!-- v7.0: Parent ID: When creating objects that are placed (such as creating articles form layout) the client
						knows that the object will be placed, but the server does not know yet. For placed objects, the dialog has some
						fields disabled (greyed) like Publication/Brand, Issue and Category. Nil (or left out) means object is not placed. -->

					<element name="Template" type="xsd:string" nillable="true"/>
					<!-- v7.0: Template ID : When creating objects, some properties should be taken from a template. Those should be 
						pre-filled in for the new object at the Create workflow dialog. Provide the object ID of the template (that was
						picked by user) to let server pre-fill properties. Nil (or left out) means object is not created from template. -->
						
					<element name="Areas" type="tns:ArrayOfAreaType" nillable="true" minOccurs="0" maxOccurs="1"/>
					<!-- v8.0: Area to search for the object. Nil means 'workflow' area only (for backwards compatibility reasons).-->

                    <element name="MultipleObjects" type="xsd:boolean" nillable="true" minOccurs="0" maxOccurs="1"/>
                    <!-- v9.2: Indicate if the dialog is for multiple objects or single object. Nil means 'false' (for backwards compatibility reasons).-->
				</sequence>
			  </complexType>
			</element>
			<element name="GetDialog2Response">
			  <complexType>
				<sequence>
					<element name="Dialog"            type="tns:Dialog"            nillable="true"/> <!-- Definition of dialog to show. Nil when RequestDialog=false -->
					<element name="PubChannels"       type="tns:ArrayOfPubChannelInfo"	nillable="true"/> <!-- v8.0: PubChannels of current publication.-->
					<element name="MetaData"          type="tns:MetaData"          nillable="true"/> <!-- MetaData of object as stored at DB. Nil when RequestMetaData=false -->
					<element name="Targets"           type="tns:ArrayOfTarget"     nillable="true"/> <!-- v6.0: Object's targets. Nil when RequestTargets=false -->
					<element name="RelatedTargets"    type="tns:ArrayOfObjectTargetsInfo" nillable="true"/> <!-- v7.0: Targets of related objects. Nil when RequestTargets=false -->
					<element name="Relations"         type="tns:ArrayOfRelation"   nillable="true"/> <!-- v9.0: Relations of the object for which the dialog was requested. Used to resolve objects placed on PublishForm objects. -->
				</sequence>
			  </complexType>
			</element>

		<!-- v6.0: PubOverview start. -->

			<!-- 
				Retrieves page thumbs (or previews) to populate the Publication Overview.
				(Typically called after GetPagesInfo.) In the response, file URLs are provided.
				Each URL refers to a page thumb (or preview) as copied by the server to the 
				Transfer Folder for the client to download. Thumbs can be downloaded in parallel
				to gain better performance. Once all thumbs are shown, clients are responsible 
				to remove those files from the Transfer Folder. In subsequent phase, the
				GetPages service can be called again to retrieve the page previews.
				v6.0: Introduced the GetPages service.
				v8.3.3: Performance increased significantly.
			-->
			<element name="GetPages">
			  <complexType>
				<sequence>
					<element name="Ticket"          type="xsd:string"/>                               <!-- Ticket retrieved through LogOn. Mandatory. -->
					<!-- Filter objects -->
					<element name="Params"          type="tns:ArrayOfQueryParam"
					                                minOccurs="0" maxOccurs="1"     nillable="true"/> <!-- DEPRECATED since 8.3.3. Clients could call QueryObjects first to filter and find out layout ids. In GetPages, those can be provided through the IDs param. -->
					<element name="IDs"             type="tns:ArrayOfString"        nillable="true"/> <!-- Layout object ids (mandatory). -->
					<!-- Filter pages -->
					<element name="PageOrders"      type="tns:ArrayOfString"
					                                minOccurs="0" maxOccurs="1"     nillable="true"/> <!-- DEPRECATED since 8.3.3. Pass nil or leave out. -->
					<element name="PageSequences"   type="tns:ArrayOfString"
					                                minOccurs="0" maxOccurs="1"     nillable="true"/> <!-- DEPRECATED since 8.3.3. Pass nil or leave out. -->
					<element name="Edition"         type="tns:Edition"              nillable="true"/> <!-- Filter pages for one edition. Always provide one Edition (or nil when there are no editions configured for the brand). -->
					<!-- Extras to return in response -->
					<element name="Renditions"      type="tns:ArrayOfRenditionType" nillable="true"/> <!-- Renditions to get file attachments per page (mandatory). Always provide one rendition. For two renditions, call another GetPages request. -->
					<element name="RequestMetaData" type="xsd:boolean"
					                                minOccurs="0" maxOccurs="1"     nillable="true"/> <!-- DEPRECATED since 8.3.3. Pass nil or leave out. Note: Always BasicMetaData is returned per object in response. -->
					<element name="RequestFiles"    type="xsd:boolean" 
					                                minOccurs="0" maxOccurs="1"     nillable="true"/> <!-- DEPRECATED since 8.3.3. Pass nil or leave out. Note: Always the files (attachments) are returned as requested in Renditions param. -->
				</sequence>
			  </complexType>
			</element>

			<!-- v6.0 -->
			<element name="GetPagesResponse">
			  <complexType>
				<sequence>
					<element name="ObjectPageInfos" type="tns:ArrayOfObjectPageInfo"/>
				</sequence>
			  </complexType>
			</element>

			<!--
				Since 9.1 Autocomplete provider. For a DialogWidget there is a PropertyInfo and a corresponding PropertyUsage.
				When the PropertyInfo has a TermEntity defined and the PropertyUsage has a AutocompleteProvider defined, this
				service can be requested. It defines how far the end-user has filled in a property that is shown on a dialog.
				In the response the Autocomplete provider suggests options how to complete the value.
			-->
			<element name="Autocomplete">
				<complexType>
					<sequence>
						<element name="Ticket"      type="xsd:string"/>
						<element name="AutocompleteProvider" type="xsd:string"/>                      <!-- internal plugin name that ships an Autocomplete connector -->
						<element name="PublishSystemId"      type="xsd:string"/>                      <!-- Unique id of the publishing system. Use to bind the publishing storage. -->
						<element name="ObjectId"    type="xsd:string" nillable="true"/>               <!-- object id (e.g. Publish Form) for which the user is currently filling in a property. Nil when object is not created yet. -->
						<element name="Property"    type="tns:AutoSuggestProperty" />                 <!-- the property the user is filling in -->
						<element name="TypedValue"  type="xsd:string"/>                               <!-- user typed value (so far) filled in for the property -->
					</sequence>
				</complexType>
			</element>
			<element name="AutocompleteResponse">
				<complexType>
					<sequence>
						<element name="Tags"   type="tns:ArrayOfAutoSuggestTag"/>
					</sequence>
				</complexType>
			</element>

			<!--
				Since 9.1 Suggestions provider. For a DialogWidget there is a PropertyInfo and a corresponding PropertyUsage.
				When the PropertyInfo has a SuggestionEntity defined and the PropertyUsage has a SuggestionProvider defined, this
				service can be requested. It defines all plain text of the object (e.g. PublishForm) and a list of properties
				that is shown on a dialog for which suggestion are wanted. In the response the Suggestions provider suggests
				options (tags) that can be picked by the end-user filling in those properties.
			-->
			<element name="Suggestions">
				<complexType>
					<sequence>
						<element name="Ticket"               type="xsd:string"/>
						<element name="SuggestionProvider"    type="xsd:string"/>                      <!-- internal plugin name that ships a Suggestions connector -->
						<element name="ObjectId"             type="xsd:string"/>                       <!-- object id (e.g. Publish Form) for which the user is currently filling in a property -->
						<element name="MetaData"             type="tns:ArrayOfMetaDataValue"/>         <!-- strings, multilines and text components only -->
						<element name="SuggestForProperties" type="tns:ArrayOfAutoSuggestProperty"/>   <!-- for optimization of the response -->
					</sequence>
				</complexType>
			</element>
			<element name="SuggestionsResponse">
				<complexType>
					<sequence>
						<element name="SuggestedTags"   type="tns:ArrayOfEntityTags"/>
					</sequence>
				</complexType>
			</element>

			<!--
				Since 9.1 Object Labels. Labels can be created for Dossiers (and Dossier Templates).
				Once a label is created, it can be updated (renamed) or deleted for the dossier.
				When an object is contained by a dossier, it can be labelled as well. However, that
				works quite differently; Only the dossier's labels can be choosen, and they
				are tracked on the "contained" object relation (with dossier as parent and the
				object as child). For these object types, we speak of 'adding' and 'removing' labels.
				These operations work with labels that already exist for the parental dossier.
				When a dossier gets created (CreateObjects) it inherits the labels from its template.
			-->
			<element name="CreateObjectLabels">
				<complexType>
					<sequence>
						<element name="Ticket"               type="xsd:string"/>
						<element name="ObjectId"             type="xsd:string"/>                       <!-- Dossier id (or dossier template id).  -->
						<element name="ObjectLabels"         type="tns:ArrayOfObjectLabel"/>           <!-- Labels to create. Label names should be provided. Label ids should be nil. -->
					</sequence>
				</complexType>
			</element>
			<element name="CreateObjectLabelsResponse">
				<complexType>
					<sequence>
						<element name="ObjectLabels" type="tns:ArrayOfObjectLabel"/>                   <!-- The created dossier labels. -->
					</sequence>
				</complexType>
			</element>
			
			<!-- 
				Renames one or more object labels for a certain dossier. For one request, 
				only labels for one certain dossier should be provided.
				See CreateObjectLabels header for more info.

				Currently this service isn't implemented. This is a placeholder for future functionality.
			-->
			<element name="UpdateObjectLabels">
				<complexType>
					<sequence>
						<element name="Ticket"               type="xsd:string"/>
						<element name="ObjectLabels"         type="tns:ArrayOfObjectLabel"/>           <!-- Labels to rename. Label ids and names should be provided. -->
					</sequence>
				</complexType>
			</element>
			<element name="UpdateObjectLabelsResponse">
				<complexType>
					<sequence>
						<element name="ObjectLabels" type="tns:ArrayOfObjectLabel"/>                   <!-- Renamed object labels. -->
					</sequence>
				</complexType>
			</element>
	
			<!-- 
				Deletes one or more object labels for a certain dossier. For one request, 
				only labels for one certain dossier should be provided.
				See CreateObjectLabels header for more info.
			-->
			<element name="DeleteObjectLabels">
				<complexType>
					<sequence>
						<element name="Ticket"               type="xsd:string"/>
						<element name="ObjectLabels"         type="tns:ArrayOfObjectLabel"/>           <!-- Labels to delete. Label ids should be provided. -->
					</sequence>
				</complexType>
			</element>
	
			<!-- 
				Assigns an existing dossier label to one or more objects it contains.
				See CreateObjectLabels header for more info.
			-->
			<element name="AddObjectLabels">
				<complexType>
					<sequence>
						<element name="Ticket"               type="xsd:string"/>
						<element name="ParentId"             type="xsd:string"/>                       <!-- Dossier id (or dossier template id). -->
						<element name="ChildIds"             type="tns:ArrayOfString"/>                <!-- Ids of objects contained by the dossier (ParentId). -->
						<element name="ObjectLabels"         type="tns:ArrayOfObjectLabel"/>           <!-- Dossier labels to assign to the contained object. -->
					</sequence>
				</complexType>
			</element>
	
			<!-- 
				Un-assigns an existing dossier label from one or more objects it contains.
				See CreateObjectLabels header for more info.
			-->
			<element name="RemoveObjectLabels">
				<complexType>
					<sequence>
						<element name="Ticket"               type="xsd:string"/>
						<element name="ParentId"             type="xsd:string"/>                       <!-- Dossier id (or dossier template id). -->
						<element name="ChildIds"             type="tns:ArrayOfString"/>                <!-- Ids of objects contained by the dossier (ParentId). -->
						<element name="ObjectLabels"         type="tns:ArrayOfObjectLabel"/>           <!-- Dossier labels to unassign to the contained object. -->
					</sequence>
				</complexType>
			</element>
			
			<!-- 
				v9.8: Creates operations for an object. Only layout objects are supported. 
				The layout should be locked by caller before, or else the server will try 
				to obtain a lock during the service call. The operations can only be created
				for the latest version of the layout. When the layout is opened in SC, the
				operations will be processed on the layout with help of an AutomatedPrintWorkflow 
				connector. Since new operations can be resolved/changed during creation, the
				created operations are returned by this web service.
				See ObjectOperation data structure definition for more info.
			-->
			<element name="CreateObjectOperations">
				<complexType>
					<sequence>
						<element name="Ticket"               type="xsd:string"/>
						<element name="HaveVersion"          type="tns:ObjectVersion"/>
						<element name="Operations"           type="tns:ArrayOfObjectOperation"/>
					</sequence>
				</complexType>
			</element>

			<element name="CreateObjectOperationsResponse">
				<complexType>
					<sequence>
						<element name="Operations"           type="tns:ArrayOfObjectOperation"/>
						<element name="Reports"              type="tns:ArrayOfErrorReport" nillable="true"/> <!-- Errors and warnings of the operation. -->
					</sequence>
				</complexType>
			</element>
			
			<!--
				Retrieves geometrical information for all pages produced for an issue.
				This can be used to compose an outline (grid) for the Publication Overview.
				While drawing the outline, GetPages can be called to retrieve the page thumbs.
				v6.0: Introduced the GetPagesInfo service.
				v8.3.3: Performance increased significantly.
			-->
			<element name="GetPagesInfo">
				<complexType>
					<sequence>
						<element name="Ticket"          type="xsd:string"/>                               <!-- Ticket retrieved through LogOn. Mandatory. -->
						<!-- Filter objects -->
						<element name="Issue"          	type="tns:Issue"				nillable="true"/> <!-- Filter pages for one issue. Pass nil to use IDs instead. -->
						<element name="IDs"             type="tns:ArrayOfString"        nillable="true"/> <!-- Layout object ids. Pass nil to use Issue instead. -->
						<element name="Edition"         type="tns:Edition"              nillable="true"/> <!-- Filter pages for one edition. Always provide one Edition (or nil when there are no editions configured for the brand). -->
                        <element name="Category"        type="tns:Category"             nillable="true"     minOccurs="0"   maxOccurs="1"/> <!-- Filter pages for one category. For backwards compatibility it is not mandatory. -->
                        <element name="State"           type="tns:State"                nillable="true"     minOccurs="0"   maxOccurs="1"/> <!-- Filter pages for one state. For backwards compatibility it is not mandatory. -->
					</sequence>
				</complexType>
			</element>
			
			<!-- v6.0 -->
			<element name="GetPagesInfoResponse">
				<complexType>
					<sequence>
						<element name="ReversedReadingOrder"	type="xsd:boolean"/>
						<element name="ExpectedPages" 			type="xsd:integer"  nillable="true"/> 
						<element name="PageOrderMethod"			type="xsd:string"/>   <!--  Layout Ordered or PageOrdered  -->
						<element name="EditionsPages"			type="tns:ArrayOfEditionPages"/>
						<element name="LayoutObjects"			type="tns:ArrayOfLayoutObject"/>
						<element name="PlacedObjects"			type="tns:ArrayOfPlacedObject"/>
					</sequence>
				</complexType>
			</element>

			<!-- v6.0 -->
			<complexType name="ArrayOfEditionPages">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:EditionPages[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="EditionPages">
				<all>
					<element name="Edition" 		type="tns:Edition"  nillable="true"/>  <!--  nil designates all editions except exceptions which will have a complete <EditionPages> node -->
					<element name="PageObjects" 		type="tns:ArrayOfPageObject"/>
				</all>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="ArrayOfPageObject">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PageObject[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="PageObject">
				<all>
					<element name="IssuePagePosition"       type="xsd:unsignedInt"/> 	<!--  absolute page position wthin the Issue (numbers might be skipped if that page is not in that edition) -->
					<element name="PageOrder"   			type="xsd:unsignedInt"/>    <!-- Logical page number: i=>1, ii=>2, A=>1, B=>2, etc -->
					<element name="PageNumber"   			type="xsd:string"/> 
					<element name="PageSequence"   			type="xsd:unsignedInt"/>         
					<element name="Height"      			type="xsd:double"/>                             <!-- Height in points (pt) -->              
					<element name="Width"       			type="xsd:double"/>                             <!-- Width in points (pt) -->
					<element name="ParentLayoutId"       	type="xsd:string"/>   
					<element name="OutputRenditionAvailable"       type="xsd:boolean"/>   
					<element name="PlacementInfos"				type="tns:ArrayOfPlacementInfo"/>
				</all>
			</complexType>
			
			<complexType name="ArrayOfPlacementInfo">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PlacementInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="PlacementInfo">
				<all>
					<element name="Id"       type="xsd:string"/> 
					<element name="Left"     type="xsd:double"/> 
					<element name="Top"      type="xsd:double"/> 
					<element name="Width"    type="xsd:double"/> 
					<element name="Height"   type="xsd:double"/> 	
				</all>
			</complexType>

			<!-- v6.0 -->
			<complexType name="ArrayOfLayoutObject">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:LayoutObject[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!-- v6.0 -->
			<complexType name="LayoutObject">
				<all>
					<element name="Id"      	type="xsd:string"/> 	
					<element name="Name"   		type="xsd:string"/>
					<element name="Category"   	type="tns:Category"/>
					<element name="State"   	type="tns:State"/>
					<element name="Version"   	type="xsd:string"/>
					<element name="LockedBy"   	type="xsd:string"/>   <!-- v6.1 -->
				</all>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="ArrayOfPlacedObject">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PlacedObject[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- v6.0 -->
			<complexType name="PlacedObject">
				<all>
					<element name="Id"      	type="xsd:string"/> 	
					<element name="Name"   		type="xsd:string"/>
					<element name="Type"   		type="xsd:string"/>
					<element name="State"   	type="tns:State"/>
					<element name="Version"   	type="xsd:string"/>
					<element name="LockedBy"   	type="xsd:string"/>   <!-- v6.1 -->
					<element name="Format"   	type="xsd:string"/>   <!-- v8.0 -->
				</all>
			</complexType>
				
		<!-- v6.0: PubOverview end -->

		</schema>
	</types>
	
	<!--
		- Session management -
	-->
	<message name="GetServers">
		<part name="parameters" element="tns:GetServers"/> <!-- there are no parameters, but here we keep WSDL2Java happy -->
	</message>
	<message name="GetServersResponse">
		<part name="parameters" element="tns:GetServersResponse"/>
	</message>
	<message name="LogOn">
		<part name="parameters" element="tns:LogOn"/>
	</message>
	<message name="LogOnResponse">
		<part name="parameters" element="tns:LogOnResponse"/>
	</message>
	<message name="LogOff">
		<part name="parameters" element="tns:LogOff"/>
	</message>
	<message name="LogOffResponse"/>
	<message name="ChangePassword">
		<part name="parameters" element="tns:ChangePassword"/>
	</message>
	<message name="ChangePasswordResponse"/>
	<message name="ChangeOnlineStatus">
		<part name="parameters" element="tns:ChangeOnlineStatus"/>
	</message>
	<message name="ChangeOnlineStatusResponse"/>
	<!--
		- Workflow -
	-->
	<message name="GetStates">
		<part name="parameters" element="tns:GetStates"/>
	</message>
	<message name="GetStatesResponse">
		<part name="parameters" element="tns:GetStatesResponse"/>
	</message>
	<message name="GetDialog">
		<part name="parameters" element="tns:GetDialog"/>
	</message>
	<message name="GetDialogResponse">
		<part name="parameters" element="tns:GetDialogResponse"/>
	</message>
	<message name="GetDialog2">
		<part name="parameters" element="tns:GetDialog2"/>
	</message>
	<message name="GetDialog2Response">
		<part name="parameters" element="tns:GetDialog2Response"/>
	</message>
	<message name="SendTo">
		<part name="parameters" element="tns:SendTo"/>
	</message>
	<message name="SendToResponse">
		<part name="parameters" element="tns:SendToResponse"/>
	</message>
    <message name="SendToNext">
        <part name="parameters" element="tns:SendToNext"/>
    </message>
    <message name="SendToNextResponse">
        <part name="parameters" element="tns:SendToNextResponse"/>
    </message>
	<message name="SendMessages">
		<part name="parameters" element="tns:SendMessages"/>
	</message>
	<message name="SendMessagesResponse">
		<part name="parameters" element="tns:SendMessagesResponse"/>
	</message>
	<message name="CreateObjectOperations">
		<part name="parameters" element="tns:CreateObjectOperations"/>
	</message>
	<message name="CreateObjectOperationsResponse">
		<part name="parameters" element="tns:CreateObjectOperationsResponse"/>
	</message>
	<!--
		- Object management - 
	-->
	<message name="CreateObjects">
		<part name="parameters" element="tns:CreateObjects"/>
	</message>
	<message name="CreateObjectsResponse">
		<part name="parameters" element="tns:CreateObjectsResponse"/>
	</message>
	<message name="InstantiateTemplate">
		<part name="parameters" element="tns:InstantiateTemplate"/>
	</message>
	<message name="InstantiateTemplateResponse">
		<part name="parameters" element="tns:InstantiateTemplateResponse"/>
	</message>
	<message name="GetObjects">
		<part name="parameters" element="tns:GetObjects"/>
	</message>
	<message name="GetObjectsResponse">
		<part name="parameters" element="tns:GetObjectsResponse"/>
	</message>
	<message name="SaveObjects">
		<part name="parameters" element="tns:SaveObjects"/>
	</message>
	<message name="SaveObjectsResponse">
		<part name="parameters" element="tns:SaveObjectsResponse"/>
	</message>
	<message name="LockObjects">
		<part name="parameters" element="tns:LockObjects"/>
	</message>
	<message name="LockObjectsResponse">
		<part name="parameters" element="tns:LockObjectsResponse"/>
	</message>
	<message name="UnlockObjects">
		<part name="parameters" element="tns:UnlockObjects"/>
	</message>
	<message name="UnlockObjectsResponse">
		<part name="parameters" element="tns:UnlockObjectsResponse"/>
	</message>
	<message name="DeleteObjects">
		<part name="parameters" element="tns:DeleteObjects"/>
	</message>
	<message name="DeleteObjectsResponse">
		<part name="parameters" element="tns:DeleteObjectsResponse"/>
	</message>
	<message name="RestoreObjects">
		<part name="parameters" element="tns:RestoreObjects"/>
	</message>
	<message name="RestoreObjectsResponse">
		<part name="parameters" element="tns:RestoreObjectsResponse"/>
	</message>
	<message name="CopyObject">
		<part name="parameters" element="tns:CopyObject"/>
	</message>
	<message name="CopyObjectResponse">
		<part name="parameters" element="tns:CopyObjectResponse"/>
	</message>
	<message name="SetObjectProperties">
		<part name="parameters" element="tns:SetObjectProperties"/>
	</message>
	<message name="SetObjectPropertiesResponse">
		<part name="parameters" element="tns:SetObjectPropertiesResponse"/>
	</message>
	<message name="MultiSetObjectProperties">
		<part name="parameters" element="tns:MultiSetObjectProperties"/>
	</message>
	<message name="MultiSetObjectPropertiesResponse">
		<part name="parameters" element="tns:MultiSetObjectPropertiesResponse"/>
	</message>	
	<!--
		- Object querying -
	-->
	<message name="QueryObjects">
		<part name="parameters" element="tns:QueryObjects"/>
	</message>
	<message name="QueryObjectsResponse">
		<part name="parameters" element="tns:QueryObjectsResponse"/>
	</message>
	<message name="NamedQuery">
		<part name="parameters" element="tns:NamedQuery"/>
	</message>
	<message name="NamedQueryResponse">
		<part name="parameters" element="tns:NamedQueryResponse"/>
	</message>
	<!--
		- Object relations -
	-->
	<message name="CreateObjectRelations">
		<part name="parameters" element="tns:CreateObjectRelations"/>
	</message>
	<message name="CreateObjectRelationsResponse">
		<part name="parameters" element="tns:CreateObjectRelationsResponse"/>
	</message>
	<message name="UpdateObjectRelations">
		<part name="parameters" element="tns:UpdateObjectRelations"/>
	</message>
	<message name="UpdateObjectRelationsResponse">
		<part name="parameters" element="tns:UpdateObjectRelationsResponse"/>
	</message>
	<message name="DeleteObjectRelations">
		<part name="parameters" element="tns:DeleteObjectRelations"/>
	</message>
	<message name="DeleteObjectRelationsResponse"/>
	<message name="GetObjectRelations">
		<part name="parameters" element="tns:GetObjectRelations"/>
	</message>
	<message name="GetObjectRelationsResponse">
		<part name="parameters" element="tns:GetObjectRelationsResponse"/>
	</message>
	<!--
		- Object targets -
	-->
	<message name="CreateObjectTargets">
		<part name="parameters" element="tns:CreateObjectTargets"/>
	</message>
	<message name="CreateObjectTargetsResponse">
		<part name="parameters" element="tns:CreateObjectTargetsResponse"/>
	</message>
	<message name="UpdateObjectTargets">
		<part name="parameters" element="tns:UpdateObjectTargets"/>
	</message>
	<message name="UpdateObjectTargetsResponse">
		<part name="parameters" element="tns:UpdateObjectTargetsResponse"/>
	</message>
	<message name="DeleteObjectTargets">
		<part name="parameters" element="tns:DeleteObjectTargets"/>
	</message>
	<message name="DeleteObjectTargetsResponse"/>
	<!-- 
		- Object versions -
	-->
	<message name="GetVersion">
		<part name="parameters" element="tns:GetVersion"/>
	</message>
	<message name="GetVersionResponse">
		<part name="parameters" element="tns:GetVersionResponse"/>
	</message>
	<message name="ListVersions">
		<part name="parameters" element="tns:ListVersions"/>
	</message>
	<message name="ListVersionsResponse">
		<part name="parameters" element="tns:ListVersionsResponse"/>
	</message>
	<message name="RestoreVersion">
		<part name="parameters" element="tns:RestoreVersion"/>
	</message>
	<message name="RestoreVersionResponse"/>
	<!--
		- Preview WriteToFit - 
	-->
	<message name="CreateArticleWorkspace">
		<part name="parameters" element="tns:CreateArticleWorkspace"/>
	</message>
	<message name="CreateArticleWorkspaceResponse">
		<part name="parameters" element="tns:CreateArticleWorkspaceResponse"/>
	</message>
	<message name="ListArticleWorkspaces">
		<part name="parameters" element="tns:ListArticleWorkspaces"/>
	</message>
	<message name="ListArticleWorkspacesResponse">
		<part name="parameters" element="tns:ListArticleWorkspacesResponse"/>
	</message>
	<message name="GetArticleFromWorkspace">
		<part name="parameters" element="tns:GetArticleFromWorkspace"/>
	</message>
	<message name="GetArticleFromWorkspaceResponse">
		<part name="parameters" element="tns:GetArticleFromWorkspaceResponse"/>
	</message>
	<message name="SaveArticleInWorkspace">
		<part name="parameters" element="tns:SaveArticleInWorkspace"/>
	</message>
	<message name="SaveArticleInWorkspaceResponse" />
	<message name="PreviewArticleAtWorkspace">
		<part name="parameters" element="tns:PreviewArticleAtWorkspace"/>
	</message>
	<message name="PreviewArticleAtWorkspaceResponse">
		<part name="parameters" element="tns:PreviewArticleAtWorkspaceResponse"/>
	</message>
	<message name="PreviewArticlesAtWorkspace">
		<part name="parameters" element="tns:PreviewArticlesAtWorkspace"/>
	</message>
	<message name="PreviewArticlesAtWorkspaceResponse">
		<part name="parameters" element="tns:PreviewArticlesAtWorkspaceResponse"/>
	</message>
	<message name="DeleteArticleWorkspace">
		<part name="parameters" element="tns:DeleteArticleWorkspace"/>
	</message>
	<message name="DeleteArticleWorkspaceResponse" />
	<!-- 
		- Spelling and Suggestions -
	-->
	<message name="CheckSpelling">
		<part name="parameters" element="tns:CheckSpelling"/>
	</message>
	<message name="CheckSpellingResponse">
		<part name="parameters" element="tns:CheckSpellingResponse"/>
	</message>
	<message name="GetSuggestions">
		<part name="parameters" element="tns:GetSuggestions"/>
	</message>
	<message name="GetSuggestionsResponse">
		<part name="parameters" element="tns:GetSuggestionsResponse"/>
	</message>
	<message name="CheckSpellingAndSuggest">
		<part name="parameters" element="tns:CheckSpellingAndSuggest"/>
	</message>
	<message name="CheckSpellingAndSuggestResponse">
		<part name="parameters" element="tns:CheckSpellingAndSuggestResponse"/>
	</message>
	<!--
		- Autocomplete & Suggestions -
	-->
	<message name="Autocomplete">
		<part name="parameters" element="tns:Autocomplete"/>
	</message>
	<message name="AutocompleteResponse">
		<part name="parameters" element="tns:AutocompleteResponse"/>
	</message>
	<message name="Suggestions">
		<part name="parameters" element="tns:Suggestions"/>
	</message>
	<message name="SuggestionsResponse">
		<part name="parameters" element="tns:SuggestionsResponse"/>
	</message>
	<!-- 
		- Publication overview -
	-->
	<message name="GetPages">
		<part name="parameters" element="tns:GetPages"/>
	</message>
	<message name="GetPagesResponse">
		<part name="parameters" element="tns:GetPagesResponse"/>
	</message>
	<message name="GetPagesInfo">
		<part name="parameters" element="tns:GetPagesInfo"/>
	</message>
	<message name="GetPagesInfoResponse">
		<part name="parameters" element="tns:GetPagesInfoResponse"/>
	</message>

	<!-- 
		- Object Labels -
	-->
	<message name="CreateObjectLabels">
		<part name="parameters" element="tns:CreateObjectLabels"/>
	</message>
	<message name="CreateObjectLabelsResponse">
		<part name="parameters" element="tns:CreateObjectLabelsResponse"/>
	</message>
	<message name="UpdateObjectLabels">
		<part name="parameters" element="tns:UpdateObjectLabels"/>
	</message>
	<message name="UpdateObjectLabelsResponse">
		<part name="parameters" element="tns:UpdateObjectLabelsResponse"/>
	</message>
	<message name="DeleteObjectLabels">
		<part name="parameters" element="tns:DeleteObjectLabels"/>
	</message>
	<message name="DeleteObjectLabelsResponse"/>
	<message name="AddObjectLabels">
		<part name="parameters" element="tns:AddObjectLabels"/>
	</message>
	<message name="AddObjectLabelsResponse"/>
	<message name="RemoveObjectLabels">
		<part name="parameters" element="tns:RemoveObjectLabels"/>
	</message>
	<message name="RemoveObjectLabelsResponse"/>
    	
	<portType name="SmartConnectionPort">
		<operation name="GetServers">
			<input message="tns:GetServers"/>
			<output message="tns:GetServersResponse"/>
		</operation>
		<operation name="LogOn">
			<input message="tns:LogOn"/>
			<output message="tns:LogOnResponse"/>
		</operation>
		<operation name="LogOff">
			<input message="tns:LogOff"/>
			<output message="tns:LogOffResponse"/>
		</operation>
		<operation name="GetStates">
			<input message="tns:GetStates"/>
			<output message="tns:GetStatesResponse"/>
		</operation>
		<operation name="CreateObjects">
			<input message="tns:CreateObjects"/>
			<output message="tns:CreateObjectsResponse"/>
		</operation>
		<operation name="InstantiateTemplate">
			<input message="tns:InstantiateTemplate"/>
			<output message="tns:InstantiateTemplateResponse"/>
		</operation>
		<operation name="GetObjects">
			<input message="tns:GetObjects"/>
			<output message="tns:GetObjectsResponse"/>
		</operation>
		<operation name="QueryObjects">
			<input message="tns:QueryObjects"/>
			<output message="tns:QueryObjectsResponse"/>
		</operation>
		<operation name="SaveObjects">
			<input message="tns:SaveObjects"/>
			<output message="tns:SaveObjectsResponse"/>
		</operation>
		<operation name="LockObjects">
			<input message="tns:LockObjects"/>
			<output message="tns:LockObjectsResponse"/>
		</operation>
		<operation name="UnlockObjects">
			<input message="tns:UnlockObjects"/>
			<output message="tns:UnlockObjectsResponse"/>
		</operation>
		<operation name="DeleteObjects">
			<input message="tns:DeleteObjects"/>
			<output message="tns:DeleteObjectsResponse"/>
		</operation>
		<operation name="RestoreObjects">
			<input message="tns:RestoreObjects"/>
			<output message="tns:RestoreObjectsResponse"/>
		</operation>
		<operation name="CreateObjectRelations">
			<input message="tns:CreateObjectRelations"/>
			<output message="tns:CreateObjectRelationsResponse"/>
		</operation>
		<operation name="UpdateObjectRelations">
			<input message="tns:UpdateObjectRelations"/>
			<output message="tns:UpdateObjectRelationsResponse"/>
		</operation>
		<operation name="DeleteObjectRelations">
			<input message="tns:DeleteObjectRelations"/>
			<output message="tns:DeleteObjectRelationsResponse"/>
		</operation>
		<operation name="GetObjectRelations">
			<input message="tns:GetObjectRelations"/>
			<output message="tns:GetObjectRelationsResponse"/>
		</operation>
		<operation name="CreateObjectTargets">
			<input message="tns:CreateObjectTargets"/>
			<output message="tns:CreateObjectTargetsResponse"/>
		</operation>
		<operation name="UpdateObjectTargets">
			<input message="tns:UpdateObjectTargets"/>
			<output message="tns:UpdateObjectTargetsResponse"/>
		</operation>
		<operation name="DeleteObjectTargets">
			<input message="tns:DeleteObjectTargets"/>
			<output message="tns:DeleteObjectTargetsResponse"/>
		</operation>
		<operation name="GetVersion">
			<input message="tns:GetVersion"/>
			<output message="tns:GetVersionResponse"/>
		</operation>
		<operation name="ListVersions">
			<input message="tns:ListVersions"/>
			<output message="tns:ListVersionsResponse"/>
		</operation>
		<operation name="RestoreVersion">
			<input message="tns:RestoreVersion"/>
			<output message="tns:RestoreVersionResponse"/>
		</operation>
		<operation name="CreateArticleWorkspace">
			<input message="tns:CreateArticleWorkspace"/>
			<output message="tns:CreateArticleWorkspaceResponse"/>
		</operation>
		<operation name="ListArticleWorkspaces">
			<input message="tns:ListArticleWorkspaces"/>
			<output message="tns:ListArticleWorkspacesResponse"/>
		</operation>
		<operation name="GetArticleFromWorkspace">
			<input message="tns:GetArticleFromWorkspace"/>
			<output message="tns:GetArticleFromWorkspaceResponse"/>
		</operation>
		<operation name="SaveArticleInWorkspace">
			<input message="tns:SaveArticleInWorkspace"/>
			<output message="tns:SaveArticleInWorkspaceResponse"/>
		</operation>
		<operation name="PreviewArticleAtWorkspace">
			<input message="tns:PreviewArticleAtWorkspace"/>
			<output message="tns:PreviewArticleAtWorkspaceResponse"/>
		</operation>
		<operation name="PreviewArticlesAtWorkspace">
			<input message="tns:PreviewArticlesAtWorkspace"/>
			<output message="tns:PreviewArticlesAtWorkspaceResponse"/>
		</operation>
		<operation name="DeleteArticleWorkspace">
			<input message="tns:DeleteArticleWorkspace"/>
			<output message="tns:DeleteArticleWorkspaceResponse"/>
		</operation>
		<operation name="CheckSpelling">
			<input message="tns:CheckSpelling"/>
			<output message="tns:CheckSpellingResponse"/>
		</operation>
		<operation name="GetSuggestions">
			<input message="tns:GetSuggestions"/>
			<output message="tns:GetSuggestionsResponse"/>
		</operation>
		<operation name="CheckSpellingAndSuggest">
			<input message="tns:CheckSpellingAndSuggest"/>
			<output message="tns:CheckSpellingAndSuggestResponse"/>
		</operation>
		<operation name="NamedQuery">
			<input message="tns:NamedQuery"/>
			<output message="tns:NamedQueryResponse"/>
		</operation>
		<operation name="ChangePassword">
			<input message="tns:ChangePassword"/>
			<output message="tns:ChangePasswordResponse"/>
		</operation>
		<operation name="SendMessages">
			<input message="tns:SendMessages"/>
			<output message="tns:SendMessagesResponse"/>
		</operation>
		<operation name="CreateObjectOperations">
			<input message="tns:CreateObjectOperations"/>
			<output message="tns:CreateObjectOperationsResponse"/>
		</operation>
		<operation name="CopyObject">
			<input message="tns:CopyObject"/>
			<output message="tns:CopyObjectResponse"/>
		</operation>
		<operation name="SetObjectProperties">
			<input message="tns:SetObjectProperties"/>
			<output message="tns:SetObjectPropertiesResponse"/>
		</operation>
		<operation name="MultiSetObjectProperties">
			<input message="tns:MultiSetObjectProperties"/>
			<output message="tns:MultiSetObjectPropertiesResponse"/>
		</operation>		
		<operation name="SendTo">
			<input message="tns:SendTo"/>
			<output message="tns:SendToResponse"/>
		</operation>
        <operation name="SendToNext">
            <input message="tns:SendToNext"/>
            <output message="tns:SendToNextResponse"/>
        </operation>
		<operation name="ChangeOnlineStatus">
			<input message="tns:ChangeOnlineStatus"/>
			<output message="tns:ChangeOnlineStatusResponse"/>
		</operation>
		<operation name="GetDialog">
			<input message="tns:GetDialog"/>
			<output message="tns:GetDialogResponse"/>
		</operation>
		<operation name="GetDialog2">
			<input message="tns:GetDialog2"/>
			<output message="tns:GetDialog2Response"/>
		</operation>
		<operation name="GetPages">
			<input message="tns:GetPages"/>
			<output message="tns:GetPagesResponse"/>
		</operation>
		<operation name="GetPagesInfo">
			<input message="tns:GetPagesInfo"/>
			<output message="tns:GetPagesInfoResponse"/>
		</operation>
		<operation name="Autocomplete">
			<input message="tns:Autocomplete"/>
			<output message="tns:AutocompleteResponse"/>
		</operation>
		<operation name="Suggestions">
			<input message="tns:Suggestions"/>
			<output message="tns:SuggestionsResponse"/>
		</operation>
		<operation name="CreateObjectLabels">
			<input message="tns:CreateObjectLabels"/>
			<output message="tns:CreateObjectLabelsResponse"/>
		</operation>
		<operation name="UpdateObjectLabels">
			<input message="tns:UpdateObjectLabels"/>
			<output message="tns:UpdateObjectLabelsResponse"/>
		</operation>
		<operation name="DeleteObjectLabels">
			<input message="tns:DeleteObjectLabels"/>
			<output message="tns:DeleteObjectLabelsResponse"/>
		</operation>
		<operation name="AddObjectLabels">
			<input message="tns:AddObjectLabels"/>
			<output message="tns:AddObjectLabelsResponse"/>
		</operation>
		<operation name="RemoveObjectLabels">
			<input message="tns:RemoveObjectLabels"/>
			<output message="tns:RemoveObjectLabelsResponse"/>
		</operation>
    </portType>

	<binding name="SmartConnectionBinding" type="tns:SmartConnectionPort">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="GetServers">
			<soap:operation soapAction="urn:SmartConnection#GetServers"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="LogOn">
			<soap:operation soapAction="urn:SmartConnection#LogOn"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="LogOff">
			<soap:operation soapAction="urn:SmartConnection#LogOff"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetStates">
			<soap:operation soapAction="urn:SmartConnection#GetStates"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateObjects">
			<soap:operation soapAction="urn:SmartConnection#CreateObjects"/>
			<input>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="InstantiateTemplate">
			<soap:operation soapAction="urn:SmartConnection#InstantiateTemplate"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetObjects">
			<soap:operation soapAction="urn:SmartConnection#GetObjects"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="QueryObjects">
			<soap:operation soapAction="urn:SmartConnection#QueryObjects"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="SaveObjects">
			<soap:operation soapAction="urn:SmartConnection#SaveObjects"/>
			<input>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="LockObjects">
			<soap:operation soapAction="urn:SmartConnection#LockObjects"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="UnlockObjects">
			<soap:operation soapAction="urn:SmartConnection#UnlockObjects"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="DeleteObjects">
			<soap:operation soapAction="urn:SmartConnection#DeleteObjects"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="RestoreObjects">
			<soap:operation soapAction="urn:SmartConnection#RestoreObjects"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateObjectRelations">
			<soap:operation soapAction="urn:SmartConnection#CreateObjectRelations"/>
			<input>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="UpdateObjectRelations">
			<soap:operation soapAction="urn:SmartConnection#UpdateObjectRelations"/>
			<input>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="DeleteObjectRelations">
			<soap:operation soapAction="urn:SmartConnection#DeleteObjectRelations"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetObjectRelations">
			<soap:operation soapAction="urn:SmartConnection#GetObjectRelations"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateObjectTargets">
			<soap:operation soapAction="urn:SmartConnection#CreateObjectTargets"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="UpdateObjectTargets">
			<soap:operation soapAction="urn:SmartConnection#UpdateObjectTargets"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="DeleteObjectTargets">
			<soap:operation soapAction="urn:SmartConnection#DeleteObjectTargets"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetVersion">
			<soap:operation soapAction="urn:SmartConnection#GetVersion"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="ListVersions">
			<soap:operation soapAction="urn:SmartConnection#ListVersions"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="RestoreVersion">
			<soap:operation soapAction="urn:SmartConnection#RestoreVersion"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateArticleWorkspace">
			<soap:operation soapAction="urn:SmartConnection#CreateArticleWorkspace"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="ListArticleWorkspaces">
			<soap:operation soapAction="urn:SmartConnection#ListArticleWorkspaces"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetArticleFromWorkspace">
			<soap:operation soapAction="urn:SmartConnection#GetArticleFromWorkspace"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="SaveArticleInWorkspace">
			<soap:operation soapAction="urn:SmartConnection#SaveArticleInWorkspace"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="PreviewArticleAtWorkspace">
			<soap:operation soapAction="urn:SmartConnection#PreviewArticleAtWorkspace"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="PreviewArticlesAtWorkspace">
			<soap:operation soapAction="urn:SmartConnection#PreviewArticlesAtWorkspace"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="DeleteArticleWorkspace">
			<soap:operation soapAction="urn:SmartConnection#DeleteArticleWorkspace"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CheckSpelling">
			<soap:operation soapAction="urn:SmartConnection#CheckSpelling"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetSuggestions">
			<soap:operation soapAction="urn:SmartConnection#GetSuggestions"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CheckSpellingAndSuggest">
			<soap:operation soapAction="urn:SmartConnection#CheckSpellingAndSuggest"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="NamedQuery">
			<soap:operation soapAction="urn:SmartConnection#NamedQuery"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="ChangePassword">
			<soap:operation soapAction="urn:SmartConnection#ChangePassword"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="SendMessages">
			<soap:operation soapAction="urn:SmartConnection#SendMessages"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateObjectOperations">
			<soap:operation soapAction="urn:SmartConnection#CreateObjectOperations"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CopyObject">
			<soap:operation soapAction="urn:SmartConnection#CopyObject"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="SetObjectProperties">
			<soap:operation soapAction="urn:SmartConnection#SetObjectProperties"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="MultiSetObjectProperties">
			<soap:operation soapAction="urn:SmartConnection#MultiSetObjectProperties"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="SendTo">
			<soap:operation soapAction="urn:SmartConnection#SendTo"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
        </operation>
        <operation name="SendToNext">
            <soap:operation soapAction="urn:SmartConnection#SendToNext"/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
		</operation>
		<operation name="ChangeOnlineStatus">
			<soap:operation soapAction="urn:SmartConnection#ChangeOnlineStatus"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetDialog">
			<soap:operation soapAction="urn:SmartConnection#GetDialog"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetDialog2">
			<soap:operation soapAction="urn:SmartConnection#GetDialog2"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="GetPages">
			<soap:operation soapAction="urn:SmartConnection#GetPages"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
				<dime:message layout="http://schemas.xmlsoap.org/ws/2002/04/dime/closed-layout" wsdl:required="false"/>
			</output>
		</operation>
		<operation name="GetPagesInfo">
			<soap:operation soapAction="urn:SmartConnection#GetPagesInfo"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="Autocomplete">
			<soap:operation soapAction="urn:SmartConnection#Autocomplete"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="Suggestions">
			<soap:operation soapAction="urn:SmartConnection#Suggestions"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="CreateObjectLabels">
			<soap:operation soapAction="urn:SmartConnection#CreateObjectLabels"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="UpdateObjectLabels">
			<soap:operation soapAction="urn:SmartConnection#UpdateObjectLabels"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="DeleteObjectLabels">
			<soap:operation soapAction="urn:SmartConnection#DeleteObjectLabels"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="AddObjectLabels">
			<soap:operation soapAction="urn:SmartConnection#AddObjectLabels"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="RemoveObjectLabels">
			<soap:operation soapAction="urn:SmartConnection#RemoveObjectLabels"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
	</binding>
	<service name="SmartConnectionService">
		<documentation>Enterprise Server workflow service</documentation>
		<port name="SmartConnectionPortName" binding="tns:SmartConnectionBinding">
			<soap:address location="http://127.0.0.1/scenterprise/index.php"/> 			
		</port>
	</service>
</definitions>