<?xml version="1.0"?>
<!--
	Publishing WSDL
	
	Web service definition to publish dossiers (and their content) to channels like Web CMS.
	These services are implemented by Enterprise Server and are mainly called by Content Station.
	
	Any server plug-in can integrate a 3rd party CMS and take care of the actual publishing.
	This is established through the PubPublishing server plug-in connector interface.
	See /server/interfaces/plugins/connectors/PubPublishing_EnterpriseConnector.class.php
	
	In this definition, the terms Preview and Publish are used in service names. The actual operations 
	that are needed to implement those services all depends on the channel type and integration with
	the publishing system. For SMS channels, a Preview operation is something simulated at Enterprise
	Server and the Publish exports, upload, distributes and publishes a dossier all at once,
	which is unreversable. For Web channels, a Preview is generated at the Web CMS, and so dossiers
	are exported, uploaded and published in private use. For DPS, a Preview can be generated by
	Enterprise Server, while a Publish operation exports and uploads, whereby the DPS server takes
	care of distribution and the actual publish operation. This is all determined by the integration.
	
-->
<wsdl:definitions
	targetNamespace="urn:EnterprisePublishing"
	xmlns:tns="urn:EnterprisePublishing" 
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/">
	
	<wsdl:types xmlns="http://schemas.xmlsoap.org/wsdl/">
		<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:EnterprisePublishing">
		
			<!-- Types (shared with workflow WSDL) -->
			<simpleType name="ObjectType">
				<restriction base="string">
					<enumeration value=""/>    <!-- empty means: 'for all object types' -->
					<enumeration value="Article"/>
					<enumeration value="ArticleTemplate"/>
					<enumeration value="Layout"/>
					<enumeration value="LayoutTemplate"/>
					<enumeration value="Image"/>
					<enumeration value="Advert"/>
					<enumeration value="AdvertTemplate"/>
					<enumeration value="Plan"/> 
					<enumeration value="Audio"/> <!-- v5.0 feature -->
					<enumeration value="Video"/> <!-- v5.0 feature -->
					<enumeration value="Library"/> <!-- v5.0 feature -->
					<enumeration value="Dossier"/> <!-- v5.0 feature -->
					<enumeration value="DossierTemplate"/> <!-- v6.1 feature -->
					<enumeration value="LayoutModule"/> <!-- v6.0 feature -->
					<enumeration value="LayoutModuleTemplate"/> <!-- v6.0 feature -->
					<enumeration value="Task"/> <!-- v6.0 feature -->
					<enumeration value="Hyperlink"/> <!-- v6.0 feature -->
                    <enumeration value="Spreadsheet"/> <!-- v8.2 feature -->
					<enumeration value="Other"/> <!-- For future usage -->
                    <enumeration value="PublishForm"/> <!-- v9.0 feature -->
                    <enumeration value="PublishFormTemplate"/> <!-- v9.0 feature -->
				</restriction>
			</simpleType>
			
			<simpleType name="PropertyType">
				<restriction base="string">
					<enumeration value="string"/>
					<enumeration value="multistring"/> <!-- Allows commas used for separated vaues such as "keywords" -->
					<enumeration value="multiline"/> <!-- Allows line-endings used for multi-line text box such as "comments" -->
					<enumeration value="bool"/>
					<enumeration value="int"/>
					<enumeration value="double"/>
					<enumeration value="date"/>
					<enumeration value="datetime"/>
					<enumeration value="list"/> <!-- Allows single value selection from option list such as "publication -->
					<enumeration value="multilist"/> <!-- Allows multiple value selection from option list -->
					<enumeration value="fileselector"/> <!-- v8.2: Container widget that allows users to pick a file. Contains a "file" widget and optionally other widgets. -->
					<enumeration value="file"/> <!-- v8.2: Widget that represents a selected file, such as a thumbnail. -->
					<enumeration value="articlecomponentselector"/> <!-- v8.2: Container widget that allows users to pick a text component of an article. Contains an "articlecomponent" widget and optionally other widgets. -->
					<enumeration value="articlecomponent"/> <!-- v8.2: Widget that represents a selected file, such as a thumbnail. -->
				</restriction>
			</simpleType>
			
			<simpleType name="String">
				<restriction base="string"/>
			</simpleType>
			<complexType name="ArrayOfString">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:String[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<complexType name="ObjectInfo"> <!-- v7.5 -->
				<all>
					<element name="ID" type="xsd:string"/>
					<element name="Name" type="xsd:string"/>
					<element name="Type" type="tns:ObjectType"/>
				</all>
			</complexType>
			<complexType name="ArrayOfObjectInfo"> <!-- v7.5 -->
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ObjectInfo[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- Types -->
			<complexType name="UserMessage">
				<all>
					<element name="Severity"          type="xsd:string"/>                          <!-- Emergency, Critical, Error, Warning, Notice, Info, Debug -->
					<element name="MessageID"         type="xsd:int"/>                             <!-- Unique id of the message, so clients can understand some. -->
					<element name="Message"           type="xsd:string"/>                          <!-- Localized message, e.g. indicating the publishing problem. -->
					<element name="Reason"            type="xsd:string"
					                                  minOccurs="0"            maxOccurs="1"/>     <!-- v7.5 Optional: Localized reason, explains why the message happened. -->
				</all>
			</complexType>
			
			<complexType name="PageInfo"> <!-- v7.5 -->
				<all>
					<element name="PageNumber"        type="xsd:string"/>
					<element name="PageSequence"      type="xsd:string"/>
					<element name="PageOrder"         type="xsd:string"/>
				</all>
			</complexType>

			<complexType name="MessageContext"> <!-- v7.5 -->
				<all>
					<element name="Objects"           type="tns:ArrayOfObjectInfo"/>
					<element name="Page"              type="tns:PageInfo"      nillable="true"/>
				</all>
			</complexType>
			
			<complexType name="ReportMessage"> <!-- v7.5 -->
				<all>
					<element name="UserMessage"       type="tns:UserMessage"/>
					<element name="Context"           type="tns:MessageContext"/>
				</all>
			</complexType>
			<complexType name="ArrayOfReportMessage"> <!-- v7.5 -->
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ReportMessage[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!--
				PublishedDossier
				
				A dossier that has been publised, is about to get published or was published before.
				
				PublishedDate - indicates when the dossier has been published. Nill means not published.
				Introduced since 7.5 as it is 'moved' from PublishTarget. To avoid breaking existing
				integrations that use this interface, the PublishedDate is made optional. However, clients
				that are aware of this field, should not leave it out here but leave it out at PublishTarget.
				
				PublishMessage - is a message for the user about the publishing/preview action.
				There can be many messages and therefore it became deprecated since 7.5.
				Instead the Report at publish/preview operations should be used.
				
				Fields - provides channel specific data about the published dossier (while its other 
				properties are about the publishing process). The following fields could be ‘understood’ 
				by the client applications:
					- Views (unsignedInt)
					- Rating (double)
					- Raters (unsignedInt)
					- CommentsCount (unsignedInt)
					- Comments (ArrayOfString)
					- Online (boolean) Since 7.5, this supercedes the PublishedDossier->Online.
						Is dossier published online? If so, the dossier can be unpublished. 
						So for some channel systems (like SMS) this is always false.
					- URL (string) Since 7.5, this supercedes the PublishedDossier->URL.
						URL where published, or empty string if the dossier is not online (anymore).
			-->
			<complexType name="PublishedDossier">
				<all>
					<element name="DossierID"         type="xsd:string"/>                          <!-- Enterprise dossier Id -->
					<element name="Target"            type="tns:PublishTarget"/>                   <!-- Publishing target for this information -->
					<element name="PublishedDate"     type="xsd:dateTime"      nillable="true"     
					                                  minOccurs="0"            maxOccurs="1"/>     <!-- v7.5 Optional: See above. -->
					<element name="PublishMessage"    type="tns:UserMessage"   nillable="true"
					                                  minOccurs="0"            maxOccurs="1"/>     <!-- Deprecated since v7.5: See above. -->
					<element name="Online"            type="xsd:boolean"       nillable="true"
					                                  minOccurs="0"            maxOccurs="1"/>     <!-- Deprecated since v7.5: Superceded by "Fields". See above. -->
					<element name="URL"               type="xsd:string"        nillable="true"
					                                  minOccurs="0"            maxOccurs="1"/>     <!-- Deprecated since v7.5: Superceded by "Fields". See above. -->
					<element name="Fields"            type="tns:ArrayOfField"  nillable="true"/>   <!-- See above. -->
					<element name="History"           type="tns:ArrayOfPublishHistory" nillable="true"/> <!-- History of all publishing events for this dossier sorted in reverse order (so last publish event is first entry in array) -->
				</all>
			</complexType>
			<complexType name="ArrayOfPublishedDossier">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PublishedDossier[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!--
				An issue that has been publised, is about to get published or was published before.
				
				Version - Published issues are versioned in major.minor format. The version gets increased
				for each publishing operation. When content is updated, major is increased. Fields or   
				ordering updates are minor. The version is used to recognize if client has latest version.  
				If not, the client needs to get latest version before sending the update (again).

				Fields - provides channel specific data about the published dossier (while its other 
				properties are about the publishing process). The following fields could be ‘understood’ 
				by the client applications:
					- URL (string) URL where published, or empty string if the dossier is not online (anymore).
					- PublishStatus (string) One of the following values: ‘disabled’, ‘test’ or ‘production’.
					- PushNotification (string) Which push notification to send: 'ALL', 'NEWSSTAND' or 'REGULAR'
					- PushNotificationDate (datetime) The date on which the push notification was sent.
						
				PublishedDate - indicates when the issue has been published. When nil is returned, it 
				means the issue was not published yet. When nil is sent, it means the core should 
				determine a date. When sent and filled in, it overrules the core and it get stored as-is.
				
				DossierOrder - Contains comma separated dossier ids in -published- order. This order can be
				overruled/implemented by server plug-in (publishing integration), so the format can differ.
				Note that the -production- order is something else, which is stored at the issue itself.
				The two ordering systems are tracked to determine if the production order (workflow user
				is looking at) differs from the published order (readers are looking at). When different, 
				the ordering can be updated at the publishing system. The production order can be read/set
				by calling the GetDossierOrder and UpdateDossierOrder services.
			-->
			<complexType name="PublishedIssue"> <!-- v7.5 -->
				<all>
					<element name="Target"            type="tns:PublishTarget"/>
					<element name="Version"           type="xsd:string"/>
					<element name="Fields"            type="tns:ArrayOfField"  nillable="true"/>
					<element name="Report"            type="tns:ArrayOfReportMessage" nillable="true"/>
					<element name="PublishedDate"     type="xsd:dateTime"      nillable="true"/>
					<element name="DossierOrder"      type="tns:ArrayOfString" nillable="true"/>
				</all>
			</complexType>
			
			<complexType name="Field">
				<all>
					<element name="Key"               type="xsd:string"/>                          <!-- Identifier for this field -->
					<element name="Type"              type="tns:PropertyType"/>                    <!-- Value type: string, multistring (not supported), multiline, bool, int, double, date, datetime, list, multilist (not supported) -->
					<element name="Values"            type="tns:ArrayOfString"/>                   <!-- Value(s) for this field. Most common case this is a single entry with the value. -->
				</all>
			</complexType>
			<complexType name="ArrayOfField">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:Field[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!--
				Which magazine instance to publish. The magazine can be identified in many ways, depending
				on the channel type:
				- SMS channels have one issue, so specifying PubChannelID is enough.
				- Web channels have many issues, so IssueID should be given. 
				- DPS channels have issues and editions/devices. A combination of issue and edition/device 
				  indentifies one magazine instance (e.g. issue "Women - December 2011" for device "iPad"), 
				  so IssueID and EditionID should be given.

				When IssueID is given (at any request), the PubChannelID is implicit and should be set to null.
				When IssueID and EditionID are given, assumed is that both belong to the issue's pub channel.
				EditionID is introduced since 7.5 to support DPS channels and is made optional for backwards compat.
				
				PublishedDate - indicates when the dossier has been published. Nill means not published. 
				However, it does not belong to the PublishTarget and is therefore marked deprecated since 7.5
				and therefore made optional. Instead use the PublishedDate under PublishedDossier.
			-->
			<complexType name="PublishTarget">
				<all>
					<element name="PubChannelID"      type="xsd:string"        nillable="true"/>   <!-- ID of publication channel. Nill when IssueID is given. -->
					<element name="IssueID"           type="xsd:string"        nillable="true"/>   <!-- ID of issue. Nill for SMS channels having one issue only. -->
					<element name="EditionID"         type="xsd:string"        nillable="true"
					                                  minOccurs="0"            maxOccurs="1"/>     <!-- v7.5 Optional: ID of edition (=device). -->
					<element name="PublishedDate"     type="xsd:dateTime"      nillable="true"     
					                                  minOccurs="0"            maxOccurs="1"/>     <!-- Deprecated since 7.5. See above. -->
				</all>
			</complexType>
			<complexType name="ArrayOfPublishTarget">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PublishTarget[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<complexType name="PublishHistory">
				<all>
					<element name="PublishedDate"     type="xsd:dateTime" nillable="true"/>                        <!-- When the dossier was published -->
					<element name="SendDate"          type="xsd:dateTime"/>                        <!-- When was the dossier send for publication, this could be earlier than the actual publish date/time -->
					<element name="PublishedBy"       type="xsd:string"/>                          <!-- User who published the dossier -->
					<element name="PublishedObjects"  type="tns:ArrayOfPublishedObject"/>
				</all>
			</complexType>
			<complexType name="ArrayOfPublishHistory">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PublishHistory[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<complexType name="PublishedObject">
				<all>
					<element name="ObjectId"          type="xsd:string"/>                          <!-- Enterprise object id -->
					<element name="Version"           type="xsd:string"/>                          <!-- Version of the Enterprise object published -->
					<element name="Name"              type="string"/>
					<element name="Type"              type="string"/>
					<element name="Format"            type="string"/>
				</all>
			</complexType>
			<complexType name="ArrayOfPublishedObject">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:PublishedObject[]"/>
					</restriction>
				</complexContent>
			</complexType>

			<!--
				Introduced since 7.5. Indication for end user about the Preview or Publish operation
				that run server side for quite a while. The progress is given for multiple phases. 
				Phases are export or upload. There could be one or two phases, depending on the 
				channel type and integration with publish system. For each phase, the client draws 
				a progress bar and show the Label to end user. For the next phase, the progress bar 
				gets cleared and the Label gets updated. This repeats until all phases are completed.
				Percentage can be calculated client side: (Progress / Maximum) * 100.
				Note that all phases are returned, including the ones that are already done.
				Phases are sorted in the order they get executed.
			-->
			<complexType name="ProgressPhase">
				<all>
					<element name="ID"                type="xsd:string"/>                          <!-- Identification of this phase: export or upload. -->
					<element name="Label"             type="xsd:string"/>                          <!-- Localized name of this operation phase. -->
					<element name="Maximum"           type="xsd:integer"/>                         <!-- Total steps to take for this phase. -->
					<element name="Progress"          type="xsd:integer"/>                         <!-- Steps taken for this phase. -->
				</all>
			</complexType>
			<complexType name="ArrayOfProgressPhase">
				<complexContent>
					<restriction base="soap-enc:Array">
						<attribute ref="soap-enc:arrayType" wsdl:arrayType="tns:ProgressPhase[]"/>
					</restriction>
				</complexContent>
			</complexType>
			
			<!-- 
				PublishDossiers
				
				Publishes specified dossiers at a publication channel.
				Returns published dossiers and details about the export and/or distribute operations.
				
				PublishedDossiers - supercedes the deprecated DossierIDs and Targets params.
				The PublishedDossiers param specifies which dossiers to publish. In that list, use
				PublishedDossier->Target to specify for which channel/issue/device to publish the dossiers.
				
				RequestInfo - is added since v7.5. It is temporary optional for backwards compatibility.
				It allows clients to limit the amount of returned information and increase performance.
				Supported value is "History", which is member of:
					PublishDossiersResponse->PublishedDossiers->PublishedDossier
				E.g. when asked for History, History is resolved for all PublishedDossier(s) at repsonse.
				When null or left out, all information is returned. When empty, none of those is returned.
				
				OperationId - is added since v7.5. This is needed when the client implements the AbortOperation
				and OperationProgress services as well. The id must be a GUID that is unique within the
				entire system. The calling client needs to generate the GUID in 8-4-4-4-12 format.
			-->
			<xsd:element name="PublishDossiersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                                      <!-- Enterprise ticket -->
						<xsd:element name="DossierIDs"        type="tns:ArrayOfString"             nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>     <!-- Deprecated: Dossiers to publish. -->
						<xsd:element name="Targets"           type="tns:ArrayOfPublishTarget"      nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>     <!-- Deprecated: Where publish to. -->
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="RequestInfo"       type="tns:ArrayOfString"             nillable="true"
					                                          minOccurs="0"                        maxOccurs="1"/>
						<xsd:element name="OperationId"       type="xsd:string"
					                                          minOccurs="0"                        maxOccurs="1"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="PublishDossiersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<!--
				UpdateDossiers
				
				Updates specified dossiers at a publication channel (that were published before with PublishDossiersRequest).
				Returns re-published dossiers and details about the export and/or distribute operations.
				
				PublishedDossiers - supercedes the deprecated DossierIDs and Targets params.
				The PublishedDossiers param specifies which dossiers to re-publish. In that list, use
				PublishedDossier->Target to specify for which channel/issue/device to re-publish the dossiers.
				
				RequestInfo - is added since v7.5. It is temporary optional for backwards compatibility.
				It allows clients to limit the amount of returned information and increase performance.
				Supported value is "History", which is member of:
					UpdateDossiersResponse->PublishedDossiers->PublishedDossier
				E.g. when asked for History, History is resolved for all PublishedDossier(s) at repsonse.
				When null or left out, all information is returned. When empty, none of those is returned.
				
				OperationId - is added since v7.5. This is needed when the client implements the AbortOperation
				and OperationProgress services as well. The id must be a GUID that is unique within the
				entire system. The calling client needs to generate the GUID in 8-4-4-4-12 format.
			-->
			<xsd:element name="UpdateDossiersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                                      <!-- Enterprise ticket -->
						<xsd:element name="DossierIDs"        type="tns:ArrayOfString"             nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>     <!-- Deprecated: Dossiers to re-publish. -->
						<xsd:element name="Targets"           type="tns:ArrayOfPublishTarget"      nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>     <!-- Deprecated: Where to re-publish to. -->
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="RequestInfo"       type="tns:ArrayOfString"             nillable="true"
					                                          minOccurs="0"                        maxOccurs="1"/>
						<xsd:element name="OperationId"       type="xsd:string"
					                                          minOccurs="0"                        maxOccurs="1"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="UpdateDossiersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<!--
				UnPublishDossiers
				
				Unpublishes specified dossiers from a publication channel (that were published before with PublishDossiersRequest).
				
				PublishedDossiers - supercedes the deprecated DossierIDs and Targets params.
				The PublishedDossiers param specifies which dossiers to un-publish. In that list, use
				PublishedDossier->Target to specify for which channel/issue/device to un-publish the dossiers.
				
				OperationId - is added since v7.5. This is needed when the client implements the AbortOperation
				and OperationProgress services as well. The id must be a GUID that is unique within the
				entire system. The calling client needs to generate the GUID in 8-4-4-4-12 format.
			-->
			<xsd:element name="UnPublishDossiersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                                      <!-- Enterprise ticket -->
						<xsd:element name="DossierIDs"        type="tns:ArrayOfString"             nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>     <!-- Deprecated: Dossiers to unpublish. -->
						<xsd:element name="Targets"           type="tns:ArrayOfPublishTarget"      nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>     <!-- Deprecated: Where to unpublish from. -->
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="OperationId"       type="xsd:string"
					                                          minOccurs="0"                        maxOccurs="1"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="UnPublishDossiersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<!--
				GetDossierURL
				
				Returns URL for the specified dossier and target. If the dossier is not online (anymore) an exception
				will be raised. The URL is also returned as part of GetDossierInfo, but that service will return the 
				complete publishing history, so for performance reasons this method exists. 
				Note: channels that don’t have URLs (like SMS) will return an empty string. 
				Based on the channel type the client can also disable the UI.
			 -->
			<xsd:element name="GetDossierURLRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                  <!-- Enterprise ticket -->
						<xsd:element name="DossierID"         type="xsd:string"/>                  <!-- Enterprise dossier to get url for -->
						<xsd:element name="Target"            type="tns:PublishTarget"/>           <!-- Publishing target to get url for -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetDossierURLResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="URL"               type="xsd:string"/>                  <!-- empty strings if no URLs (like for SMS) -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<!--
				GetPublishInfo
				
				Returns complete publish information, including history, for specified dossiers and targets.
				Most of this information is stored by Enterprise, only publishInfo and URL has to be filled 
				in by Channel Publishing system on the fly.
				If empty array is given for targetsthe complete history for all targets is returned.

				PublishedDossiers - is introduced in 7.5 and supercedes the deprecated DossierIDs and Targets params.
				The PublishedDossiers param specifies which dossiers to get info for.

				PublishedIssue - is introduced in 7.5 and can be used instead of PublishedDossiers.
				The PublishedIssue param specifies which issue to get info for.
				
				RequestInfo - is added since v7.5. It is temporary optional for backwards compatibility.
				It allows clients to limit the amount of returned information and increase performance.
				Supported value is "History", which is member of:
					GetPublishInfoResponse->PublishedDossiers->PublishedDossier
				E.g. when asked for History, History is resolved for all PublishedDossier(s) at repsonse.
				Since v7.6.2 the "Fields" value is also supported. When the Fields are requested these are
				retrieved by calling the publish server plug-in. Otherwise the Fields property of the PublishedDossier
				will be empty.
				When null or left out, all information is returned. When empty, none of those is returned.
			-->
			<xsd:element name="GetPublishInfoRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                                   <!-- Enterprise ticket -->
						<xsd:element name="DossierIDs"        type="tns:ArrayOfString"             nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>  <!-- Deprecated: Dossiers to get info for. -->
						<xsd:element name="Targets"           type="tns:ArrayOfPublishTarget"      nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>  <!-- Deprecated: Targets to get into for. -->
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"
						                                      minOccurs="0"                        maxOccurs="1"/>
						<xsd:element name="RequestInfo"       type="tns:ArrayOfString"             nillable="true"
					                                          minOccurs="0"                        maxOccurs="1"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetPublishInfoResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				SetPublishInfo (since v7.5)
				
				Updates published information for and issue and its dossiers. E.g. can be used to 
				update the publish status (which is channel specific). For publishing operations, 
				more explicit services should be called (such as PublishDossiers, UpdateDossiers, etc).
				
				RequestInfo -  Allows clients to limit the amount of returned information and increase performance.
				Supported value is "History", which is member of:
					SetPublishInfoResponse->PublishedDossiers->PublishedDossier
				E.g. when asked for History, History is resolved for all PublishedDossier(s) at repsonse.
				When null or left out, all information is returned. When empty, none of those is returned.
			-->
			<xsd:element name="SetPublishInfoRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                                      <!-- Enterprise ticket -->
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"/>
						<xsd:element name="RequestInfo"       type="tns:ArrayOfString"             nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="SetPublishInfoResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				PreviewDossiers
				
				Same as publish dossiers but not putting the content online.
			-->
			<xsd:element name="PreviewDossiersRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                  <!-- Enterprise ticket -->
						<xsd:element name="DossierIDs"        type="tns:ArrayOfString"/>           <!-- Enterprise dossiers to publish -->
						<xsd:element name="Targets"           type="tns:ArrayOfPublishTarget"/>    <!-- Targets to publish to -->
						<xsd:element name="RequestInfo"       type="tns:ArrayOfString"             nillable="true"
					                                          minOccurs="0"                        maxOccurs="1"/>
						<xsd:element name="OperationId"       type="xsd:string"
					                                          minOccurs="0"                        maxOccurs="1"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="PreviewDossiersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="PublishedDossiers" type="tns:ArrayOfPublishedDossier"   nillable="true"/>
						<xsd:element name="PublishedIssue"    type="tns:PublishedIssue"            nillable="true"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<!--
				GetDossierOrder (since v7.5)
				
				Returns the dossier ordering within a given issue.
				Dossiers can be sorted by users in any order.
			-->
			<xsd:element name="GetDossierOrderRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                  <!-- Enterprise ticket. -->
						<xsd:element name="Target"            type="tns:PublishTarget"/>           <!-- Target to get order for. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="GetDossierOrderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="DossierIDs"        type="tns:ArrayOfString"/>           <!-- Ordered dossier IDs. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<!--
				UpdateDossierOrder (since v7.5)
				
				Re-orders the dossier within a given issue. Dossiers can be sorted by users in any order.
				Dossiers can be added/remove/sorted at any time by many users, which all affects the 
				dossier order. However, those operations are not locked to prevent unpredicable errors.
				Therefore the the NewOrder and OriginalOrder params are needed to enabled server to check 
				if re-order operation was based on lastest sorting. When based on obsoleted order an
				error is returned to let the user try again.
			-->
			<xsd:element name="UpdateDossierOrderRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                  <!-- Enterprise ticket. -->
						<xsd:element name="Target"            type="tns:PublishTarget"/>           <!-- Target to get order for. -->
						<xsd:element name="NewOrder"          type="tns:ArrayOfString"/>           <!-- Ordered dossier IDs as they should become. -->
						<xsd:element name="OriginalOrder"     type="tns:ArrayOfString"/>           <!-- Ordered dossier IDs as they were before reorder. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="UpdateDossierOrderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="DossierIDs"        type="tns:ArrayOfString"/>           <!-- Ordered dossier IDs. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<!--
				AbortOperation (since v7.5)
				
				Aborts server side Preview, Publish, Update or UnPublish operation for a given target (magazine).
				This is the operation launched with XxxDossiersRequest.
			-->
			<xsd:element name="AbortOperationRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                  <!-- Enterprise ticket. -->
						<xsd:element name="OperationId"       type="xsd:string"/>                  <!-- The id as generated for Preview-, Publish-, Update- or UnPublishDossiers service calls. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<!--
				OperationProgress (since v7.5)
				
				Messsures progress of server side Preview, Publish, Update or UnPublish operations 
				for a given target (magazine). This is the operation launched with XxxDossiersRequest.
			-->
			<xsd:element name="OperationProgressRequest">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Ticket"            type="xsd:string"/>                  <!-- Enterprise ticket. -->
						<xsd:element name="OperationId"       type="xsd:string"/>                  <!-- The id as generated for Preview-, Publish-, Update- or UnPublishDossiers service calls. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="OperationProgressResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="Phases"            type="tns:ArrayOfProgressPhase"/>    <!-- Progress info per operation phase. -->
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

		</xsd:schema>
	</wsdl:types>
	
	<!-- Messages -->
	<wsdl:message name="PublishDossiersRequest">
		<wsdl:part name="parameters" element="tns:PublishDossiersRequest"/>
	</wsdl:message>
	<wsdl:message name="PublishDossiersResponse">
		<wsdl:part name="parameters" element="tns:PublishDossiersResponse"/>
	</wsdl:message>
	<wsdl:message name="UpdateDossiersRequest">
		<wsdl:part name="parameters" element="tns:UpdateDossiersRequest"/>
	</wsdl:message>
	<wsdl:message name="UpdateDossiersResponse">
		<wsdl:part name="parameters" element="tns:UpdateDossiersResponse"/>
	</wsdl:message>
	<wsdl:message name="UnPublishDossiersRequest">
		<wsdl:part name="parameters" element="tns:UnPublishDossiersRequest"/>
	</wsdl:message>
	<wsdl:message name="UnPublishDossiersResponse">
		<wsdl:part name="parameters" element="tns:UnPublishDossiersResponse"/>
	</wsdl:message>
	
	<wsdl:message name="GetDossierURLRequest">
		<wsdl:part name="parameters" element="tns:GetDossierURLRequest"/>
	</wsdl:message>
	<wsdl:message name="GetDossierURLResponse">
		<wsdl:part name="parameters" element="tns:GetDossierURLResponse"/>
	</wsdl:message>
	<wsdl:message name="GetPublishInfoRequest">
		<wsdl:part name="parameters" element="tns:GetPublishInfoRequest"/>
	</wsdl:message>
	<wsdl:message name="GetPublishInfoResponse">
		<wsdl:part name="parameters" element="tns:GetPublishInfoResponse"/>
	</wsdl:message>
	<wsdl:message name="SetPublishInfoRequest">
		<wsdl:part name="parameters" element="tns:SetPublishInfoRequest"/>
	</wsdl:message>
	<wsdl:message name="SetPublishInfoResponse">
		<wsdl:part name="parameters" element="tns:SetPublishInfoResponse"/>
	</wsdl:message>
	<wsdl:message name="PreviewDossiersRequest">
		<wsdl:part name="parameters" element="tns:PreviewDossiersRequest"/>
	</wsdl:message>
	<wsdl:message name="PreviewDossiersResponse">
		<wsdl:part name="parameters" element="tns:PreviewDossiersResponse"/>
	</wsdl:message>
	
	<wsdl:message name="GetDossierOrderRequest">
		<wsdl:part name="parameters" element="tns:GetDossierOrderRequest"/>
	</wsdl:message>
	<wsdl:message name="GetDossierOrderResponse">
		<wsdl:part name="parameters" element="tns:GetDossierOrderResponse"/>
	</wsdl:message>
	<wsdl:message name="UpdateDossierOrderRequest">
		<wsdl:part name="parameters" element="tns:UpdateDossierOrderRequest"/>
	</wsdl:message>
	<wsdl:message name="UpdateDossierOrderResponse">
		<wsdl:part name="parameters" element="tns:UpdateDossierOrderResponse"/>
	</wsdl:message>

	<wsdl:message name="AbortOperationRequest">
		<wsdl:part name="parameters" element="tns:AbortOperationRequest"/>
	</wsdl:message>
	<wsdl:message name="AbortOperationResponse"/> <!-- empty -->	
	<wsdl:message name="OperationProgressRequest">
		<wsdl:part name="parameters" element="tns:OperationProgressRequest"/>
	</wsdl:message>
	<wsdl:message name="OperationProgressResponse">
		<wsdl:part name="parameters" element="tns:OperationProgressResponse"/>
	</wsdl:message>

	<!-- Operations -->
	<wsdl:portType name="EnterprisePublishingPort">
		<wsdl:operation name="PublishDossiers">
			<wsdl:input message="tns:PublishDossiersRequest"/>
			<wsdl:output message="tns:PublishDossiersResponse"/>
		</wsdl:operation>
		<wsdl:operation name="UpdateDossiers">
			<wsdl:input message="tns:UpdateDossiersRequest"/>
			<wsdl:output message="tns:UpdateDossiersResponse"/>
		</wsdl:operation>
		<wsdl:operation name="UnPublishDossiers">
			<wsdl:input message="tns:UnPublishDossiersRequest"/>
			<wsdl:output message="tns:UnPublishDossiersResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetDossierURL">
			<wsdl:input message="tns:GetDossierURLRequest"/>
			<wsdl:output message="tns:GetDossierURLResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetPublishInfo">
			<wsdl:input message="tns:GetPublishInfoRequest"/>
			<wsdl:output message="tns:GetPublishInfoResponse"/>
		</wsdl:operation>
		<wsdl:operation name="SetPublishInfo">
			<wsdl:input message="tns:SetPublishInfoRequest"/>
			<wsdl:output message="tns:SetPublishInfoResponse"/>
		</wsdl:operation>
		<wsdl:operation name="PreviewDossiers">
			<wsdl:input message="tns:PreviewDossiersRequest"/>
			<wsdl:output message="tns:PreviewDossiersResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetDossierOrder">
			<wsdl:input message="tns:GetDossierOrderRequest"/>
			<wsdl:output message="tns:GetDossierOrderResponse"/>
		</wsdl:operation>
		<wsdl:operation name="UpdateDossierOrder">
			<wsdl:input message="tns:UpdateDossierOrderRequest"/>
			<wsdl:output message="tns:UpdateDossierOrderResponse"/>
		</wsdl:operation>
		<wsdl:operation name="AbortOperation">
			<wsdl:input message="tns:AbortOperationRequest"/>
			<wsdl:output message="tns:AbortOperationResponse"/>
		</wsdl:operation>
		<wsdl:operation name="OperationProgress">
			<wsdl:input message="tns:OperationProgressRequest"/>
			<wsdl:output message="tns:OperationProgressResponse"/>
		</wsdl:operation>
	</wsdl:portType>

	<!-- Bindings -->
	<wsdl:binding name="EnterprisePublishingBinding" type="tns:EnterprisePublishingPort">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<wsdl:operation name="PublishDossiers">
			<soap:operation soapAction="urn:EnterprisePublishing#PublishDossiers"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="UpdateDossiers">
			<soap:operation soapAction="urn:EnterprisePublishing#UpdateDossiers"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="UnPublishDossiers">
			<soap:operation soapAction="urn:EnterprisePublishing#UnPublishDossiers"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetDossierURL">
			<soap:operation soapAction="urn:EnterprisePublishing#GetDossierURL"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetPublishInfo">
			<soap:operation soapAction="urn:EnterprisePublishing#GetPublishInfo"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="SetPublishInfo">
			<soap:operation soapAction="urn:EnterprisePublishing#SetPublishInfo"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="PreviewDossiers">
			<soap:operation soapAction="urn:EnterprisePublishing#PreviewDossiers"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetDossierOrder">
			<soap:operation soapAction="urn:EnterprisePublishing#GetDossierOrder"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="UpdateDossierOrder">
			<soap:operation soapAction="urn:EnterprisePublishing#UpdateDossierOrder"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="AbortOperation">
			<soap:operation soapAction="urn:EnterprisePublishing#AbortOperation"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="OperationProgress">
			<soap:operation soapAction="urn:EnterprisePublishing#OperationProgress"/>
			<wsdl:input><soap:body use="literal"/></wsdl:input>
			<wsdl:output><soap:body use="literal"/></wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	
	<!-- Service entry point -->
	<wsdl:service name="EnterprisePublishingService">
		<wsdl:documentation>WoodWing Enterprise Channel Publishing Web Service</wsdl:documentation>
		<wsdl:port name="EnterprisePublishingPort" binding="tns:EnterprisePublishingBinding">
			<soap:address location="http://127.0.0.1/Enterprise/publishindex.php"/>
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>
