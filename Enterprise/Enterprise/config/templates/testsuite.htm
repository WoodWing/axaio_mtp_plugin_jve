<!-- button bar -->
<style>
	table.listpane > tbody > tr:nth-child(4n-3) {
		background: #EEE;
	}
</style>

<div id="testsTableDiv"></div>
<input id="startBtn" type="button" value="Test" onclick="startTest();"/>
&nbsp;
<input id="stopBtn" type="button" value="Abort" onclick="stopTest();" disabled=""/>
&nbsp;
<input id="selectBtn" type="button" value="Clear All" onclick="toggleAllTags();"/>
&nbsp;
<div id="currTest"></div>

<noscript>
	<table><tr><td width="100" valign="top">
		<hr><b>Browser</b></td><td><hr><font color="red">[FAILED]</font><br>
		Error: your browser needs to support Javascript. Please configure your browser to do so.
	</td></tr></table>
</noscript>

<script type="text/javascript" src="../../server/utils/javascript/tristate-0.9.2.js" ></script>

<!-- tri-state usage exmaple:
<br/><br/>
<style type='text/css'>span.tristateBox { cursor: default; padding-left: 4px; } </style>
<form onsubmit="return false; ">
	<span id="tristateBox1" class="tristateBox">&nbsp;&nbsp;Programming Languages</span><br/>
	<div id="tristateBoxContainer1" style="padding-left: 25px;" >
		<label id="label_1" for="cb_1"><input id="cb_1" name="cb_1" value="1" type="checkbox"> Java    </label><br />
		<label id="label_2" for="cb_2"><input id="cb_2" name="cb_2" value="2" type="checkbox"> C++    </label><br />
		<span id="tristateBox2" class="tristateBox">&nbsp;&nbsp;Web Browser related</span><br/>
		<div id="tristateBoxContainer2" style="padding-left: 25px;" >
			<label id="label_3_1" for="cb_3_1"><input id="cb_3_1" name="cb_3_1" value="3_1" checked="checked" type="checkbox"> Html    </label><br />    
			<label id="label_3_2" for="cb_3_2"><input id="cb_3_2" name="cb_3_2" value="3_2" checked="checked" type="checkbox"> Css    </label> <br />   
			<label id="label_3_3" for="cb_3_3"><input id="cb_3_3" name="cb_3_3" value="3_3" type="checkbox"> Javascipt    </label>  <br />  
		</div>
		<label id="label_4" for="cb_4"><input id="cb_4" name="cb_4" value="4" type="checkbox"> Visual Basic    </label>   <br /> 
		<label id="label_5" for="cb_5"><input id="cb_5" name="cb_5" value="5" type="checkbox"> Ruby    </label>   <br /> 
		<label id="label_6" for="cb_6"><input id="cb_6" name="cb_6" value="6" type="checkbox"> Python    </label>   
	</div>  
</form>
<script type="text/javascript">
	initTriStateCheckBox('tristateBox1', 'tristateBoxContainer1', false);
	initTriStateCheckBox('tristateBox2', 'tristateBoxContainer2', false);
</script>
-->

<script language="javascript" type="text/javascript" src="../../server/utils/javascript/XPath.js" ></script>
<script language="javascript" type="text/javascript" src="../../server/utils/javascript/WWAjax.js" ></script>

<script language="javascript" type="text/javascript">
<!--
	var gAutoSaveTimer = null;
	var gPollCount = 0;
	var gTestCasesDoc = null;
	var gTestCases = new Array();
	var gTestResults = new Array();
	var gCurrTestCase = -1;
	var gTriStates = new Array();
	var gSessionId = null;
	var gTestSuite = null;

	var gResultDefines = { 
		'FATAL'  : { color: 'red',     icon: 'error.png',   bitflag: 64, display: 'FATAL' },
		'ERROR'  : { color: 'red',     icon: 'error.png',   bitflag: 32, display: 'ERROR' },
		'WARN'   : { color: '#f6a124', icon: 'warning.png', bitflag: 16, display: 'WARNING' },
		'NOTINSTALLED': { color: '#f6a124', icon: 'notinstalled.png', bitflag: 8, display: 'NOT INSTALLED' },
		'SKIPPED': { color: 'blue',    icon: 'skipped.png', bitflag: 4, display: 'SKIPPED' },
		'INFO'   : { color: 'blue',    icon: 'info.png',    bitflag: 2, display: 'INFO' },
		'OK'     : { color: 'green',   icon: 'ok.png',      bitflag: 1, display: 'OK' } };
	
	/**
	 * Requests server to return available tests to let user pick from.
	 */
	function initTest( testSuite )
	{
		var serverUrl = "../../server/wwtest/testsuite.php";
		//serverUrl += "?start_debug=1"; // Zend Debugger (do not combine with server side debugging!)
		//serverUrl += "?XDEBUG_SESSION_START=PHPSTORM"; // PhpStorm debugger
        gTestSuite = testSuite;
		WWAjax.doHttpRequest( serverUrl, "callbackTestInit", "text/xml", true, 
									"command=InitTest&testSuite="+testSuite, true ); // asynchronous call (synchronous fails under Apache+WinXP?)
	}

	/**
	 * Called back by WWAjax when server responds on initTest function call
	 */
	function callbackTestInit( xmlResult, httpStatus )
	{
		if( httpStatus == 200 ) { // ok?

			// Handle errors after talking to server. Quit on error.
			if( !xmlResult.documentElement ) {
				alert( 'Fatal Error!\nHTTP Status: ' + httpStatus + '\nInvalid XML response:\n' + xmlResult );
				return;
			}
			if( xmlResult.documentElement.nodeName == 'parsererror' ) {
				alert( 'Invalid XML response:\n' + XPath.selectNodeExtended( "parsererror/text()", xmlResult ) );
				return;
			}
			var fatalError = XPath.selectNodeExtended( "//FatalError/Description/text()", xmlResult );
			if( fatalError ) {
				alert(fatalError);
				return;
			}
			
			// Collect ALL Test Modules as received from server. This includes all children of all Test Suites.
			gTestCasesDoc = xmlResult;
			var testCases = XPath.selectNodes( "//Tests/Test", gTestCasesDoc );
			if( testCases.length == 0 ) alert( 'init failed' );

			// Build HTML header
			var displayName = XPath.selectNodeExtended( "Root/Test/DisplayName/text()", xmlResult );
			if( !displayName ) displayName = '';
			var displayWarn   = XPath.selectNodeExtended( "Root/Test/DisplayWarn/text()", xmlResult );
			if( !displayWarn ) displayWarn = '';
			var testGoals   = XPath.selectNodeExtended( "Root/Test/TestGoals/text()",   xmlResult );
			if( !testGoals ) testGoals = '';
			var testMethods = XPath.selectNodeExtended( "Root/Test/TestMethods/text()", xmlResult );
			if( !testMethods ) testMethods = '';
			var header = "<h1>" + displayName + "</h1>";
			if( displayWarn ) {
				header += '<div style="border-width:thin; border-style:solid; border-color:red; margin-bottom:15px; padding:5px">' +
				'<font color="red"><b>WARNING:</b> ' + displayWarn + ' </font></div>';
			}
			header += "<p><b>Goals: </b>" + testGoals + "</p><p><b>Methods: </b>" + testMethods + "</p>";
			
			// Build HTML table (from given XML struct) listing all Test Modules and add it to HTML DOM to show user.
			gCurrTestCase = 0; // Init global for buildTestTable() below.
			topTests = XPath.selectNodes( "Root/Test/Tests/Test", xmlResult ); // first level tests only
			testTable = buildTestTable( topTests, true ); 
			//testTable += 'Found ' + topTests.length + ' Test Modules.<br/>';
			//testTable += 'Found ' + gTriStates.length + ' Test Suites with children.<br/><br/>';
			document.getElementById("testsTableDiv").innerHTML = header + testTable;
			gCurrTestCase = -1; // Reset global for pollTest() later.

			// Complete tristates and add listeners. This must be done AFTER adding HTML table to DOM (as done above).
			// The buildTestTable has set the global gTriStates which tells us which Test Suite ids have children.
			// The checkboxes have "tristateBox_" prefixes and the containers of its children have "testchilds_" prefixes.
			for( var i=0; i < gTriStates.length; i++ ) {
				initTriStateCheckBox( 'tristateBox_' + gTriStates[i], 'testchilds_'+ gTriStates[i], false);
			}
			
		} else {
			alert( 'ERROR\nHttpstatus: ' + httpStatus + '\n' + xmlResult );
		}
	}

	/**
	 * Builds HTML table (from given XML struct) listing all Test Modules.
	 * (Note that a Test Module is either a Test Suite or a Test Case object.)
	 * All GUI elements (such as icons) are added to the table.
	 * Child Test Modules of a Test Suite are put inside next row of the Test Suite.
	 * Inside that row, a new HTML table is build, which shows all children. (Initially hidden.)
	 *
	 * @param thisTests List of XMLDOM nodes of all Test elements (Test Modules)
	 * @return string HTML table
	 */
	function buildTestTable( thisTests, topLevel )
	{
		if( topLevel ) { // only for top level, no table indent
			testTable = '<table class="listpane" width="100%" style="padding-left: 0px; padding-right: 0px;" border="0" cellspacing="0">';
		} else { // indent children
			testTable = '<table width="100%" style="padding-left: 12px; padding-right: 0px;" border="0" cellspacing="0">';
		}
		for( var j=0; j < thisTests.length; j++ ) {
			testTable += '<tr valign="top">';

			// Get Test Module properties from XML
			var displayName = XPath.selectNodeExtended( "DisplayName/text()", thisTests[j] );
			if( !displayName ) displayName = '';
			var testGoals   = XPath.selectNodeExtended( "TestGoals/text()",   thisTests[j] );
			if( !testGoals ) testGoals = '';
			var testMethods = XPath.selectNodeExtended( "TestMethods/text()", thisTests[j] );
			if( !testMethods ) testMethods = '';
			var testPrio    = XPath.selectNodeExtended( "Prio/text()",        thisTests[j] );
			if( !testPrio ) testPrio = '';
			var classPath   = XPath.selectNodeExtended( "ClassPath/text()",   thisTests[j] );
			if( !classPath ) classPath = '';
			var testType    = XPath.selectNodeExtended( "Type/text()",   thisTests[j] );
			if( !testType ) testType = '';
			var testIsTestable    = XPath.selectNodeExtended( "isTestable/text()",   thisTests[j] );
			if( !testIsTestable ) testIsTestable = 'false';
			var testIsTestableReason    = XPath.selectNodeExtended( "isTestableReason/text()",   thisTests[j] );
			if( !testIsTestableReason ) testIsTestableReason = '';
			var displayType = (testType == 'TestSuite') ? "Test Suite" : ( (testType == 'TestCase') ? "Test Case" : "Name" );
			var childTests  = XPath.selectNodes( "Tests/Test", thisTests[j] );
			if ( testIsTestable == "true" ) {
				// Add tri-state checkbox for Test Suite or add two-state checkbox for Test Case
				if( testType == 'TestSuite' ) {
					if( childTests && childTests.length > 0 ) {
						gTriStates.push( gCurrTestCase );
						testTable += '<td><span id="tristateBox_' + gCurrTestCase + '" class="tristateBox"></span></td>';
					} else {
						testTable += '<td></td>';
					}
				} else {
					testTable += '<td><input type="checkbox" id="testCase_' + gCurrTestCase + '" checked=""/></td>';
				}
			} else {
				testTable += '<td></td>';
			}
			
			// Add info icon. (When user click on icon, it toggles visual state of Test Module details section.)
			testTable += '<td><img onclick="javascript:toggleInfo(\''+gCurrTestCase+'\');" src="../../config/images/wwtest/details.png" title="Details"/></td>';
			if( testType == 'TestSuite' ) {
				if( childTests && childTests.length > 0 ) {
					testTable += '<td><img onclick="javascript:toggleSuite(this, \''+gCurrTestCase+'\');" src="../../config/images/wwtest/unfold.png" title="Show Test Modules"/></td>';
				} else {
					testTable += '<td><img src="../../config/images/wwtest/warning.png" title="No Test Modules found for this Test Suite."/></td>';
				}
			} else {
				testTable += '<td></td>';
			}
			
			// Add Test Module's name
			testTable += '<td style="white-space: nowrap;">' + displayName + '</td>';

			if ( testIsTestable == "true" ) {
				// Add space reserved for test results.
				testTable += '<td id="result_' + gCurrTestCase + '" width="90%" align="right"></td>';
			} else {
				// show reason why test is not testable
				testTable += '<td id="result_' + gCurrTestCase + '" width="90%" align="right">' + testIsTestableReason + '</td>';
			}
			testTable += '</tr>';
			// Add section with Test Module details. Default hidden.
			testTable += '<tr id="testinfo_' + gCurrTestCase + '" style="display:none;" valign="top">';
			testTable += '<td/><td/><td/>';
			testTable += '<td bgcolor="#EEEEEE" colspan="2"><table width="100%">';
			testTable += '    <tr valign="top"><td><b>'+displayType+': </b></td><td>' + displayName + '</td></tr>';
			testTable += '    <tr valign="top"><td><b>Goals: </b></td><td>' + testGoals + '</td></tr>';
			testTable += '    <tr valign="top"><td><b>Methods: </b></td><td>' + testMethods + '</td></tr>';
			testTable += '    <tr valign="top"><td><b>Priority: </b></td><td>' + testPrio + '</td></tr>';
			testTable += '    <tr valign="top"><td><b>Location: </b></td><td>' + classPath + '</td></tr></table></td>';
			testTable += '</tr>';

			gTestCases.push({id: gCurrTestCase, classPath: classPath});
			// Only for Test Suites: Add its children Test Modules (using recursion).
			gCurrTestCase += 1;
			if( childTests && childTests.length > 0 ) {
				testTable += '<tr id="testchilds_' + (gCurrTestCase-1) + '" style="display:none;"><td colspan="5">';
				testTable += buildTestTable( childTests );
				testTable += '</td></tr>';
			}
		}
		testTable += '</table>';
		
		return testTable;
	}

	/**
	 * Hide/Show the Test Modules (children) of the Test Suite.
	 * Called when user presses the unfold button [+] or the fold [-] button.
	 * The children are listed in HTML table that is entirely wrapped by a parent table row.
	 * This function simply shows/hides that table row (which resides next to Test Suite row).
	 */
	function toggleSuite( imgObj, testId )
	{
		var testChildsRow = document.getElementById("testchilds_"+testId); 
		var fileName = imgObj.src.substr( imgObj.src.lastIndexOf("/") + 1 );
		if( fileName == "fold.png" ) { // TestSuite icon was unfolded? Let's fold!
			imgObj.src = "../../config/images/wwtest/unfold.png"; // folded
			imgObj.title = "Show Test Modules";
			testChildsRow.style.display = 'none'; // hide childs
		} else { // Let's unfold!
			imgObj.src = "../../config/images/wwtest/fold.png"; // unfolded
			imgObj.title = "Hide Test Modules";
			testChildsRow.style.display = ''; // show childs
		}
	}

	/**
	 * Creates and retrieves a new test session id (GUID). Do NOT confuse this with Enterprise sessions (ticket).
	 */
	function createSession()
	{
		var serverUrl = "../../server/wwtest/testsuite.php";
		//serverUrl += "?start_debug=1"; // Zend Debugger (do not combine with server side debugging!)
		WWAjax.doHttpRequest( serverUrl, "callbackCreateSession", "text/plain", false, // text result
									"command=CreateSession", true ); // asynchronous call (synchronous fails under Apache+WinXP?)
	}
	
	/**
	 * Called back by WWAjax when server responds on createSession function call
	 */
	function callbackCreateSession( txtResult, httpStatus )
	{
		if( gAutoSaveTimer == null ) {
			gSessionId = txtResult;
			if( gCurrTestCase != -1 ) { // clear in case of re-start
				var testCases = XPath.selectNodes( "//Tests/Test", gTestCasesDoc );
				for( var j=0; j < testCases.length; j++ ) {
					document.getElementById("result_"+j).innerHTML = '';
				}
				gCurrTestCase = -1;
				gTestResults = new Array();
			}
			document.getElementById('startBtn').disabled = true;
			document.getElementById('startBtn').value = "Retest";
			document.getElementById('stopBtn').disabled = false;
			gAutoSaveTimer = setTimeout( "pollTest()", 1 );
		}
	}
	
	/**
	 * Runs the next user selected test (and pushes gCurrTestCase to next step)
	 */
	function pollTest()
	{
		if( gAutoSaveTimer != null ) {
			gCurrTestCase++;
			while( gCurrTestCase < gTestCases.length ) {
				var testCase = document.getElementById("testCase_"+gCurrTestCase);
				if( testCase && testCase.checked ) {
					break; // found
				} else {
					if( testCase ) {
						var resultHTML = buildStatusHtmlTableRows( 'SKIPPED', '', '' );
						var resultDiv = document.getElementById("result_"+gCurrTestCase);
						resultDiv.innerHTML = '<table border="0" cellpadding="0" cellspacing="0">' + resultHTML + '</table>';
						gTestResults[gCurrTestCase] = 'SKIPPED';
						var currCase = getTestModuleFromClassPath( gTestCases[gCurrTestCase].classPath );
						reflectStatusToParents( currCase, 'SKIPPED' );
					} // else: Test Suite; do nothing
					gCurrTestCase++;
				}
			}
			if( gCurrTestCase < gTestCases.length ) {
				var progressIcon = document.getElementById("result_"+gCurrTestCase); 
				progressIcon.innerHTML = '<img src="../../config/images/wwloader.gif">';
				
				gPollCount++;
				/* // Heavy debug only
				var currTest = document.getElementById("currTest"); 
				currTest.innerHTML = "testing... [count=" + gPollCount + "] [curr=" + gCurrTestCase + "] [id=" + classPath + "]";
				currTest.innerHTML += '<img src="../../config/images/wwloader.gif">';
				*/
				var serverUrl = "../../server/wwtest/testsuite.php";
				//serverUrl += "?start_debug=1"; // Zend Debugger (do not combine with server side debugging!)
				WWAjax.doHttpRequest( serverUrl, "callbackTestPoll", "text/xml", true, 
										"command=PollTest&classPath=" + gTestCases[gCurrTestCase].classPath + "&testpoll=" + gPollCount +
										"&sessionId=" + gSessionId + "&testSuite=" + gTestSuite,
										true ); // asynchronous call!
			} else { // test completed
				stopTest();
			}
		}
	}

	/**
	 * Called back by WWAjax when server responds on pollTest function call
	 */
	function callbackTestPoll( xmlResult, httpStatus )
	{
		if( !xmlResult.documentElement ) {
			alert( 'Fatal Error!\nHTTP Status: ' + httpStatus + '\nInvalid XML response:\n' + xmlResult );
			stopTest(); // break out when communication fails (avoid many errors)
			return;
		}
		if( httpStatus != 200 ) {
			alert( 'Fatal Error!\nHTTP Status: ' + httpStatus + '\nXML response:\n' + xmlResult );
			stopTest(); // break out when communication fails (avoid many errors)
			return;
		}
		if( gAutoSaveTimer != null ) { // could be stopped by user in meantime

			var resultHTML = '';
			var fatal = false;
			var status = '';
			testResultNodes = XPath.selectNodes( "//TestReport/TestCase/TestResults/TestResult", xmlResult );
			for( var j=0; j < testResultNodes.length && !fatal; j++ ) {

				status        = XPath.selectNodeExtended( "Status/text()", testResultNodes[j] );
				var messages  = XPath.selectNodeExtended( "Message/text()", testResultNodes[j] );
				var configTip = XPath.selectNodeExtended( "ConfigTip/text()", testResultNodes[j] );
				var message   = '';
				if( messages ) {
					if( typeof( messages[0].nodeValue ) != 'undefined' ) { // handle Text objects
						for( var m = 0; m < messages.length; m++ ) {
							message += messages[m].nodeValue;
						}
					} else { // handle string data
						message = messages;
					}
				}
				resultHTML += buildStatusHtmlTableRows( status, message, configTip );
				if( status == 'FATAL' ) {
					fatal = true; // break out and abort testing
				}
			}
			if( testResultNodes.length == 0 ) { // no results implies test crashed or something
				status = 'ERROR';
				resultHTML += buildStatusHtmlTableRows( 'ERROR', 'Test script did not respond.', 'Please check the server log files.' );
			}
			
			var currCasePath = XPath.selectNodeExtended( "//TestReport/TestCase/ClassPath/text()", xmlResult );
			var currCase = getTestModuleFromClassPath( currCasePath );
			gTestResults[currCase.id] = status;
			reflectStatusToParents( currCase, status );

			var resultDiv = document.getElementById("result_"+gCurrTestCase);
			resultDiv.innerHTML = '<table border="0" cellpadding="0" cellspacing="0">' + resultHTML + '</table>';
			if( fatal ) {
				stopTest(true);
			} else {
				gAutoSaveTimer = setTimeout( "pollTest()", 1 );
			}
		}
	}

	/**
	 * When a test result is determined, it needs to be reflected to parents and grant parents.
	 * This is to visualize the status at top level, which is typically usefull for folded TestSuites.
	 */
	function reflectStatusToParents( currCase, status )
	{
		var testCase = currCase;
		while( testCase ) {
			var testCaseNode = testCase.node.parentNode ? testCase.node.parentNode.parentNode : null;
			if( testCaseNode ) {
				var classPath = XPath.selectNodeExtended( "ClassPath/text()", testCaseNode );
				testCase = getTestModuleFromClassPath( classPath );
				if( testCase ) { // add status to (parent) TestSuite
					if( !gTestResults[testCase.id] ) {
						gTestResults[testCase.id] = gResultDefines[status].bitflag;
					} else if( !(gTestResults[testCase.id] & gResultDefines[status].bitflag) ) {
						gTestResults[testCase.id] = gTestResults[testCase.id] + gResultDefines[status].bitflag;
					}
				}
			} else {
				testCase = null;
			}
		}
		testCase = currCase;
		while( testCase ) {// do not check for nextSibling, doesn't work with BuildTest // && !testCase.node.nextSibling ) { 
			var testCaseNode = testCase.node.parentNode ? testCase.node.parentNode.parentNode : null;
			if( testCaseNode ) {
				var classPath = XPath.selectNodeExtended( "ClassPath/text()", testCaseNode );
				testCase = getTestModuleFromClassPath( classPath );
				if( testCase ) {// do not check for nextSibling, doesn't work with BuildTest  // && !testCase.node.nextSibling ) {
					var suiteHTML = '';
					for( var statusIter in gResultDefines ) {
						if( gTestResults[testCase.id] & gResultDefines[statusIter].bitflag ) {
							if( suiteHTML != "" ) suiteHTML += "<td>&nbsp;/&nbsp;</td>";
							suiteHTML += buildStatusHtmlTableCells( statusIter );
						}
					}
					var resultDiv = document.getElementById("result_"+testCase.id);
					resultDiv.innerHTML = '<table border="0" cellpadding="0" cellspacing="0"><tr valign="top">' + suiteHTML + '</tr></table>';
				}
			} else {
				testCase = null;
			}
		}
	}
	
	/**
	 * During initialization, all TestSuite and TestCase definitions are stored at gTestCasesDoc.
	 * This function searches for such definition based on a given class path.
	 * Returns a struct with an "id" (index of gTestCasesDoc) and a "node" (XML node of gTestCasesDoc).
	 */
	function getTestModuleFromClassPath( classPath )
	{
		//var curCase = XPath.selectNodeExtended( "//Test/ClassPath[text()='"+testCasePath+"']", gTestCasesDoc ); // this does not work!?
		// Walk through all TestSuites and TestCases
		var testCases = XPath.selectNodes( "//Tests/Test", gTestCasesDoc );
		var node = null;
		for( k=0; k < testCases.length; k++ ) { 
			var iterPath = XPath.selectNodeExtended( "ClassPath/text()", testCases[k] );
			if( iterPath == classPath ) { // Found requested test module definition?
				node = testCases[k];
				break;
			}
		}
		// search for id, ids in table are not in the same order as XPath returns!
		if (node){
			for (k=0; k < gTestCases.length; k++){
				if (gTestCases[k].classPath == classPath){
					return { id: k, node: node };
				}
			}
		}
		return null; // not found (should never happen)
	}

	function buildStatusHtmlTableCells( status )
	{
		//var resultHTML = '<td width="99%" background="../../config/images/heading_grayline.gif" style="background-repeat: repeat-x;"/>';
		var resultHTML = '<td width="99%"/>';
		resultHTML += '<td width="20"><img src="../../config/images/wwtest/'+gResultDefines[status].icon+'"/></td>';
		resultHTML += '<td><font color="'+gResultDefines[status].color+'"><nobr><b>&nbsp;['+gResultDefines[status].display+']&nbsp;</b></nobr></font></td>';
		return resultHTML;
	}
	
	function buildStatusHtmlTableRows( status, message, configTip )
	{
		var resultHTML = '<tr valign="top">' + buildStatusHtmlTableCells( status ) + '</tr>';
		if( message && message.length > 0 ) { // [OK] status typically has no message
			resultHTML += '<tr valign="top"><td>' + message + '</td><td/><td/></tr>';
		}
		if( configTip && configTip.length > 0 ) {
			resultHTML += '<tr valign="top"><td><b>&nbsp;TIP:&nbsp;</b>' + configTip + '</td><td/><td/></tr>';
		}
		return resultHTML;
	}

	/**
	 * Runs all user selected tests
	 */
	function startTest()
	{
		createSession();
		// ... continues execution at callbackStartSession()
	}

	/**
	 * Aborts the running tests that were started with startTest function
	 */
	function stopTest( fatal )
	{
		if( gAutoSaveTimer != null ) {
			var testCases = XPath.selectNodes( "//Tests/Test", gTestCasesDoc );
			if( fatal != true && gCurrTestCase < testCases.length  ) { // clear loader when spinning. Fatal errors show a message, do not clear
				var progressIcon = document.getElementById("result_"+gCurrTestCase); 
				progressIcon.innerHTML = '';
			}
			document.getElementById('startBtn').disabled = false;
			document.getElementById('stopBtn').disabled = true;
			clearTimeout( gAutoSaveTimer ); // stop auto-save interval
			gAutoSaveTimer = null;
		}
	}

	/**
	 * Shows details info of the given test.
	 */
	function toggleInfo( testId )
	{
		var testInfo = document.getElementById("testinfo_"+testId); 
		if( testInfo.style.display == '' ) {
			testInfo.style.display = 'none';
		} else {
			testInfo.style.display = '';
		}
	}

	/**
	 * Selects or unselects all tests.
	 */
	function toggleAllTags()
	{
		var newVal = '';
		var selectBtn = document.getElementById('selectBtn');
		if( selectBtn.value == "Select All" ) {
			newVal = 'checked';
			selectBtn.value = "Clear All";
		} else {
			selectBtn.value = "Select All";
		}
		
		var testCases = XPath.selectNodes( "//Tests/Test", gTestCasesDoc );
		for( var j=0; j < testCases.length; j++ ) {
			var testCase = document.getElementById("testCase_"+j);
			if( testCase ) { // Test Case
				if( !testCase.disabled ) {
					if( testCase.checked != newVal ) {
						testCase.click(); // simulate user click to trigger hierarchical str-state listeners!
					}
				}
			} // else Test Suite; nothing to do
		}
	}


//-->
</script>
