<?php

use Drupal\Core\Database\Database;

include_once(drupal_get_path('module', 'ww_enterprise') . '/ww_enterprise_field.inc');
include_once(drupal_get_path('module', 'ww_enterprise') . '/ww_enterprise_xmlrpc.inc');
set_time_limit(3600);

/**
 * Implementation of hook_ENTITY_TYPE_form_alter.
 *
 * Adds a ww_term_entity field to the Taxonomy form for Vocabularies to allow users to enter a term entity which
 * is used to provide suggestions in Enterprise Server for the field.
 *
 * @param array $form The form being manipulated.
 * @param \Drupal\Core\Form\FormStateInterface $form_state The state of the manipulated form.
 * @param string $form_id The ID of the form.
 */
function ww_enterprise_form_taxonomy_vocabulary_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $vocabularyId = $form['vid']['#default_value'];

  // If an existing vocabulary is loaded we want to set the ww_term_entity to the stored value.
  $defaultValue = '';
  if (!is_null($vocabularyId)) {
    // Load the vocabulary to retrieve the uuid.
    $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple(array($vocabularyId));
    if ($vocabularies) {
      /** @var $vocabulary \Drupal\taxonomy\Entity\Vocabulary */
      $vocabulary = $vocabularies[$vocabularyId];
      $guid = $vocabulary->uuid();
      $suggestionEntity = getWoodWingSuggestionEntity($guid);
      $defaultValue = (empty($suggestionEntity)) ? '' : $suggestionEntity;
    }
  }

  // Add the form element for the ww_term_entity field to the vocabulary form.
  $form['ww_term_entity'] = array(
    '#type' => 'textfield',
    '#title' => t('WoodWing Enterprise Suggestion Entity'),
    '#default_value' => $defaultValue,
    '#size' => 60,
    '#maxlength' => 200,
    '#required' => FALSE,
  );
}

/**
 * Implementation of the hook_ENTITY_TYPE_presave hook.
 *
 * Updates a WoodWing Suggestion Entity for the given vocabulary. This hook is also used when performing inserts on a
 * vocabulary by storing an initial record for the ww_term_entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity The entity being saved.
 */
function ww_enterprise_taxonomy_vocabulary_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $guid = $entity->uuid();
  $suggestionEntity = \Drupal::request()->request->get('ww_term_entity');

  // Prevent an SQL injection if no suggestion entity is given.
  if (!$suggestionEntity) {
    return;
  }

  // Check if a value already exists for the ww_term_entity, if not add one, used for insert as well as update.
  $storedEntity = getWoodWingSuggestionEntity($guid);
  $dbConnection = Database::getConnection();
  if (is_null($storedEntity)) {
    $vocabularyMap = array('vocabulary_uuid', 'ww_term_entity');
    $values = array(
      'vocabulary_uuid' => $guid,
      'ww_term_entity' => $suggestionEntity
    );
    $dbConnection->insert('ww_enterprise_vocabulary_map')
      ->fields($vocabularyMap)
      ->values($values)
      ->execute();

    \Drupal::logger('ww_enterprise')
      ->debug('Inserted a WoodWing Suggestion Entity `' . $suggestionEntity
        . '` for Entity UUID `' . $guid . '`');
  }
  else {
    // Update the ww_term_entity value with the newly entered value.
    $dbConnection->update('ww_enterprise_vocabulary_map')
      ->condition('vocabulary_uuid', $guid)
      ->fields(array('ww_term_entity' => $suggestionEntity))
      ->execute();
    // Add logging of the update event.
    \Drupal::logger('ww_enterprise')
      ->debug('Updated a WoodWing Suggestion Entity `' . $suggestionEntity
        . '` for Entity UUID `' . $guid . '`');
  }
}

/**
 * Implementation of the hook_ENITTY_TYPE_delete hook.
 *
 * Deletes a WoodWing Suggestion Entity for the given vocabulary.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity The entity being deleted.
 */
function ww_enterprise_taxonomy_vocabulary_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $guid = $entity->uuid();

  // Remove the ww_term_entity for the passed in guid.
  Database::getConnection()->delete('ww_enterprise_vocabulary_map')
    ->condition('vocabulary_uuid', $guid)
    ->execute();

  // Add logging of the delete event.
  \Drupal::logger('ww_enterprise')
    ->debug('Deleted a WoodWing Suggestion Entity for Entity UUID `' . $guid . '`');
}
